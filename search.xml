<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>在手机上搭建 Web 服务器</title>
    <url>/blog//AO/termux-flask-ngrok/</url>
    <content><![CDATA[<p>使用的主要工具：</p>
<ul>
<li>Termux——模拟 Linux 环境</li>
<li>Flask——作为后端框架</li>
<li>Ngrok——内网穿透</li>
</ul>
<p>你需要：</p>
<ul>
<li>能够正常运行以上软件的安卓手机</li>
<li>最好有一台电脑</li>
</ul>
<span id="more"></span>
<p>在模拟的 Linux 环境下运行 Ngrok <strong>需要手机有 root
权限，仅用于解决<a
href="#在开始之前解决-dns-问题">这个问题</a></strong>。如果没有更好的，不使用
root 权限的方法的话，可以尝试<a href="#另外">在 Termux 上安装 Linux
发行版</a>。</p>
<p><a href="/blog/AO/magisk-root/">用 Magisk 获取 Android 手机的 root
权限</a></p>
<h2 id="termux模拟-linux-环境">Termux——模拟 Linux 环境</h2>
<p><a href="https://termux.dev/cn/index.html">Termux</a>
是一个在安卓手机上模拟 Linux 环境的 app。</p>
<p>适用于 Android &gt;= 7，无需手机 root。可以在 github 上<a
href="https://github.com/termux/termux-app/releases/">下载</a>。</p>
<p>Termux 模拟 Linux
环境的根目录在手机的<code>/data/data/com.termux/files/</code>。</p>
<h3 id="如果手机没有-root">如果手机没有 root：</h3>
<ul>
<li><p>在 termux 内，最多访问到上一级目录
<code>com.termux/</code>，无法访问<code>/data/</code>。</p></li>
<li><p>在 termux
外，使用文件管理器无法访问<code>/data/</code>。</p></li>
<li><p>在 termux 内访问手机 SD 卡，需使用命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">termux-setup-storage</span><br></pre></td></tr></table></figure>
<p>这会把 SD 卡目录<code>/storage/emulated/0/</code>链接到
<code>/data/data/com.termux/files/home/storage/shared/</code>。</p></li>
</ul>
<h3 id="如果手机已-root">如果手机已 root：</h3>
<p>可以直接使用<a href="https://mt2.cn/">MT
管理器</a>访问各个目录。这样转移文件比较方便。</p>
<h3 id="另外">另外</h3>
<p>上面针对的是 Termux 模拟的 Linux 环境。<strong>你可以使用 <a
href="https://wiki.termux.com/wiki/PRoot">PRoot</a> 或者 <a
href="https://github.com/2moe/tmoe">TMOE</a> 安装 Linux
发行版。</strong></p>
<h2 id="flask后端框架">Flask——后端框架</h2>
<p>Flask 是一个用 Python 编写的 Web 框架。<a
href="https://flask.palletsprojects.com/">官网</a> | <a
href="https://dormousehole.readthedocs.io/">中文文档</a></p>
<h3 id="安装-flask">安装 Flask</h3>
<p>首先在 Termux 上安装 Python：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pkg install python</span><br></pre></td></tr></table></figure>
<p>然后用 Python 的包管理工具 pip 安装 Flask：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install flask</span><br></pre></td></tr></table></figure>
<h3 id="在本地使用-flask">在本地使用 Flask</h3>
<ol type="1">
<li>在家目录下新建一个文件夹。名字随便取，用于存放代码：</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/flask-app</span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li><p>在文件夹里新建<code>app.py</code>文件——你可以在电脑上写好了传到手机，也可以用
MT 管理器写，还可以用 Vim 写。</p></li>
<li><p>编写代码：</p></li>
</ol>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, make_response</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="comment">#处理根路由的视图函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line"></span><br><span class="line">    <span class="comment">#创建 html 字符串</span></span><br><span class="line">    html_content = <span class="string">&quot;&lt;h1&gt;Hello, Flask!&lt;/h1&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#创建响应对象</span></span><br><span class="line">    response = make_response(html_content)</span><br><span class="line">    response.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;text/html&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#返回响应</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>
<ol start="4" type="1">
<li>在<code>flask-app</code>目录下运行：</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python app.py &amp;</span><br></pre></td></tr></table></figure>
<p><code>&amp;</code>表示把程序放在后台运行。</p>
<p>你会看到：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line"> * Serving Flask app &#x27;app&#x27;</span><br><span class="line"> * Debug mode: off</span><br><span class="line">WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.</span><br><span class="line"> * Running on http://127.0.0.1:5000</span><br><span class="line">Press CTRL+C to quit</span><br></pre></td></tr></table></figure>
<p>用浏览器访问<code>http://127.0.0.1:5000</code>，看到<code>Hello, Flask!</code>即为成功。</p>
<h3 id="在局域网内使用-flask">在局域网内使用 Flask</h3>
<p>指定<code>app.run()</code>里面的<code>host</code>和<code>port</code>参数，即可在
Wi-Fi 局域网内访问手机。</p>
<ol type="1">
<li><p>在手机设置里搜索（或者使用<code>ifconfig</code>命令），找到你手机的
ip 地址。比如是<code>192.168.1.2</code>。</p></li>
<li><p>把代码里的<code>app.run()</code>改为</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">app.run(host=<span class="string">&#x27;192.168.1.2&#x27;</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure>
<p>端口号任意填不冲突就行，默认是<code>5000</code>。</p></li>
<li><p>如上文，运行。</p></li>
</ol>
<p>你可以在本机，或在局域网内任意设备的浏览器上访问<code>http://192.168.1.2:5000</code>。</p>
<h2 id="ngrok内网穿透">Ngrok——内网穿透</h2>
<p>我们搭建了“服务器”。但是没有公网 ip，无法接受来自局域网外的访问。</p>
<p>Ngrok
是一个用于创建安全隧道的工具，它可以将本地的服务器或应用程序暴露到公共互联网。</p>
<h3 id="安装-ngrok">安装 Ngrok</h3>
<ol type="1">
<li><p>查看 Termux 模拟 Linux 环境的 CPU 架构（跟随你手机的架构）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">uname</span> -m</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">getprop ro.product.cpu.abi</span><br></pre></td></tr></table></figure></li>
<li><p><a href="https://ngrok.com/download">下载</a>对应架构的 Ngrok
到手机。（最新版 Ngrok
没有开源，使用<code>pkg install ngrok</code>找不到包，因此在官网上下载）</p></li>
<li><p>解压文件，并移动到<code>~/../usr/bin</code>目录。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar xvzf ~/storage/shared/[你下载的.tgz文件路径] -C ~/../usr/bin</span><br></pre></td></tr></table></figure>
<p>这里用家目录的上一级<code>~/../</code>表示 linux
环境根目录，也可以使用<code>$PREFIX</code>。如果直接使用<code>/</code>，Termux
会认为是手机的根目录。</p></li>
</ol>
<h3 id="在开始之前解决-dns-问题">在开始之前，解决 DNS 问题</h3>
<p>官网上的包，没有适配<a href="#fn1" class="footnote-ref" id="fnref1"
role="doc-noteref"><sup>1</sup></a>
Termux。因此在我首次连接时，发生了连接错误。</p>
<p>在运行的同时打印日志：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ngrok http 5000 --log-level debug --<span class="built_in">log</span> stdout</span><br></pre></td></tr></table></figure>
<p>大部分内容略。关键在这里：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">read udp [::1]:43938-&gt;[::1]:53: read: connection refused</span><br></pre></td></tr></table></figure>
<p>在本地主机<code>[::1]</code>的<code>43938</code>端口和<code>53</code>端口之间，建立连接失败。<code>53</code>是
DNS 服务的端口，说明 DNS 查询出了问题。</p>
<p>Ngrok 是用 Go 语言写的，</p>
<blockquote>
<p>根据 src/net/dnsclient_unix.go，如果 /etc/resolv.conf 不存在，则选择
localhost:53 作为名称服务器。<a href="#fn2" class="footnote-ref"
id="fnref2" role="doc-noteref"><sup>2</sup></a></p>
</blockquote>
<p>它想找<code>/etc/resolv.conf</code>查询
DNS，而在手机里找不到这个文件。进而向<code>localhost:53</code>发送 udp
数据包。手机的<code>53</code>端口没有开放，开启<code>1024</code>以下的端口需要
root 权限。</p>
<p>在 Termux
里有<code>resolv.conf</code>文件，在<code>$PREFIX/usr/etc/resolv.conf</code>。但是官方的包没有改路径，源码也没有开放。</p>
<p>我尝试修改 Ngrok 配置文件里的
<code>dns_resolver_ips</code>，但是没有用。</p>
<h4 id="解决方法">解决方法：</h4>
<p>把 Termux
的<code>resolv.conf</code>文件复制到手机<code>/etc/</code>目录下就行了。</p>
<ul>
<li>这需要 root 权限。</li>
<li><strong>这会修改<code>system</code>分区</strong>。如果手机升级，卸载面具前还要刷回原来的<code>system</code>；如果空间不够，可以删一些没用的系统预装软件数据，通常在<code>/system/app/</code>。</li>
<li>如果没有 root 权限，可以尝试<a href="#另外">在 Termux 上安装 Linux
发行版</a>。</li>
</ul>
<h3 id="使用-ngrok">使用 Ngrok</h3>
<p>先<a href="https://dashboard.ngrok.com/signup">注册账号</a>，然后<a
href="https://dashboard.ngrok.com">进入仪表板</a>。</p>
<h4 id="添加-authtoken-到配置文件">添加 Authtoken 到配置文件</h4>
<p>在本地服务器连接 Ngrok 服务器时，Authtoken 用于认证你的身份。</p>
<p>点击 <em>Your Authtoken</em>，你会看到你的 Authtoken。使用命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ngrok config add-authtoken [你的authtoken]</span><br></pre></td></tr></table></figure>
<p>这会向配置文件<code>~/.config/ngrok/ngrok.yml</code>里写入：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">authtoken:</span> [<span class="string">你的authtoken</span>]</span><br></pre></td></tr></table></figure>
<h4 id="添加-domain-和-edge">添加 Domain 和 Edge</h4>
<p>点击 <em>Domains</em>。Ngrok
应该会提醒你领取一个域名，像<code>[几个英文单词].ngrok-free.app</code>。这是在前端发送请求时的目标域名。</p>
<p>点击 <em>Edges</em>。点击 <em>+ New Edge</em> 按钮创建一个 Edge。</p>
<p>点击新建的
Edge，找到<code>edge=edghts_[一串字符]</code>，复制到手机备用。</p>
<h4 id="允许跨域请求">允许跨域请求</h4>
<p>Flask
可以根据用户的请求，动态生成前端代码。而如果前端代码单独放在另一台服务器上，比如
Github Pages——</p>
<p>从<code>github.io</code>向<code>ngrok-free.app</code>发送 HTTP
请求。由于两者不在同一域名下，浏览器为了用户安全，会拦截跨源请求。</p>
<p>解决方法是，在后端的响应里加上<a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS">跨域资源共享（CORS）</a>头。</p>
<p>flask-cors 库可以给 Flask 的响应自动加上 CORS 头。<a
href="https://flask-cors.readthedocs.io/">flask-cors 文档</a></p>
<p>安装 flask-cors：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install flask-cors</span><br></pre></td></tr></table></figure>
<p>然后在<code>app.py</code>里加两行：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, make_response</span><br><span class="line"><span class="keyword">from</span> flask_cors <span class="keyword">import</span> CORS    <span class="comment">#&lt;----------</span></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">CORS(app)                      <span class="comment">#&lt;----------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="comment">#处理根路由的视图函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line"></span><br><span class="line">    <span class="comment">#创建 html 字符串</span></span><br><span class="line">    html_content = <span class="string">&quot;&lt;h1&gt;Hello, Flask!&lt;/h1&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#创建响应对象</span></span><br><span class="line">    response = make_response(html_content)</span><br><span class="line">    response.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;text/html&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#返回响应</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>
<h4 id="运行-ngrok">运行 Ngrok</h4>
<p>找到前面复制到手机上的<code>edge=edghts_[一串字符]</code>。</p>
<p>先启动 Flask 到后台，再运行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ngrok tunnel --label edge=[一串字符] http://localhost:5000</span><br></pre></td></tr></table></figure>
<h4 id="测试发送-http-请求">测试发送 HTTP 请求</h4>
<ul>
<li><p>用 <a
href="https://www.ruanyifeng.com/blog/2019/09/curl-reference.html">curl</a>
发送<code>GET</code>请求</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -v [你的Ngrok域名]</span><br></pre></td></tr></table></figure></li>
<li><p>在本地<code>file://</code>协议或其他域名下，用 <a
href="https://www.axios-http.cn/">axios</a> 发送跨域请求</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      axios</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">get</span>(<span class="string">&quot;https://你的Ngrok域名&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="后续处理">后续处理</h2>
<h3 id="保活">保活</h3>
<p>如果你想让服务器一直运行，在保持手机开机之外，还要：</p>
<ul>
<li><p>始终把 Termux 挂在后台，锁定，并忽略电池优化</p></li>
<li><p>使用<code>nohup</code>命令让程序不挂起（往下看）↓</p></li>
</ul>
<h3 id="启动服务器">启动服务器</h3>
<p>先启动 Termux，再依次启动 Flask 和 Ngrok。</p>
<p>可以向<code>$PREFIX/usr/etc/profile</code>文件中添加以下几行命令， 让
Termux 启动的同时自执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/flask-app</span><br><span class="line"><span class="built_in">nohup</span> python app.py &amp;</span><br><span class="line"><span class="built_in">nohup</span> ngrok tunnel --label edge=[一串字符] http://localhost:5000 &amp;</span><br></pre></td></tr></table></figure>
<h3 id="关闭服务器">关闭服务器</h3>
<p>使用<code>jobs</code>查看进程列表，<code>kill %[进程序号]</code>杀死进程。</p>
<p>当然，你也可以直接杀掉 Termux 的后台。</p>
<aside id="footnotes" class="footnotes footnotes-end-of-document"
role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p><a
href="https://wiki.termux.com/wiki/Differences_from_Linux">Termux 与
Linux 的区别：https://wiki.termux.com/wiki/Differences_from_Linux</a><a
href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p><a href="https://stackoverflow.com/a/49315513">woohaha
的回答：https://stackoverflow.com/a/49315513</a><a href="#fnref2"
class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</aside>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>用 Magisk 获取 Android 手机的 root 权限</title>
    <url>/blog//AO/magisk-root/</url>
    <content><![CDATA[<p>你需要：</p>
<ul>
<li>一台系统为 Android 6.0 以上的手机</li>
<li>一台能够正常使用 <a
href="https://developer.android.google.cn/studio/releases/platform-tools?hl=zh-cn">Android
SDK Platform-Tools</a> 的电脑</li>
</ul>
<span id="more"></span>
<p>另外，如果你手机的 Android kernel 版本在 5.10 以上，你也可以使用<a
href="https://kernelsu.org/zh_CN/">KernelSU</a>——这不属于此教程的范围。</p>
<h2 id="背景知识">背景知识</h2>
<h3 id="linux-与-android">Linux 与 Android</h3>
<p>Linux 是一种操作系统内核，由 Linus Torvalds 开发。<strong>基于 Linux
内核</strong>，Android Inc.公司开发出了 Android 操作系统。</p>
<p>2005 年，Google 收购 Android Inc.。2007 年，Google 将 Android
的源代码公开，并创建了<a
href="https://source.android.google.cn/?hl=zh-cn">AOSP</a>（Android Open
Source Project）项目。</p>
<p>许多手机厂商的定制系统，如 MIUI、Flyme、HarmonyOS 等都是<strong>基于
AOSP 源码</strong>开发的。和 AOSP 对标的<a
href="https://gitee.com/openharmony">OpenHarmony</a>也有用到 Linux
内核。所以，如果你的手机不是苹果，它里面大概率就会有一个修改过的 Linux
内核。</p>
<h3 id="linux-与-android-中的用户权限">Linux 与 Android
中的用户权限</h3>
<p>Linux
操作系统是多用户操作系统，用户<code>root</code>拥有最高权限——对系统的完全控制权。拥有
root 权限的用户可以把其他用户添加到 root 用户组。在 root
用户组里，每个用户都有 root 权限。</p>
<p>在 Android
操作系统中，<strong>每个应用（APP）都是一个独立的用户</strong>。如果没有<code>root</code>用户把
APP 添加到 root 用户组，就没有 APP 能够获得 root 权限。</p>
<p>而在正常情况下，你在手机上见到的所有画面都是 APP
的进程（比如系统界面是<code>com.android.systemui</code>）。这时想要获得
root 权限，就需要修改更底层的东西。</p>
<h3 id="bootloader-锁">Bootloader 锁</h3>
<p>Bootloader，即启动引导加载程序。它负责在计算机启动时，引导操作系统加载。</p>
<p>在 bootloader
执行的过程中，如果签名验证未通过，说明系统底层文件被修改。这时
bootloader 会停止执行，<strong>无法进入系统</strong>。这被称为
bootloader（BL）锁。</p>
<h3 id="magisk">Magisk</h3>
<p>The <strong>Magic Mask</strong> for Android，是一套用于定制 Android
的开源软件。它可以为应用程序提供 root
访问权限。后文简称<strong>面具</strong>。</p>
<p>面具获取 root 权限的原理是通过修改 boot 分区，代理 linux
内核的第一个进程 init。<a href="#fn1" class="footnote-ref" id="fnref1"
role="doc-noteref"><sup>1</sup></a></p>
<p>面具修改了系统分区。因此，使用面具的前提是解除 BL 锁。</p>
<h2 id="准备工作">准备工作</h2>
<h3 id="解除-bl-锁">解除 BL 锁</h3>
<blockquote>
<p>解锁 BootLoader 实际上就是让 BootLoader
启动链上某些阶段的签名验证不生效。<a href="#fn2" class="footnote-ref"
id="fnref2" role="doc-noteref"><sup>2</sup></a></p>
</blockquote>
<p>你需要在你手机厂商的网站上申请，然后用他们提供的工具解锁。但不是所有厂商都支持。</p>
<p>注意：解锁 BL
后会<strong>清除所有用户数据，恢复出厂设置</strong>。请提前做好你重要文件的备份。</p>
<h3 id="提取-boot.img">提取 boot.img</h3>
<p>在网上搜索，找到你手机的安装包。</p>
<p>通常是一个<code>.zip</code>或.<code>tgz</code>格式的压缩包。确保手机型号一致、操作系统版本一致。</p>
<p>解压后找到<code>boot.img</code>或者<code>init_boot.img（如果有）</code>。复制两份，分别保存到手机和电脑，备用。</p>
<ul>
<li>如果你找不到<code>boot.img</code>，而找到了<code>payload.bin</code>：参考<a
href="https://magiskcn.com/payload-dumper-go-boot">这篇教程</a>。或者使用<a
href="https://mt2.cn/">MT 管理器</a>提取。</li>
<li>如果你的手机<em><strong>已经 root
了</strong></em>：可以在<code>adb shell</code>下使用<code>ls -l /dev/block/by-name/</code>查看分区表。找到
boot
分区，比如<code>/dev/block/sdc41</code>。使用<code>dd if=/dev/block/sdc41 of=/sdcard/boot.img</code>提取
boot 分区。</li>
</ul>
<h3 id="通过-usb-调试手机">通过 USB 调试手机</h3>
<p>在手机设置里找到系统版本（比如 MIUI，是在“全部参数”里的“MIUI
版本”）。连续点击，直到手机出现提示框“您现在处于开发者模式”。</p>
<p>在手机设置里找到开发者选项，进入。找到<strong>USB
调试</strong>选项并开启。</p>
<p>下载<a
href="https://developer.android.google.cn/studio/releases/platform-tools?hl=zh-cn">Android
SDK
Platform-Tools</a>，解压到你喜欢的目录。比如<code>D:\platform-tools</code>。你会看到目录里有<code>adb.exe</code>和<code>fastboot.exe</code>等一些文件。</p>
<p>打开命令行（Windows 下 win+R 输入 cmd，回车），你会看到：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">C:\Users\你的用户名\&gt;</span><br></pre></td></tr></table></figure>
<p>这是你当前所在的目录。当你要执行一个<code>.exe</code>文件时，系统先从当前目录里寻找。如果找不到，就从环境变量里寻找。再找不到就打印错误信息。</p>
<p>你刚才解压出来的<code>.exe</code>文件只能在它们所在的目录下运行。如果不想切换目录，想让它们在任意目录下都可以运行，需要把它们<strong>所在的目录</strong>添加到<strong>环境变量
Path</strong>。</p>
<p>Windows 10
下，<code>Win + I</code>打开设置。系统-&gt;关于-&gt;高级系统设置-&gt;环境变量，双击系统变量<code>Path</code>，新建，把<code>D:\platform-tools</code>复制到列表，确定确定确定。这样环境变量就设置好了。</p>
<p>用数据线连接手机和电脑。你可以尝试在<code>cmd</code>里使用命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure>
<p>这时手机会弹出授权窗口。点击确定，你会在电脑上看到：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">List of devices attached</span><br><span class="line">你手机的序列号        device</span><br></pre></td></tr></table></figure>
<p>说明 adb 连接成功。</p>
<h2 id="戴上面具">戴上面具</h2>
<p><a
href="https://github.com/topjohnwu/Magisk/releases">下载面具</a>并安装打开，你将看到：</p>
<p><img src="/blog/images/magisk.webp"></p>
<p>如果 Ramdisk
为<strong>否</strong>，或者你的手机品牌是<strong>华为</strong>或<strong>三星</strong>：参考
<a
href="https://jesse205.github.io/MagiskChineseDocument/install.html">Magisk
中文文档</a>。</p>
<p>点击“安装”按钮。如果你手机的安装包中有<code>vbmeta.img</code>，选中“修补
boot 映像中的 vbmeta”选项。否则不选中。</p>
<p>在方式中选择“选择并修补一个文件”。然后选择你提取出来的<code>boot.img</code>或<code>init_boot.img</code>。点击“安装”。</p>
<p>面具会把修补后的文件<code>magisk_patched-[版本号_随机字符].img</code>存放到
SD 卡的<code>Download</code>目录下。</p>
<p>把修补后的文件复制到电脑：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb pull /sdcard/Download/magisk_patched-[版本号_随机字符].img 电脑上的一个文件夹路径</span><br></pre></td></tr></table></figure>
<p>重启手机到<code>fastboot</code>模式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb reboot bootloader</span><br></pre></td></tr></table></figure>
<p>刷写新的<code>boot</code>分区：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fastboot flash boot（或者init_boot） 电脑上的一个文件夹路径\magisk_patched-[版本号_随机字符].img</span><br></pre></td></tr></table></figure>
<p>重启手机：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fastboot reboot</span><br></pre></td></tr></table></figure>
<p>打开面具。如果看到了 Magisk-&gt;当前的版本号，说明成功。</p>
<ul>
<li>如果你的手机打不开了：说明面具不适合你的手机，或者你有地方做错了。
你需要长按【电源】键重启，然后马上同时按住【电源】键和【音量+】键（也有手机是【电源】键和【音量-】键）。这会把手机重启到<code>fastboot</code>模式。
然后使用以下命令恢复 boot 分区： <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fastboot flash boot（或者init_boot） 电脑上的一个文件夹路径\你修补前的boot.img</span><br></pre></td></tr></table></figure></li>
<li>在安装面具后：需要禁用系统自动更新。<a
href="#后续处理更新系统时">后续处理——更新系统时</a></li>
</ul>
<h2 id="隐藏面具">隐藏面具</h2>
<p>为了用户安全，一些银行类的 app 在检测到 root
后会禁止用户使用。需要对这一类 app 隐藏 root。</p>
<h3 id="使用-shamiko-隐藏-root">使用 Shamiko 隐藏 root</h3>
<p>Shamiko 是一个面具模块，用于隐藏 root。</p>
<ul>
<li>如果使用的是<a
href="https://github.com/magojohnji/Magisk-delta/blob/main/intro.md">Magisk
Delta</a>，则不能安装此模块。可用其内置的 MagiskHide。</li>
</ul>
<p>在面具设置里：</p>
<ul>
<li><p>找到“Zygisk”，<strong>开启</strong>。</p></li>
<li><p>找到“遵守排除列表”，<strong>关闭</strong>。</p></li>
<li><p>找到“配置排除列表”，选择要对其隐藏 root
的应用。点击，在展开的列表里全部打上勾，直到上方进度条满。</p></li>
</ul>
<p><a href="https://github.com/LSPosed/LSPosed.github.io/releases/">下载
Shamiko</a>
。打开面具-&gt;模块-&gt;从本地安装-&gt;选择下载的<code>shamiko-[版本号]-release.zip</code>-&gt;确定-&gt;重启手机。</p>
<p>如果看到模块-&gt;Shamiko 的简介里露出了 😋，说明 Shamiko
正常运行。</p>
<h3 id="使用随机包名隐藏面具应用">使用随机包名隐藏面具应用</h3>
<p>面具设置-&gt;隐藏 Magisk 应用</p>
<h2 id="后续处理更新系统时">后续处理——更新系统时</h2>
<p>系统更新前：先打开面具，选择“卸载
Magisk”-&gt;<strong>还原原厂映像</strong>。然后更新系统。</p>
<p>系统更新后：仍然使用提取 boot-&gt;修补 boot-&gt;刷入 boot
的方式安装面具。</p>
<ul>
<li>如果希望在更新系统时保留面具：参考<a
href="https://jesse205.github.io/MagiskChineseDocument/ota.html">这篇文档</a>。</li>
</ul>
<aside id="footnotes" class="footnotes footnotes-end-of-document"
role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p><a
href="https://mp.weixin.qq.com/s/eF9izvazeSZ1bVxOcxamQg">何为
root？维术：https://mp.weixin.qq.com/s/eF9izvazeSZ1bVxOcxamQg</a><a
href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p><a
href="https://mp.weixin.qq.com/s/-9VKyraHq5Qt2PTzqVqZOg">当我们谈论解锁
BootLoader
时，我们在谈论什么？维术：https://mp.weixin.qq.com/s/-9VKyraHq5Qt2PTzqVqZOg</a><a
href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</aside>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>HD00 - 搭建 Hadoop 环境</title>
    <url>/blog//HD/00/</url>
    <content><![CDATA[<p>Hadoop 完全分布式模式环境配置：</p>
<table>
<colgroup>
<col style="width: 44%" />
<col style="width: 55%" />
</colgroup>
<thead>
<tr class="header">
<th>用</th>
<th>名</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>物理机系统</strong></td>
<td>Windows 10</td>
</tr>
<tr class="even">
<td><strong>虚拟机容器</strong></td>
<td>VMware Workstation 17.0.2
Player（免费的，但是不支持克隆虚拟机，需要手动装另外两台）</td>
</tr>
<tr class="odd">
<td><strong>虚拟机系统</strong></td>
<td>Ubuntu 22.04.3 server</td>
</tr>
<tr class="even">
<td><strong>主角</strong></td>
<td>Hadoop 3.3.6</td>
</tr>
<tr class="odd">
<td><strong>SSH
连接虚拟机用的，不装直接操作也可以，装了比较方便可以复制粘贴</strong></td>
<td>Xshell 7 （可用 VSCode 里调用系统的 cmd 代替，也可以复制粘贴）</td>
</tr>
<tr class="even">
<td><strong>虚拟机与物理机互传文件用的</strong></td>
<td>Xftp 7</td>
</tr>
</tbody>
</table>
<p>装了三台机器，名：master、worker1、worker2。（<a
href="/blog/HD/04">后来</a>又改成 ubuntu101、ubuntu102、ubuntu103
了）</p>
<span id="more"></span>
<h2 id="在-windows-中安装-linux-虚拟机">在 Windows 中安装 Linux
虚拟机</h2>
<p><a href="/blog/UC/wl">教程</a></p>
<ul>
<li>其中，【安装 Ubuntu】的第 4 步，我选的还是默认的
DHCP，装好之后再改成静态 IP。</li>
<li>第 11 步，要安装 OpenSSH server。</li>
<li>不用设置共享文件夹，因为我们有 Xftp。</li>
</ul>
<h2 id="安装-xshell-和-xftp">安装 Xshell 和 Xftp</h2>
<p><a
href="https://www.xshell.com/zh/free-for-home-school/">下载地址</a></p>
<h2 id="用-xftp-连接虚拟机">用 Xftp 连接虚拟机</h2>
<p>查看虚拟机的 IP 地址：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install net-tools</span><br><span class="line">ifconfig</span><br></pre></td></tr></table></figure>
<p>然后用 Xftp 连接。</p>
<h2 id="下载-hadoop">下载 Hadoop</h2>
<p><a
href="https://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/">下载页面（清华源）</a></p>
<p>我这里下载的是<code>hadoop-3.3.6.tar.gz</code>。</p>
<p>用 Xftp 把压缩包传到虚拟机的家目录下，然后：</p>
<h2
id="安装软件及配置环境变量写脚本避免重复工作">安装软件及配置环境变量，写脚本避免重复工作</h2>
<p>把脚本也传到家目录，然后执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">bash ha.sh</span><br></pre></td></tr></table></figure>
<p>其中，安装 OpenJDK 是按照 <a
href="https://cwiki.apache.org/confluence/display/HADOOP/Hadoop+Java+Versions">https://cwiki.apache.org/confluence/display/HADOOP/Hadoop+Java+Versions</a>
里的说明，指向 <a
href="https://github.com/apache/hadoop/blob/rel/release-3.2.1/dev-support/docker/Dockerfile#L92">https://github.com/apache/hadoop/blob/rel/release-3.2.1/dev-support/docker/Dockerfile#L92</a>
里的命令。</p>
<p><code>ha.sh</code>：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 JDK</span></span><br><span class="line">sudo apt-get update;</span><br><span class="line">sudo apt-get install openjdk-8-jdk libbcprov-java;</span><br><span class="line">sudo apt-get clean;</span><br><span class="line"><span class="comment"># 存放 Hadoop 压缩包的位置</span></span><br><span class="line"><span class="built_in">cd</span>;</span><br><span class="line"><span class="comment"># 解压，删除（这两句我执行的时候没执行上，重启后手动执行）</span></span><br><span class="line">sudo tar -zxvf hadoop-3.3.6.tar.gz -C /usr/local;</span><br><span class="line">sudo <span class="built_in">rm</span> hadoop-3.3.6.tar.gz;</span><br><span class="line"><span class="comment"># 写环境变量</span></span><br><span class="line"><span class="comment"># env 查看所有环境变量</span></span><br><span class="line"><span class="comment"># echo $NAME 查看某个</span></span><br><span class="line">JAVA_HOME=<span class="string">&quot;/lib/jvm/java-1.8.0-openjdk-amd64&quot;</span>;</span><br><span class="line">HADOOP_HOME=<span class="string">&quot;/usr/local/hadoop-3.3.6&quot;</span>;</span><br><span class="line">text=<span class="string">&quot;export JAVA_HOME=<span class="variable">$JAVA_HOME</span></span></span><br><span class="line"><span class="string">export HADOOP_HOME=<span class="variable">$HADOOP_HOME</span></span></span><br><span class="line"><span class="string">export PATH=<span class="variable">$PATH</span>:<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/sbin:<span class="variable">$JAVA_HOME</span>/bin</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$text</span>&quot;</span> &gt;&gt; .bashrc;</span><br><span class="line"><span class="comment"># 应用，重启</span></span><br><span class="line"><span class="built_in">source</span> .bashrc;</span><br><span class="line">reboot;</span><br></pre></td></tr></table></figure>
<h2 id="改虚拟机内的文件">改虚拟机内的文件</h2>
<p><a href="https://www.runoob.com/linux/linux-vim.html">Vim
教程</a></p>
<p>不用
Vim，传到真机上修改也可，这样还方便传到其他机器上。注意行尾序列是<strong>LF</strong>，小心操作不当变成
CRLF。</p>
<p>（还可以写一个集群分发脚本，不过暂时没必要）</p>
<p>（<a href="/blog/HD/01">HD01 - 编写 Linux 集群分发脚本</a>）</p>
<p>把改好的文件存真机上一份，直接用 Xftp
传（如果传输失败，就修改文件权限）。</p>
<p>注意传之前把静态 IP 改了，不同机器设成不同静态 IP。</p>
<h3
id="改00-installer-config.yaml改成静态-ip">改<code>00-installer-config.yaml</code>，改成静态
IP</h3>
<p>编辑<code>/etc/netplan</code>下的<code>.yaml</code>文件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/netplan</span><br><span class="line">ll</span><br><span class="line">sudo vi 00-installer-config.yaml</span><br></pre></td></tr></table></figure>
<p>原来的文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This is the network config written by &#x27;subiquity&#x27;</span></span><br><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">ethernets:</span></span><br><span class="line">    <span class="attr">ens33:</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>修改后的文件：</p>
<p>参考 <a
href="https://netplan.readthedocs.io/en/stable/netplan-tutorial/">https://netplan.readthedocs.io/en/stable/netplan-tutorial/</a></p>
<p>选择<code>192.168.78</code>的依据是：</p>
<ul>
<li>在真机使用<code>ipconfig</code>命令得到的【VMnet8】的 IPv4
地址<code>192.168.78.1</code></li>
<li>查看 <code>C:\ProgramData\VMware\vmnetnat.conf</code> 里的 NAT
网关地址<code>192.168.78.2</code></li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">ethernets:</span></span><br><span class="line">    <span class="attr">ens33:</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">dhcp6:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">addresses:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.78</span><span class="number">.101</span><span class="string">/24</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">to:</span> <span class="string">default</span></span><br><span class="line">          <span class="attr">via:</span> <span class="number">192.168</span><span class="number">.78</span><span class="number">.2</span></span><br><span class="line">      <span class="attr">nameservers:</span></span><br><span class="line">        <span class="attr">addresses:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.78</span><span class="number">.2</span></span><br></pre></td></tr></table></figure>
<p>每台机器的<code>ens33.addresses</code>要设置成不同的。</p>
<p>测试：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo netplan try</span><br></pre></td></tr></table></figure>
<p>回车以应用。</p>
<h3 id="改-hosts">改 <code>hosts</code></h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/hosts</span><br></pre></td></tr></table></figure>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">192.168.78.101 master</span><br><span class="line">192.168.78.102 worker1</span><br><span class="line">192.168.78.103 worker2</span><br></pre></td></tr></table></figure>
<p>注意，如果有：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">127.0.1.1 [主机名]</span><br></pre></td></tr></table></figure>
<p>要把这一行删了，否则绑定不到<code>192.168.78.x</code>。暂时不知道有没有不良影响。</p>
<h3
id="改hadoop_homeetchadoophadoop-env.sh">改<code>$HADOOP_HOME/etc/hadoop/hadoop-env.sh</code></h3>
<ul>
<li><code>JAVA_HOME</code>：JAVA 主目录</li>
<li><code>HDFS_NAMENODE_USER</code>：启动集群 NameNode 服务的用户</li>
<li><code>HDFS_DATANODE_USER</code>：启动集群 DataNode 服务的用户</li>
<li><code>HDFS_SECONDARYNAMENODE_USER</code>：启动集群 SecondaryNamenode
服务的用户</li>
<li><code>YARN_RESOURCEMANAGER_USER</code>：启动集群 ResourceManager
服务的用户</li>
<li><code>YARN_NODEMANAGER_USER</code>：启动集群 NodeManager
服务的用户</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/lib/jvm/java-1.8.0-openjdk-amd64</span><br><span class="line"><span class="built_in">export</span> HDFS_NAMENODE_USER=rc</span><br><span class="line"><span class="built_in">export</span> HDFS_DATANODE_USER=rc</span><br><span class="line"><span class="built_in">export</span> HDFS_SECONDARYNAMENODE_USER=rc</span><br><span class="line"><span class="built_in">export</span> YARN_RESOURCEMANAGER_USER=rc</span><br><span class="line"><span class="built_in">export</span> YARN_NODEMANAGER_USER=rc</span><br></pre></td></tr></table></figure>
<p>rc 是我每台机器的用户名。</p>
<p><strong>下面的文件都是在<code>$HADOOP_HOME/etc/hadoop</code>目录里。</strong></p>
<h3 id="改core-site.xml">改<code>core-site.xml</code></h3>
<ul>
<li><code>fs.defaultFS</code>：NameNode 的地址</li>
<li><code>haoodp.tmp.dir</code>：HDFS 数据保存的临时目录</li>
<li><code>hadoop.http.staticuser.user</code>：HDFS
网页登录使用的静态用户</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master:9820<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/hadoop-3.3.6/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.http.staticuser.user<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>rc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="改hdfs-site.xml">改<code>hdfs-site.xml</code></h3>
<ul>
<li><code>dfs.namenode.http-address</code>：Web 方式访问 NameNode
的主机和端口号</li>
<li><code>dfs.namenode.secondary.http-address</code>：SecondaryNamenode
部署的主机</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:9870<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>worker2:9868<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="改mapred-site.xml">改<code>mapred-site.xml</code></h3>
<ul>
<li><code>mapreduce.framework.name</code>：配置为 yarn 进行 MapReduce
作业的调度</li>
<li><code>mapreduce.jobhistory.address</code>：历史服务器端地址</li>
<li><code>mapreduce.jobhistory.webapp.address</code>：历史服务器 web
地址</li>
<li>下面三个环境变量是 Hadoop 的目录。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>worker1:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>worker1:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.app.mapreduce.am.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=/usr/local/hadoop-3.3.6/<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.map.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=/usr/local/hadoop-3.3.6/<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.reduce.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=/usr/local/hadoop-3.3.6/<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="改yarn-site.xml">改<code>yarn-site.xml</code></h3>
<ul>
<li><code>yarn.resourcemanager.hostname</code>： ResourceManager
的主机名</li>
<li><code>yarn.nodemanager.aux-services</code>：NodeManager
获取数据的方式</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>worker1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 环境变量的继承 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.env-whitelist<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HAD</span><br><span class="line">      OOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,</span><br><span class="line">      HADOOP_MAPRED_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 开启日志聚集功能 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 设置日志聚集服务器地址 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log.server.url<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>http://worker1:19888/jobhistory/logs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 设置日志保留时间 7 天 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>604800<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="改workers">改<code>workers</code></h3>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">worker1</span><br><span class="line">worker2</span><br></pre></td></tr></table></figure>
<h2
id="再建两个虚拟机-worker1-和-worker2配置好之后互相复制-ssh-key">再建两个虚拟机
worker1 和 worker2，配置好之后，互相复制 SSH KEY</h2>
<p>三台机器上都执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>
<p>三台机器上都执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-copy-id master</span><br><span class="line">ssh-copy-id worker1</span><br><span class="line">ssh-copy-id worker2</span><br></pre></td></tr></table></figure>
<h2 id="格式化-hdfs">格式化 HDFS</h2>
<p>只用在 master 执行一次：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure>
<p>如果以后遇到问题，需要重新格式化时，需停止进程，然后删除每台机器的
<code>$HADOOP_HOME/data/</code> 和 <code>$HADOOP_HOME/logs/</code>。</p>
<h2 id="启动-hadoop">启动 Hadoop</h2>
<p>在 master 执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">start-all.sh</span><br></pre></td></tr></table></figure>
<h2 id="启动历史服务器">启动历史服务器</h2>
<p>在 worker1 执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mapred --daemon start historyserver</span><br></pre></td></tr></table></figure>
<h2 id="检查环境">检查环境</h2>
<h3 id="查看相关进程">查看相关进程</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">jps</span><br></pre></td></tr></table></figure>
<p>master 应该有：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">[PID] NameNode</span><br><span class="line">[PID] Jps</span><br></pre></td></tr></table></figure>
<p>worker1 应该有：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">[PID] Jps</span><br><span class="line">[PID] JobHistoryServer</span><br><span class="line">[PID] DataNode</span><br><span class="line">[PID] NodeManager</span><br></pre></td></tr></table></figure>
<p>worker2 应该有：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">[PID] NodeManager</span><br><span class="line">[PID] SecondaryNameNode</span><br><span class="line">[PID] Jps</span><br><span class="line">[PID] DataNode</span><br></pre></td></tr></table></figure>
<h3 id="查看进程的-web-端口">查看进程的 Web 端口</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">netstat -tunlp</span><br></pre></td></tr></table></figure>
<ul>
<li>-t：显示 TCP 连接信息</li>
<li>-u：显示 UDP 连接信息</li>
<li>-n：以数字形式显示 IP 地址和端口号</li>
<li>-l：仅显示监听状态的连接</li>
<li>-p：显示与连接关联的进程信息</li>
</ul>
<h2
id="改真机的hosts方便用浏览器访问">改真机的<code>hosts</code>，方便用浏览器访问</h2>
<p><code>C:\Windows\System32\drivers\etc\hosts</code>：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">192.168.78.101 master</span><br><span class="line">192.168.78.102 worker1</span><br><span class="line">192.168.78.103 worker2</span><br></pre></td></tr></table></figure>
<h2 id="用浏览器访问-namenode">用浏览器访问 Namenode</h2>
<p>master:9870</p>
<h2 id="测试进行-wordcount">测试进行 wordcount</h2>
<h3 id="创建文件夹在-ubuntu">创建文件夹在 Ubuntu</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$HADOOP_HOME</span></span><br><span class="line"><span class="built_in">mkdir</span> wcinput</span><br></pre></td></tr></table></figure>
<h3 id="创建文本文档在-ubuntu">创建文本文档在 Ubuntu</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> wcinput</span><br><span class="line">vi word.txt</span><br></pre></td></tr></table></figure>
<p><code>word.txt</code>：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">ss ss</span><br><span class="line">cls cls</span><br><span class="line">aaabbbccc</span><br><span class="line">rf rf rfr</span><br></pre></td></tr></table></figure>
<h3 id="创建文件夹到-hdfs">创建文件夹到 HDFS</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hadoop fs -<span class="built_in">mkdir</span> /wcinput</span><br></pre></td></tr></table></figure>
<h3 id="上传文件到-hdfs">上传文件到 HDFS</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hadoop fs -put word.txt /wcinput</span><br></pre></td></tr></table></figure>
<h3 id="测试进行-wordcount-1">测试进行 wordcount</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$HADOOP_HOME</span></span><br><span class="line">hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.3.6.jar wordcount /wcinput /wcoutput</span><br></pre></td></tr></table></figure>
<p>如果成功，HDFS
的<code>/wcoutput</code>目录里会有一个<code>_SUCCESS</code>文件和输出文件，可以通过浏览器查看：</p>
<p>master:9870 -&gt; 菜单 -&gt; Utilities -&gt; Browse the file system
-&gt; <code>/wcoutput/part-r-00000</code>：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">aaabbbccc	1</span><br><span class="line">cls	2</span><br><span class="line">rf	2</span><br><span class="line">rfr	1</span><br><span class="line">ss	2</span><br></pre></td></tr></table></figure>
<h2 id="用浏览器访问-jobhistory">用浏览器访问 JobHistory</h2>
<p>worker1:19888</p>
<h2 id="停止-hadoop">停止 Hadoop</h2>
<p>在 master 执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">stop-all.sh</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
  </entry>
  <entry>
    <title>HD01 - 编写 Linux 集群分发脚本</title>
    <url>/blog//HD/01/</url>
    <content><![CDATA[<p>改配置文件后，用 Xftp
一个一个传还是很麻烦的，于是写一个脚本用来同步文件。</p>
<span id="more"></span>
<h2 id="rsync">rsync</h2>
<p>远程同步文件用的。<a
href="https://www.ruanyifeng.com/blog/2020/08/rsync.html">rsync
用法教程</a></p>
<p>Ubuntu 默认已经安装了
rsync。直接在根目录建一个文件夹<code>test</code>，里面再套几个文件夹和文件，然后执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo rsync -av /test worker1:/</span><br></pre></td></tr></table></figure>
<p>把<code>/test</code>文件夹整个复制到 worker1 的根目录。</p>
<p>显示权限拒绝，说明我还没有配置好 SSH。<a
href="https://wangdoc.com/ssh/key#ssh-copy-id-%E5%91%BD%E4%BB%A4%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%85%AC%E9%92%A5">SSH
教程</a></p>
<h2 id="改-sshd-配置文件">改 SSHD 配置文件</h2>
<p>三台机器上都修改：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>
<p>在文件里加上 <code>PermitRootLogin yes</code>，然后重启服务：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart sshd</span><br></pre></td></tr></table></figure>
<h2 id="改三台机器的-root-用户密码">改三台机器的 root 用户密码</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure>
<h2 id="复制-master-的公钥给其他机器的-root-用户">复制 master
的公钥给其他机器的 root 用户</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub root@worker1</span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub root@worker2</span><br></pre></td></tr></table></figure>
<p>然后再尝试用 rsync 同步，成功了。</p>
<h2 id="写usrbinxsync.sh">写<code>/usr/bin/xsync.sh</code></h2>
<p>复制自老师给的配置文档，把主机名改了：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#1.-------判断参数个数</span></span><br><span class="line"><span class="comment">#判断参数个数是否小于 1,如果小于 1 表示没有向脚本传递参数</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -lt 1 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> Not Enough Argument!</span><br><span class="line">    <span class="built_in">exit</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment">#2. 遍历集群所有机器</span></span><br><span class="line"><span class="keyword">for</span> host <span class="keyword">in</span> master worker1 worker2</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> ==================== <span class="variable">$host</span> ====================</span><br><span class="line">    <span class="comment">#3. 遍历所有目录,挨个发送</span></span><br><span class="line">    <span class="comment">#先遍历更新的文本文件</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> <span class="variable">$@</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="comment">#4. 判断文件是否存在</span></span><br><span class="line">        <span class="keyword">if</span> [ -e <span class="variable">$file</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            <span class="comment">#5. 获取父目录</span></span><br><span class="line">            pdir=$(<span class="built_in">cd</span> -P $(<span class="built_in">dirname</span> <span class="variable">$file</span>); <span class="built_in">pwd</span>)</span><br><span class="line">            <span class="comment">#6. 获取当期文件的名称</span></span><br><span class="line">            fname=$(<span class="built_in">basename</span> <span class="variable">$file</span>)</span><br><span class="line">            ssh <span class="variable">$host</span> <span class="string">&quot;mkdir -p <span class="variable">$pdir</span>&quot;</span></span><br><span class="line">            rsync -av <span class="variable">$pdir</span>/<span class="variable">$fname</span> <span class="variable">$host</span>:<span class="variable">$pdir</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">$file</span> does not exists!</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<h3 id="问题">问题</h3>
<p>我没有完全跟着老师的文档配置，导致：</p>
<ul>
<li>master 连不上。</li>
<li>连 worker1 和 worker2 总共要输入 4 次 root 密码。</li>
</ul>
<p>还是 SSH 的问题，具体地说：</p>
<ul>
<li>rc@master 用 SSH 连接 root@master 时连不上。</li>
<li>rc@master 在命令行用 SSH 连接 root@worker1 和 root@worker2
时都不用输密码，但是用 xsync 脚本就要输密码了。</li>
</ul>
<h3 id="解决方法">解决方法</h3>
<ul>
<li>把脚本里的 master 主机名删了，只在 master
放一份脚本。弊端是后续只能从 master 同步到另外两台，修改配置时需要在
master 修改。</li>
</ul>
<p>输 4 次密码暂时不知道解决方法。</p>
<h2 id="运行分发脚本在-master">运行分发脚本在 master：</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo xsync.sh 指定路径</span><br></pre></td></tr></table></figure>
<p>这会把 master
指定路径下的文件或文件夹同步到另两台机器相同的路径下。</p>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
  </entry>
  <entry>
    <title>HD02 - ZooKeeper 的安装和配置</title>
    <url>/blog//HD/02/</url>
    <content><![CDATA[<p>ZooKeeper，顾名思义，就是管动物园的。因为 Hadoop
的形象是大象，名字是它的兄弟起的（Hadoop 是其开发者儿子的玩具名），加上
Hadoop 许多周边项目的形象都是动物，ZooKeeper 就是协调它们工作的。</p>
<p>除了<a
href="https://zookeeper.apache.org/doc/r3.8.2/index.html">官方文档</a>之外，还有个网站：<a
href="https://www.hadoopdoc.com/">大象教程</a>。</p>
<span id="more"></span>
<h2 id="下载-zookeeper">下载 ZooKeeper</h2>
<p><a href="https://zookeeper.apache.org/releases.html">下载地址</a></p>
<p>最新稳定版是 3.8.2，于两个月之前发布。特别地：</p>
<ul>
<li>ZooKeeper 3.5 已经在 2022 年儿童节结束生命周期。</li>
<li>ZooKeeper 3.6 已经在 2022 年倒数第二天结束生命周期。</li>
</ul>
<p>结束生命周期不是不能用了，Windows XP
现在照样有人用。要考虑到实际情况，企业不可能那么快的换软件，有新的变化时所有人都需要花时间学习试错。但是要有点探索精神，还是选择下
Apache ZooKeeper 3.8.2(asc, sha512)，文件名带 bin 的那一个。</p>
<p>ZooKeeper
特点是只要有半数以上的节点正常工作，整个集群就能正常工作，所以适合装到奇数台服务器上。</p>
<h2 id="安装-zookeeper">安装 ZooKeeper</h2>
<p>用 Xftp 把压缩包传到 master，然后：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">:: 解压</span><br><span class="line">sudo tar -zxvf apache-zookeeper-3.8.2-bin.tar.gz -C /usr/local;</span><br><span class="line">:: 重命名文件夹</span><br><span class="line"><span class="built_in">cd</span> /usr/local;</span><br><span class="line">sudo <span class="built_in">mv</span> apache-zookeeper-3.8.2-bin zookeeper-3.8.2;</span><br></pre></td></tr></table></figure>
<h2 id="配置-zookeeper">配置 ZooKeeper</h2>
<p>三台机器上都要配置。配好 master 后用 xsync
传到另外两台上，然后改。</p>
<h3 id="配置-zkdatamyid">配置 <code>zkData/myid</code></h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> zookeeper-3.8.2;</span><br><span class="line">sudo <span class="built_in">mkdir</span> zkData;</span><br><span class="line"><span class="built_in">cd</span> zkData;</span><br><span class="line">sudo vi myid;</span><br></pre></td></tr></table></figure>
<p>我填的是 <em>当前主机</em> 的 ip 后三位 <code>10x</code>。</p>
<h3 id="配置-confzoo.cfg">配置 <code>conf/zoo.cfg</code></h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ../conf;</span><br><span class="line">sudo <span class="built_in">mv</span> zoo_sample.cfg zoo.cfg;</span><br><span class="line">sudo vi zoo.cfg;</span><br></pre></td></tr></table></figure>
<p>改默认的 dataDir，并配置三台主机的端口：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dataDir=/usr/local/zookeeper-3.8.2/zkData</span><br><span class="line">server.101=master:2888:3888</span><br><span class="line">server.102=worker1:2888:3888</span><br><span class="line">server.103=worker2:2888:3888</span><br></pre></td></tr></table></figure>
<h2 id="zookeeper启动">ZooKeeper，启动！</h2>
<p>三台机器都执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/zookeeper-3.8.2;</span><br><span class="line">sudo bin/zkServer.sh start;</span><br></pre></td></tr></table></figure>
<h2 id="查看任意一台机器的服务状态">查看任意一台机器的服务状态</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">bin/zkServer.sh status;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/local/zookeeper-3.8.2/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost. Client SSL: false.</span><br><span class="line">Mode: follower</span><br></pre></td></tr></table></figure>
<p>会有一个 leader 和两个 follower。</p>
<h2 id="停止-zookeeper">停止 ZooKeeper</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">bin/zkServer.sh stop;</span><br></pre></td></tr></table></figure>
<p>可以通过看脚本里有什么内容，来获取这些命令。</p>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
  </entry>
  <entry>
    <title>HD03 - 对 Hadoop 集群启动脚本的注解</title>
    <url>/blog//HD/03/</url>
    <content><![CDATA[<p>r3.3.6</p>
<ul>
<li><a
href="https://hadoop.apache.org/docs/r3.3.6/hadoop-project-dist/hadoop-common/UnixShellAPI.html">UnixShellAPI</a></li>
</ul>
<span id="more"></span>
<h2 id="hadoop_homesbinstart-all.sh">$HADOOP_HOME/sbin/start-all.sh</h2>
<p>对应
https://github.com/apache/hadoop/blob/branch-3.3.6/hadoop-common-project/hadoop-common/src/main/bin/start-all.sh</p>
<iframe src="https://github.com/apache/hadoop/blob/branch-3.3.6/hadoop-common-project/hadoop-common/src/main/bin/start-all.sh" width="100%" height="500">
</iframe>
<p>干的事：</p>
<ol type="1">
<li>【28-36】找目录
<code>$&#123;HADOOP_HOME&#125;/libexec</code>，里面有其他脚本，和配置文件
<code>hadoop-config.sh</code></li>
<li>【38-44】把 <code>hadoop-config.sh</code> 包含到当前脚本里</li>
<li>【46-53】如果 <code>hadoop_privilege_check</code> 返回 0，进行 10
秒的启动前确认</li>
<li>【55-63】运行另两个启动脚本 <code>start-dfs.sh</code> 和
<code>start-yarn.sh</code></li>
</ol>
<ul>
<li>28：if [[ -n ]] 判断字符串非空，非空为 1</li>
<li>31：获取当前脚本的完整路径。$0 表示当前脚本的名称（含扩展名）</li>
<li>32：-P 表示使用物理路径，不使用软链接。--
表示后面跟的不是选项了，是参数。对于 dirname
命令，如果路径不以/结束，返回最后一个/之前的内容；如果路径以/结束，返回倒数第二个/之前的内容。&gt;/dev/null
就是把输出重定向到 /dev/null，丢弃输出的数据。pwd
获取当前目录的绝对路径</li>
<li>37：注释告诉 ShellCheck 工具忽略 SC2034
警告（定义了未使用的变量）</li>
<li>39：-f
用于检查文件是否存在，并且是一个常规文件（不是目录、符号链接、设备文件或管道）</li>
<li>40：. 将另一个脚本包含到当前脚本中</li>
<li>42：2&gt;&amp;1 将标准错误输出重定向到标准输出</li>
<li>47：trap 设置信号处理程序</li>
<li>52：取消对 INT 信号的捕获</li>
</ul>
<h2
id="hadoop_homelibexechadoop-config.sh">$HADOOP_HOME/libexec/hadoop-config.sh</h2>
<h2 id="hadoop_homesbinstart-dfs.sh">$HADOOP_HOME/sbin/start-dfs.sh</h2>
<p>对应
https://github.com/apache/hadoop/blob/branch-3.3.6/hadoop-hdfs-project/hadoop-hdfs/src/main/bin/start-dfs.sh</p>
<p>干的事：</p>
<ol type="1">
<li>【43-61】同样找 <code>$&#123;HADOOP_HOME&#125;/libexec</code> 目录，并包含
<code>hdfs-config.sh</code></li>
<li>【63-78】对本脚本传参个数大于等于一个时，如果第一个参数为
<code>-upgrade</code> 或 <code>-rollback</code>，把它赋值给
<code>nameStartOpt</code> 或 <code>dataStartOpt</code></li>
</ol>
<ul>
<li>64: $# 参数个数，-ge 大于等于</li>
<li>66：shift
把所有参数“左移”一位（丢弃第一个参数，原来第二个参数变成第一个参数……）</li>
<li>82：$* 所有当前参数（shift 后的）拼接起来的字符串</li>
<li>89：if [[ -z ]] 判断字符串空，空为 1</li>
<li>101：$? 上一个进程结束的状态码，0 成功 1 失败</li>
<li>112：(( )) 可在里面进行算术运算并赋值</li>
<li>121：=~ 正则匹配</li>
<li>147：2&gt;&amp;- 把标准错误输出重定向到“关闭”</li>
<li>149："$</li>
</ul>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
  </entry>
  <entry>
    <title>HD04 - 编写 ZooKeeper 集群控制脚本</title>
    <url>/blog//HD/04/</url>
    <content><![CDATA[<p>在此之前，我重新修改了三台机器的主机名。</p>
<span id="more"></span>
<h2 id="在此之前">在此之前</h2>
<p>主机名 master、worker1、worker2 还是太不好看了（因为我命名的 worker1
对应的是 102，worker2 对应的是 103，加上在 ZK 里不一定谁当
Leader，加上不一定只用这一个软件），所以我把主机名<strong>改成了
ubuntu101、ubuntu102、ubuntu103</strong>，对应 IP 地址。</p>
<p>需要改以下几个文件：</p>
<ul>
<li>物理机的 C:\Windows\System32\drivers\etc\hosts</li>
<li>Hadoop 配置文件
<ul>
<li>core-site.xml</li>
<li>hdfs-site.xml</li>
<li>mapred-site.xml</li>
<li>yarn-site.xml</li>
<li>workers</li>
</ul></li>
<li>ZK 配置文件
<ul>
<li>zoo.cfg</li>
</ul></li>
<li>集群分发脚本 xsync.sh</li>
<li>虚拟机的 /etc/hostname</li>
<li>虚拟机的 /etc/hosts</li>
</ul>
<p>用 Xftp 传到物理机上改（后两者直接 <code>sudo vi</code>
比较方便），留个备份再传回去，然后重启。</p>
<p>然后重新互相 <code>ssh-copy-id</code>。</p>
<h2 id="服务端的">服务端的</h2>
<p>就是把自带的脚本 <code>zkServer.sh</code> 再封装一层，取名
<code>zks.sh</code>：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">ZK_HOME=<span class="string">&quot;/usr/local/zookeeper-3.8.2&quot;</span></span><br><span class="line">ZKS_SH=<span class="string">&quot;<span class="variable">$ZK_HOME</span>/bin/zkServer.sh&quot;</span></span><br><span class="line">servers=<span class="string">&quot;ubuntu101 ubuntu102 ubuntu103&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\n&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数 $1 是操作名，$2 是主机名</span></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$2</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># 如果指定了主机名，对指定主机操作</span></span><br><span class="line">    <span class="built_in">echo</span> ------ zkServer <span class="variable">$2</span> <span class="variable">$1</span> ------</span><br><span class="line">    ssh <span class="variable">$2</span> <span class="variable">$ZKS_SH</span> <span class="variable">$1</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\n&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment"># 如果没有指定主机名，就对所有主机操作</span></span><br><span class="line">    <span class="keyword">for</span> server <span class="keyword">in</span> <span class="variable">$servers</span>; <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> ------ zkServer <span class="variable">$server</span> <span class="variable">$1</span> ------</span><br><span class="line">        ssh <span class="variable">$server</span> <span class="variable">$ZKS_SH</span> <span class="variable">$1</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>增加执行权限：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x zks.sh</span><br></pre></td></tr></table></figure>
<p>执行之后报错，写入文件的权限不够。发现 Zookeeper
文件夹和里面的所有文件所属用户和组都是 <code>root</code>。</p>
<p>所以<strong>在 Zookeeper 文件夹里</strong>改用户和用户组：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chown</span> -R rc:rc .</span><br></pre></td></tr></table></figure>
<p>可以把脚本后缀 <code>.sh</code> 去了，然后移动到
<code>/usr/bin</code>，这样可以随地执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mv</span> zks.sh /usr/bin/zks</span><br></pre></td></tr></table></figure>
<h3 id="示例">示例</h3>
<p>启动所有：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">zks start</span><br></pre></td></tr></table></figure>
<p>关闭某个：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">zks stop ubuntu102</span><br></pre></td></tr></table></figure>
<h2 id="客户端的">客户端的</h2>
<p>就是把自带的脚本 <code>zkCli.sh</code> 再封装一层，取名
<code>zkc.sh</code>：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">ZK_HOME=<span class="string">&quot;/usr/local/zookeeper-3.8.2&quot;</span></span><br><span class="line">ZKC_SH=<span class="string">&quot;<span class="variable">$ZK_HOME</span>/bin/zkCli.sh&quot;</span></span><br><span class="line">servers=<span class="string">&quot;ubuntu101 ubuntu102 ubuntu103&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;<span class="variable">$ZKC_SH</span>&quot;</span> -server $(hostname)</span><br></pre></td></tr></table></figure>
<p>同样加执行权限，去后缀并移动位置。</p>
<h3 id="示例-1">示例</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">zkc</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
  </entry>
  <entry>
    <title>HD05 - ZooKeeper 的 Shell 命令和 Java API 操作</title>
    <url>/blog//HD/05/</url>
    <content><![CDATA[<p>r3.8.2</p>
<ul>
<li><a
href="https://zookeeper.apache.org/doc/r3.8.2/zookeeperCLI.html">zookeeper
CLI</a></li>
<li><a
href="https://zookeeper.apache.org/doc/r3.8.2/apidocs/zookeeper-server/index.html">zookeeper
Server API</a></li>
</ul>
<span id="more"></span>
<h2 id="shell-命令">shell 命令</h2>
<p>前提是服务端正常（半数以上节点存活），在启动了某一台存活机器上的客户端后的操作：</p>
<p>见 <code>$ZK_HOME/docs/zookeeperCLI.html</code></p>
<iframe src="https://zookeeper.apache.org/doc/r3.8.2/zookeeperCLI.html" width="100%" height="500">
</iframe>
<ul>
<li>创建节点：<code>create [-s] [-e] /path/to/node "content"</code>
<ul>
<li><code>-s</code>：带序号，就是在节点名后面加上数字</li>
<li><code>-e</code>：临时节点，在【创建此节点的那一方客户端退出】后会被删除</li>
</ul></li>
<li>查看节点详细信息：<code>get -s /path/to/node</code>（不
<code>-s</code> 时只查看值）（与 <code>stat /path/to/node</code>
效果一样）</li>
<li>修改节点数据值：<code>set /path/to/node "content"</code></li>
<li>删除与递归删除节点：<code>delete /path/to/node</code>
<code>deleteall /path/to/node</code></li>
<li>节点的值变化监听： <code>get -w /path/to/node</code>
（节点被删除时也会被捕获）</li>
<li>节点的子节点（路径）变化监听： <code>ls -w /path/to/node</code>
（节点值变化时不会被捕获）</li>
<li>列出路径下的所有子节点：<code>ls -R /path</code></li>
</ul>
<h2 id="javaapi-操作">JavaAPI 操作</h2>
<p>使用了 <a
href="https://junit.org/junit5/docs/current/user-guide/">JUnit5</a>
测试框架，在 <code>工程目录/src/test/java</code> 下创建 java
源文件进行测试。</p>
<h3 id="工程创建">工程创建</h3>
<ol type="1">
<li><p>VSCode -&gt; 从 Maven 原型创建新项目 -&gt; No Archetype</p></li>
<li><p>groupId 设为 <code>test.hrf.zk</code>，artifactId 设为
<code>zktest</code></p></li>
<li><p>pom.xml 里加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.20.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>适当修改 pom.xml 里的 <code>&lt;maven.compiler.source&gt;</code>
和 <code>&lt;maven.compiler.target&gt;</code> 的 JDK 版本。</p></li>
<li><p><code>mvn install</code></p></li>
<li><p><code>src/main/resources</code> 里加
<code>log4j.properties</code> 配置文件：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">INFO, stdout</span></span><br><span class="line"><span class="attr">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%d %p [%c] - %m%n</span></span><br><span class="line"><span class="attr">log4j.appender.logfile</span>=<span class="string">org.apache.log4j.FileAppender</span></span><br><span class="line"><span class="attr">log4j.appender.logfile.File</span>=<span class="string">target/spring.log</span></span><br><span class="line"><span class="attr">log4j.appender.logfile.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.logfile.layout.ConversionPattern</span>=<span class="string">%d %p [%c] - %m%n</span></span><br></pre></td></tr></table></figure></li>
<li><p>在 <code>src/test/java</code> 下建
<code>zkClient.java</code></p></li>
</ol>
<h3 id="创建-znode">创建 Znode</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.CreateMode;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.KeeperException;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooDefs;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">zkClient</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">connectString</span> <span class="operator">=</span> <span class="string">&quot;ubuntu101:2181&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">sessionTimeout</span> <span class="operator">=</span> <span class="number">100000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">ZooKeeper</span> <span class="variable">zkClient</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        zkClient = <span class="keyword">new</span> <span class="title class_">ZooKeeper</span>(connectString, sessionTimeout, <span class="keyword">new</span> <span class="title class_">Watcher</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(WatchedEvent watchedEvent)</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 该方法在测试时只会被调用一次</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 创建一个所有客户端都可读写、持久的节点</span></span><br><span class="line">        zkClient.create(<span class="string">&quot;/fruit1&quot;</span>, <span class="string">&quot;apple&quot;</span>.getBytes(),</span><br><span class="line">                ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">        System.out.println(<span class="string">&quot;节点创建成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="获取子节点并监听节点变化">获取子节点并监听节点变化</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.KeeperException;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">zkClient</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">connectString</span> <span class="operator">=</span> <span class="string">&quot;ubuntu101:2181&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">sessionTimeout</span> <span class="operator">=</span> <span class="number">100000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">ZooKeeper</span> <span class="variable">zkClient</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        zkClient = <span class="keyword">new</span> <span class="title class_">ZooKeeper</span>(connectString, sessionTimeout,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Watcher</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(WatchedEvent watchedEvent)</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;---start-------------------------------------&quot;</span>);</span><br><span class="line">                        List&lt;String&gt; children = <span class="literal">null</span>;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            children = zkClient.getChildren(<span class="string">&quot;/&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (KeeperException | InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                        children.forEach(System.out::println);</span><br><span class="line">                        System.out.println(<span class="string">&quot;---end--------------------------------------&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 该方法在测试时只会被调用一次</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        Thread.sleep(Long.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="判断节点是否存在">判断节点是否存在</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.KeeperException;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.data.Stat;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">zkClient</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">connectString</span> <span class="operator">=</span> <span class="string">&quot;ubuntu101:2181&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">sessionTimeout</span> <span class="operator">=</span> <span class="number">100000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">ZooKeeper</span> <span class="variable">zkClient</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        zkClient = <span class="keyword">new</span> <span class="title class_">ZooKeeper</span>(connectString, sessionTimeout,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Watcher</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(WatchedEvent watchedEvent)</span> &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 该方法在测试时只会被调用一次</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException &#123;</span><br><span class="line">        <span class="type">Stat</span> <span class="variable">sta</span> <span class="operator">=</span> zkClient.exists(<span class="string">&quot;/fruit&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        System.out.println(<span class="literal">null</span> == sta ? <span class="string">&quot;不存在&quot;</span> : <span class="string">&quot;存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="服务器动态上下线案例">服务器动态上下线案例</h3>
<p>模拟服务器动态上下线：</p>
<ol type="1">
<li>提前创建 <code>/servers</code> 节点</li>
<li><ul>
<li>DistributeClient
监听服务器上下线（监听<code>/servers</code>下子路径的变化）</li>
<li>DistributeServer
模拟服务器上下线（创建/删除<code>/servers/hostname</code>）</li>
</ul></li>
<li>上/下线后的业务逻辑</li>
</ol>
<p><code>DistributeClient.java</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.KeeperException;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DistributeClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">connectString</span> <span class="operator">=</span> <span class="string">&quot;ubuntu101:2181,ubuntu102:2181,ubuntu103:2181&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">sessionTimeout</span> <span class="operator">=</span> <span class="number">100000</span>;</span><br><span class="line">    <span class="keyword">private</span> ZooKeeper zk;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, KeeperException, InterruptedException &#123;</span><br><span class="line">        <span class="type">DistributeClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DistributeClient</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1 获取ZK连接</span></span><br><span class="line">        client.getConnect();</span><br><span class="line">        <span class="comment">// 2 监听服务器下/servers下面子节点的增加和删除</span></span><br><span class="line">        client.getServerList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3 相关业务逻辑（主要是添加延迟函数）</span></span><br><span class="line">        client.buisiness();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buisiness</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        Thread.sleep(Long.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getServerList</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 第二个参数设置为true,监听走的是getConnect下的process方法。</span></span><br><span class="line">        List&lt;String&gt; children = zk.getChildren(<span class="string">&quot;/servers&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 循环取出每一个节点对应的主机名称</span></span><br><span class="line">        ArrayList&lt;Object&gt; servers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">// 存储servers下的所有节点名称</span></span><br><span class="line">        <span class="keyword">for</span> (String child : children) &#123;</span><br><span class="line">            <span class="type">byte</span>[] data = zk.getData(<span class="string">&quot;/servers/&quot;</span> + child, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            servers.add(<span class="keyword">new</span> <span class="title class_">String</span>(data));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 打印</span></span><br><span class="line">        System.out.println(servers);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getConnect</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        zk = <span class="keyword">new</span> <span class="title class_">ZooKeeper</span>(connectString, sessionTimeout, <span class="keyword">new</span> <span class="title class_">Watcher</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(WatchedEvent watchedEvent)</span> &#123;</span><br><span class="line">                <span class="comment">// 因为注册一次，只能监听一次，所以需要在监听方法里面再注册一下</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    getServerList();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>DistributeServer.java</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.CreateMode;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.KeeperException;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooDefs;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DistributeServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">connectString</span> <span class="operator">=</span> <span class="string">&quot;ubuntu101:2181,ubuntu102:2181,ubuntu103:2181&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">sessionTimeout</span> <span class="operator">=</span> <span class="number">2000</span>;</span><br><span class="line">    <span class="keyword">private</span> ZooKeeper zk;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, KeeperException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">DistributeServer</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DistributeServer</span>();</span><br><span class="line">        <span class="comment">// 1. 连接zookeeper集群</span></span><br><span class="line">        server.getConnect();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 向集群进行注册（也就是创建服务器的路径）</span></span><br><span class="line">        server.regist(args[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 业务逻辑的代码</span></span><br><span class="line">        <span class="comment">// 添加延迟函数，防止程序结束了，看不到节点的相关变化</span></span><br><span class="line">        server.business();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">business</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        Thread.sleep(Long.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">regist</span><span class="params">(String hostname)</span> <span class="keyword">throws</span> KeeperException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">// znode 将在客户端断开连接时被删除，并且其名称将附加单调递增的数字</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">create</span> <span class="operator">=</span> zk.create(<span class="string">&quot;/servers/&quot;</span> + hostname, hostname.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE,</span><br><span class="line">                CreateMode.EPHEMERAL_SEQUENTIAL);</span><br><span class="line">        System.out.println(hostname + <span class="string">&quot; is online&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getConnect</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        zk = <span class="keyword">new</span> <span class="title class_">ZooKeeper</span>(connectString, sessionTimeout, <span class="keyword">new</span> <span class="title class_">Watcher</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(WatchedEvent watchedEvent)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
  </entry>
  <entry>
    <title>HD07 - Hadoop 生态圈</title>
    <url>/blog//HD/07/</url>
    <content><![CDATA[<p>Hadoop 生态圈</p>
<span id="more"></span>
<h2 id="字母顺序">字母顺序</h2>
<ul>
<li>Alluxio：【不是 Apache 基金会的】</li>
<li>Ambari：</li>
<li>Flume：收集用户日志。</li>
<li>HBase：分布式的，面向列的非关系型数据库，用于随机访问和实时读写数据。</li>
<li>HDFS：分布式文件系统。</li>
<li>Hive：用类似 SQL 的语言整理数据。</li>
<li>Kafka：</li>
<li>MapReduce：一种编程模型，用于海量数据的并行运算。类似分治。</li>
<li>Pig：</li>
<li>Spark：计算引擎。用内存代替磁盘，存储计算过程中的数据。</li>
<li>Sqoop:</li>
<li>Storm:</li>
<li>YARN：资源管理和调度。</li>
<li>Zookeeper：管动物园的。</li>
</ul>
<h2 id="层级顺序">层级顺序</h2>
<table>
<thead>
<tr class="header">
<th>用的东西</th>
<th>层级</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td></td>
<td>数据分析</td>
</tr>
<tr class="even">
<td>MapReduce Spark Storm</td>
<td>数据模型</td>
</tr>
<tr class="odd">
<td>HBase<br/>HDFS</td>
<td>数据存储</td>
</tr>
<tr class="even">
<td>Sqoop Flume Kafka</td>
<td>数据传输</td>
</tr>
<tr class="odd">
<td></td>
<td>数据来源</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
  </entry>
  <entry>
    <title>HD06 - HDFS 的 Shell 命令和 JavaAPI 操作</title>
    <url>/blog//HD/06/</url>
    <content><![CDATA[<p>r3.3.6</p>
<ul>
<li><a
href="https://hadoop.apache.org/docs/r3.3.6/hadoop-project-dist/hadoop-common/FileSystemShell.html">FileSystem
Shell</a></li>
<li><a
href="https://hadoop.apache.org/docs/r3.3.6/api/org/apache/hadoop/fs/FileSystem.html">FileSystem
API</a></li>
<li><a
href="https://hadoop.apache.org/docs/r3.3.6/api/org/apache/hadoop/fs/FileUtil.html">FileUtil
API</a></li>
<li><a
href="https://hadoop.apache.org/docs/r3.3.6/api/org/apache/hadoop/fs/FileStatus.html">FileStatus
API</a></li>
</ul>
<span id="more"></span>
<h2 id="shell-命令">shell 命令</h2>
<iframe src="https://hadoop.apache.org/docs/r3.3.6/hadoop-project-dist/hadoop-common/FileSystemShell.html" width="100%" height="500">
</iframe>
<h2 id="javaapi-操作">JavaAPI 操作</h2>
<p>注意分清三个文件系统：</p>
<ul>
<li>虚拟机里的 HDFS</li>
<li>虚拟机操作系统的文件系统</li>
<li>物理机操作系统的文件系统</li>
</ul>
<h3 id="工程创建">工程创建</h3>
<ol type="1">
<li><p>VSCode -&gt; 从 Maven 原型创建新项目 -&gt; No Archetype</p></li>
<li><p>groupId 设为 <code>test.hrf.hd</code>，artifactId 设为
<code>hdtest</code></p></li>
<li><p>pom.xml 里加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.20.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>适当修改 pom.xml 里的 <code>&lt;maven.compiler.source&gt;</code>
和 <code>&lt;maven.compiler.target&gt;</code> 的 JDK 版本。<a
href="https://cwiki.apache.org/confluence/display/HADOOP/Hadoop+Java+Versions">Hadoop
支持的 Java 版本</a></p></li>
<li><p><code>mvn install</code></p></li>
<li><p><code>src/main/resources</code> 里加
<code>log4j.properties</code> 配置文件：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">INFO, stdout</span></span><br><span class="line"><span class="attr">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%d %p [%c] - %m%n</span></span><br><span class="line"><span class="attr">log4j.appender.logfile</span>=<span class="string">org.apache.log4j.FileAppender</span></span><br><span class="line"><span class="attr">log4j.appender.logfile.File</span>=<span class="string">target/spring.log</span></span><br><span class="line"><span class="attr">log4j.appender.logfile.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.logfile.layout.ConversionPattern</span>=<span class="string">%d %p [%c] - %m%n</span></span><br></pre></td></tr></table></figure></li>
<li><p>在 <code>src/test/java</code> 下建
<code>HdfsClient.java</code></p></li>
</ol>
<h3
id="在物理机上编程测试连接虚拟机windows-文件系统---hdfs">在物理机上编程测试，连接虚拟机（Windows
文件系统 -&gt; HDFS）</h3>
<p>或许在物理机上测试需要 <a
href="https://github.com/cdarlint/winutils">winutils</a>，这个作者还没有编译
3.3.6 版本的。每一次测试，调试控制台都会报缺 winutils：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">WARN [org.apache.hadoop.util.Shell] - Did not find winutils.exe: &#123;&#125;</span><br><span class="line">java.io.FileNotFoundException: java.io.FileNotFoundException: HADOOP_HOME and hadoop.home.dir are unset. -see https://wiki.apache.org/hadoop/WindowsProblems</span><br><span class="line">WARN [org.apache.hadoop.util.NativeCodeLoader] - Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</span><br></pre></td></tr></table></figure>
<p>关于下载文件：</p>
<ul>
<li>用 <code>FileSystem.copyToLocalFile(Path src, Path dst)</code>
向物理机复制文件为空。（测试结果报错）</li>
<li>用
<code>FileUtil.copy(FileSystem srcFS, Path src, File dst, boolean deleteSource, Configuration conf)</code>
就可以向物理机复制文件。（测试结果不报错，调试控制台还是报缺的）</li>
</ul>
<p>关于上传文件：</p>
<ul>
<li>用
<code>FileUtil.copy(File src, FileSystem dstFS, Path dst, boolean deleteSource, Configuration conf)</code>
和
<code>FileSystem.copyFromLocalFile(boolean delSrc, boolean overwrite, Path src, Path dst)</code>
均可。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.net.URISyntaxException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataInputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataOutputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileStatus;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterAll;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeAll;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.TestInstance;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.TestInstance.Lifecycle;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TestInstance(Lifecycle.PER_CLASS)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HdfsClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">    <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeAll</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span> <span class="keyword">throws</span> IOException, URISyntaxException, InterruptedException &#123;</span><br><span class="line">        fs = FileSystem.get(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;hdfs://ubuntu101:9820&quot;</span>), conf, <span class="string">&quot;rc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterAll</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        fs.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPrint</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1234567&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMkdir</span><span class="params">()</span> <span class="keyword">throws</span> IllegalArgumentException, IOException &#123;</span><br><span class="line">        fs.mkdirs(<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/test/path&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMkfile</span><span class="params">()</span> <span class="keyword">throws</span> IllegalArgumentException, IOException &#123;</span><br><span class="line">        <span class="type">Path</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/test/1.txt&quot;</span>);</span><br><span class="line">        <span class="type">FSDataOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> fs.create(filePath);</span><br><span class="line">        outputStream.writeUTF(<span class="string">&quot;你好abc\n&quot;</span>);</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReadFile</span><span class="params">()</span> <span class="keyword">throws</span> UnsupportedOperationException, IOException &#123;</span><br><span class="line">        <span class="type">Path</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/test/1.txt&quot;</span>);</span><br><span class="line">        <span class="type">FSDataInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> fs.open(filePath);</span><br><span class="line">        IOUtils.copyBytes(inputStream, System.out, <span class="number">4096</span>, <span class="literal">false</span>);</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Path</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/test&quot;</span>);</span><br><span class="line">        fs.delete(filePath, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUploadFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Path</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;D:\\school\\hadoop\\琵琶行.txt&quot;</span>);</span><br><span class="line">        <span class="type">Path</span> <span class="variable">dst</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/test/&quot;</span>);</span><br><span class="line">        fs.copyFromLocalFile(<span class="literal">false</span>, <span class="literal">true</span>, src, dst);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUploadFile1</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\school\\hadoop\\琵琶不行.txt&quot;</span>);</span><br><span class="line">        <span class="type">Path</span> <span class="variable">dst</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/test/&quot;</span>);</span><br><span class="line">        FileUtil.copy(src, fs, dst, <span class="literal">false</span>, conf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这些方法中，只有它一个测试失败</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDownloadFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Path</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/琵琶行.txt&quot;</span>);</span><br><span class="line">        <span class="type">Path</span> <span class="variable">dst</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;D:\\school\\hadoop\\琵琶行1.txt&quot;</span>);</span><br><span class="line">        fs.copyToLocalFile(src, dst);<span class="comment">// 这里下载文件为空。且测试结果报错，不报缺 winutils，其他和调试控制台一样</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDownloadFile1</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Path</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/琵琶行.txt&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">dst</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\school\\hadoop\\琵琶行1.txt&quot;</span>);</span><br><span class="line">        FileUtil.copy(fs, src, dst, <span class="literal">false</span>, conf);<span class="comment">// 这里可以下载文件</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 列出指定目录下的文件和子目录信息，不深入子目录</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testListStatus</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException &#123;</span><br><span class="line">        <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        FileStatus[] fileStatuses = fs.listStatus(path);</span><br><span class="line">        <span class="keyword">for</span> (FileStatus fileStatus : fileStatuses) &#123;</span><br><span class="line">            System.out.println(fileStatus);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCopyFileBetweenHDFS</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Path</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/琵琶行.txt&quot;</span>);</span><br><span class="line">        <span class="type">Path</span> <span class="variable">dst</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/test/琵琶可行.txt&quot;</span>);</span><br><span class="line">        FileUtil.copy(fs, src, fs, dst, <span class="literal">false</span>, <span class="literal">false</span>, conf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRename</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Path</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/test/琵琶可行.txt&quot;</span>);</span><br><span class="line">        <span class="type">Path</span> <span class="variable">dst</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/test/琵琶不可行.txt&quot;</span>);</span><br><span class="line">        fs.rename(src, dst);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3
id="在物理机上编程打包传到虚拟机上执行ubuntu-文件系统---hdfs">在物理机上编程打包，传到虚拟机上执行（ubuntu
文件系统 &lt;-&gt; HDFS）</h3>
<p>都能执行成功。就是把上面的注解去了，文件路径改了，然后加了一个
Main.java。</p>
<p><code>HdfsClient.java</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.hrf.hd;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.net.URISyntaxException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataInputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataOutputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileStatus;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IOUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HdfsClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">    <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span> <span class="keyword">throws</span> IOException, URISyntaxException, InterruptedException &#123;</span><br><span class="line">        fs = FileSystem.get(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;hdfs://ubuntu101:9820&quot;</span>), conf, <span class="string">&quot;rc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        fs.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPrint</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1234567&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMkdir</span><span class="params">()</span> <span class="keyword">throws</span> IllegalArgumentException, IOException &#123;</span><br><span class="line">        fs.mkdirs(<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/test/path&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMkfile</span><span class="params">()</span> <span class="keyword">throws</span> IllegalArgumentException, IOException &#123;</span><br><span class="line">        <span class="type">Path</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/test/1.txt&quot;</span>);</span><br><span class="line">        <span class="type">FSDataOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> fs.create(filePath);</span><br><span class="line">        outputStream.writeUTF(<span class="string">&quot;你好abc\n&quot;</span>);</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReadFile</span><span class="params">()</span> <span class="keyword">throws</span> UnsupportedOperationException, IOException &#123;</span><br><span class="line">        <span class="type">Path</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/test/1.txt&quot;</span>);</span><br><span class="line">        <span class="type">FSDataInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> fs.open(filePath);</span><br><span class="line">        IOUtils.copyBytes(inputStream, System.out, <span class="number">4096</span>, <span class="literal">false</span>);</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Path</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/test&quot;</span>);</span><br><span class="line">        fs.delete(filePath, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUploadFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Path</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;琵琶行.txt&quot;</span>);</span><br><span class="line">        <span class="type">Path</span> <span class="variable">dst</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/test/琵琶行.txt&quot;</span>);</span><br><span class="line">        fs.copyFromLocalFile(<span class="literal">false</span>, <span class="literal">true</span>, src, dst);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUploadFile1</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;琵琶不行.txt&quot;</span>);</span><br><span class="line">        <span class="type">Path</span> <span class="variable">dst</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/test/琵琶不行.txt&quot;</span>);</span><br><span class="line">        FileUtil.copy(src, fs, dst, <span class="literal">false</span>, conf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDownloadFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Path</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/test/琵琶行.txt&quot;</span>);</span><br><span class="line">        <span class="type">Path</span> <span class="variable">dst</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;琵琶行1.txt&quot;</span>);</span><br><span class="line">        fs.copyToLocalFile(src, dst);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDownloadFile1</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Path</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/test/琵琶行.txt&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">dst</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;琵琶行2.txt&quot;</span>);</span><br><span class="line">        FileUtil.copy(fs, src, dst, <span class="literal">false</span>, conf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 列出指定目录下的文件和子目录信息，不深入子目录</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testListStatus</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException &#123;</span><br><span class="line">        <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        FileStatus[] fileStatuses = fs.listStatus(path);</span><br><span class="line">        <span class="keyword">for</span> (FileStatus fileStatus : fileStatuses) &#123;</span><br><span class="line">            System.out.println(fileStatus);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCopyFileBetweenHDFS</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Path</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/test/琵琶行.txt&quot;</span>);</span><br><span class="line">        <span class="type">Path</span> <span class="variable">dst</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/test/1/琵琶可行.txt&quot;</span>);</span><br><span class="line">        FileUtil.copy(fs, src, fs, dst, <span class="literal">false</span>, <span class="literal">false</span>, conf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRename</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Path</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/test/1/琵琶可行.txt&quot;</span>);</span><br><span class="line">        <span class="type">Path</span> <span class="variable">dst</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/test/1/琵琶不可行.txt&quot;</span>);</span><br><span class="line">        fs.rename(src, dst);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Main.java</code>：</p>
<p>测试用的先这么写。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.hrf.hd;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URISyntaxException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, URISyntaxException, InterruptedException &#123;</span><br><span class="line">        <span class="type">HdfsClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HdfsClient</span>();</span><br><span class="line">        client.connect();</span><br><span class="line">        <span class="keyword">if</span> (args[<span class="number">0</span>].equals(<span class="string">&quot;t0&quot;</span>)) &#123;</span><br><span class="line">            client.testPrint();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (args[<span class="number">0</span>].equals(<span class="string">&quot;testMkdir&quot;</span>)) &#123;</span><br><span class="line">            client.testMkdir();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (args[<span class="number">0</span>].equals(<span class="string">&quot;testMkfile&quot;</span>)) &#123;</span><br><span class="line">            client.testMkfile();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (args[<span class="number">0</span>].equals(<span class="string">&quot;testReadFile&quot;</span>)) &#123;</span><br><span class="line">            client.testReadFile();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (args[<span class="number">0</span>].equals(<span class="string">&quot;testDeleteFile&quot;</span>)) &#123;</span><br><span class="line">            client.testDeleteFile();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (args[<span class="number">0</span>].equals(<span class="string">&quot;testUploadFile&quot;</span>)) &#123;</span><br><span class="line">            client.testUploadFile();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (args[<span class="number">0</span>].equals(<span class="string">&quot;testUploadFile1&quot;</span>)) &#123;</span><br><span class="line">            client.testUploadFile1();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (args[<span class="number">0</span>].equals(<span class="string">&quot;testDownloadFile&quot;</span>)) &#123;</span><br><span class="line">            client.testDownloadFile();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (args[<span class="number">0</span>].equals(<span class="string">&quot;testDownloadFile1&quot;</span>)) &#123;</span><br><span class="line">            client.testDownloadFile1();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (args[<span class="number">0</span>].equals(<span class="string">&quot;testListStatus&quot;</span>)) &#123;</span><br><span class="line">            client.testListStatus();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (args[<span class="number">0</span>].equals(<span class="string">&quot;testCopyFileBetweenHDFS&quot;</span>)) &#123;</span><br><span class="line">            client.testCopyFileBetweenHDFS();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (args[<span class="number">0</span>].equals(<span class="string">&quot;testRename&quot;</span>)) &#123;</span><br><span class="line">            client.testRename();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;456&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3
id="或许还可以用-vscode-连接虚拟机直接在虚拟机的文件系统上编程">或许还可以用
VSCode 连接虚拟机，直接在虚拟机的文件系统上编程</h3>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
  </entry>
  <entry>
    <title>HD08 - HDFS 的读写流程和工作机制</title>
    <url>/blog//HD/08/</url>
    <content><![CDATA[<p>HDFS 的读写流程和工作机制</p>
<span id="more"></span>
<p>在 HDFS
中，数据是分块（Block）存储的。相当于你一个人分割在了多个社交平台上。</p>
<p>在 Hadoop2.x 和 3.x 中，数据块大小默认是 128MB。</p>
<p>如果数据分块太小，分割数量会变多，寻址时间会增加。就是你切换 APP
的时间增加。</p>
<p>如果数据块太大，磁盘传输时间占比增加。就是你花在这一个 APP
上的时间增加。且分割数量变少，MR 的并行任务数变少。</p>
<p>当寻址时间是传输时间的 1% 时，状态最佳。</p>
<h2 id="写数据的流程">写数据的流程</h2>
<p>创建一个文件，将数据写入文件，关闭文件。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hadoop fs -put ./voice.wav /app</span><br></pre></td></tr></table></figure>
<p>如果是一个 200MB 的文件，会被分为 128MB 的一块和 72MB 的一块。</p>
<p>distributed：分布式</p>
<pre class="mermaid">sequenceDiagram
    participant C as Client
    participant NN as NameNode
    participant DN1 as DataNode1
    participant DN2 as DataNode2
    participant DN3 as DataNode3

    C->>NN: 1
    NN-->>C: 2
    C->>NN: 3
    NN-->>C: 4
    C->>DN1: 5
    DN1->>DN2: 5
    DN2->>DN3: 5
    DN3-->>DN2: 6
    DN2-->>DN1: 6
    DN1-->>C: 6
    C->>DN1: 7
    DN1->>DN2: 7
    DN2->>DN3: 7</pre>
<p>把 Client 看成你，NameNode 看成手机，DataNode 看成
APP。（类比不恰当，但是好记）</p>
<ol type="1">
<li>Client 通过<a
href="https://github.com/apache/hadoop/blob/branch-3.3.6/hadoop-hdfs-project/hadoop-hdfs-Client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java">DistributedFileSystem</a>模块向
NameNode 发请求：上传文件</li>
<li>NameNode 给 Client 响应：是/否允许上传</li>
</ol>
<p>前两步是你和你的手机建立连接，看手机能不能用。</p>
<ol start="3" type="1">
<li>Client 再给 NameNode 发请求：上传第一个块/可用的 DataNode 列表</li>
<li>NameNode 返回 DataNode 的服务器地址</li>
</ol>
<p>这两步是你想发动态了，看目前装了哪些 APP。</p>
<ol start="5" type="1">
<li>Client 通过<a
href="https://github.com/apache/hadoop/blob/branch-3.3.6/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FSDataOutputStream.java">FSDataOutputStream</a>模块向
DataNode1 请求上传数据，DataNode1 收到请求之后向 DataNode2
请求……这叫建立通信管道。</li>
<li>通信管道建立之后，DataNode 向前面的 DataNode 逐级应答到 Client</li>
</ol>
<p>你想发一条动态，打开了 NeteaseCloudMusic，但是 APP
们都是有灵性的，一个接连唤醒一个。</p>
<ol start="7" type="1">
<li>Client 向 DataNode1
发送第一个数据块的多个数据包（Packet），DataNode1 收到之后发给
DataNode2……类似路由器分组转发，但是保存了数据。</li>
<li>重复步骤 3 到 7，上传第二、第三……个数据块直到传输完成，Client
关闭连接。</li>
</ol>
<p>总结：Client 和 NameNode 问答两次（是否可以上传，DN 的地址），和
DataNode 问答一次（建立通信管道），之后开始分包传数据。传完一个块后从
Client 和 NameNode 的第二次问答处开始循环。</p>
<h2 id="读数据的流程">读数据的流程</h2>
<pre class="mermaid">sequenceDiagram
    participant C as Client
    participant NN as NameNode
    participant DN1 as 某 DataNode

    C->>NN: 1
    NN-->>C: 2
    C->>DN1: 3
    DN1-->>C: 4</pre>
<ol type="1">
<li>C 问 NN，请求下载文件。</li>
<li>NN 回答数据块所在的 DN，按与客户端的网络拓扑距离排序。</li>
<li>C 选一台最近的 DN 请求读数据。</li>
<li>DN 给 C 分包传数据。</li>
<li>C 接收。接收完一个块后，看情况再向 NN 请求下一个块所在的 DN
地址（重复 1 到 4 步）。</li>
</ol>
<p>总结：C 和 NN
问答一次，开始分包传数据，传完一个块后重复前面的操作。</p>
<p>散落在各个服务器上的碎片，构成了一个赛博你。一个块也可能存有多个副本，副本的数量叫冗余度，所以可能构成多个赛博你。</p>
<h2
id="副本放置策略机架感知网络拓扑距离pineline">副本放置策略、机架感知、网络拓扑距离、PineLine</h2>
<p>机架（rack）是放机器的架子，是连接到同一个交换机的物理存储节点的集合。</p>
<p>Hadoop 集群由多个机架组成。</p>
<p>副本放置策略，就是策划把数据块分别放置到哪个机架的哪个机器上。</p>
<p>机架感知（RackAware）</p>
<h2 id="nn-和-2nn-的工作机制">NN 和 2NN 的工作机制</h2>
<p><a href="/blog/HD/09/">HDFS 的 EditLog 和 FsImage 文件</a></p>
<ul>
<li>NN：记录 EditLog，滚动正在写的（inprogress）EditLog</li>
<li>2NN：向 NN 请求（是否/执行）创建 CheckPoint，当 CheckPoint
触发时，合并 EditLog 为 FsImage</li>
</ul>
<ol type="1">
<li>启动 NN，加载 EditLog 和 FsImage 到内存里（第一次格式化 HDFS 并启动
NN 时会创建），同时 2NN 加载 FsImage 到内存里。</li>
<li>C 向 NN 发写请求。</li>
<li>NN 写日志。</li>
<li>2NN 请求创建 CheckPoint。</li>
<li>NN 滚动日志。</li>
<li>NN 把日志复制到 2NN，2NN 加载日志到内存里。</li>
<li>当检查点到时，2NN 合并日志和镜像文件为新的镜像文件
fsimage.chkpoint。</li>
<li>2NN 把新的镜像文件复制到 NN，NN 对其重命名为 fsimage。</li>
</ol>
<h2 id="dn-的工作机制">DN 的工作机制</h2>
<ul>
<li>DN 启动后向 NN 注册。</li>
<li>DN 每隔一个 <code>dfs.blockreport.intervalMsec</code> 时间向 NN
上报所有数据块信息。</li>
<li>DN 每隔一个 <code>dfs.datanode.directoryscan.interval</code>
时间扫描本地的数据块信息。</li>
<li>DN 每隔一个 <code>dfs.heartbeat.interval</code> 时间向 NN
发送心跳信息。</li>
</ul>
<p>NN 判定 DN 死亡的超时时长 = 2 ×
<code>dfs.heartbeat.recheck-interval</code> + 10 ×
<code>dfs.heartbeat.interval</code></p>
<p>上面的参数可以在
<code>$HADOOP_HOME/share/hadoop/hdfs/hadoop-hdfs-3.3.6.jar</code> 里的
<code>hdfs-default.xml</code> 里查看。其参数可以被
<code>$HADOOP_HOME/etc/hadoop/hdfs-site.xml</code>
里设置的同名参数覆盖。</p>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
  </entry>
  <entry>
    <title>HD09 - HDFS 的 EditLog 和 FsImage 文件</title>
    <url>/blog//HD/09/</url>
    <content><![CDATA[<p>有两种二进制文件保证元数据的可靠性：</p>
<ul>
<li>EditLog：编辑日志，对 HDFS 进行操作的日志</li>
<li>FsImage：文件系统（元数据）镜像</li>
</ul>
<p>位于 NN 的 <code>$HADOOP_HOME/data/dfs/name/current</code></p>
<p>和 2NN 的
<code>$HADOOP_HOME/data/dfs/namesecondary/current</code></p>
<span id="more"></span>
<p>执行下面两个命令都不需要启动集群（dfs）。</p>
<h2 id="用-oev-命令转换-editlog-为-xml">用 oev 命令转换 EditLog 为
xml</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hdfs oev -p XML -i edits_0000000000000000564-0000000000000000613 -o ./edits_0000000000000000564-0000000000000000613.xml</span><br></pre></td></tr></table></figure>
<p>类似：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> standalone=<span class="string">&quot;yes&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">EDITS</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">EDITS_VERSION</span>&gt;</span>-66<span class="tag">&lt;/<span class="name">EDITS_VERSION</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">RECORD</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">OPCODE</span>&gt;</span>OP_START_LOG_SEGMENT<span class="tag">&lt;/<span class="name">OPCODE</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DATA</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">TXID</span>&gt;</span>564<span class="tag">&lt;/<span class="name">TXID</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">DATA</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">RECORD</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">RECORD</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">OPCODE</span>&gt;</span>OP_DELETE<span class="tag">&lt;/<span class="name">OPCODE</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DATA</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">TXID</span>&gt;</span>565<span class="tag">&lt;/<span class="name">TXID</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">LENGTH</span>&gt;</span>0<span class="tag">&lt;/<span class="name">LENGTH</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">PATH</span>&gt;</span>/琵琶行.txt<span class="tag">&lt;/<span class="name">PATH</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">TIMESTAMP</span>&gt;</span>1697199826498<span class="tag">&lt;/<span class="name">TIMESTAMP</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">RPC_CLIENTID</span>&gt;</span>1c72adfa-4559-4961-9db6-5a54dd302b69<span class="tag">&lt;/<span class="name">RPC_CLIENTID</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">RPC_CALLID</span>&gt;</span>3<span class="tag">&lt;/<span class="name">RPC_CALLID</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">DATA</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">RECORD</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">RECORD</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">OPCODE</span>&gt;</span>OP_MKDIR<span class="tag">&lt;/<span class="name">OPCODE</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DATA</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">TXID</span>&gt;</span>566<span class="tag">&lt;/<span class="name">TXID</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">LENGTH</span>&gt;</span>0<span class="tag">&lt;/<span class="name">LENGTH</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">INODEID</span>&gt;</span>16498<span class="tag">&lt;/<span class="name">INODEID</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">PATH</span>&gt;</span>/test<span class="tag">&lt;/<span class="name">PATH</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">TIMESTAMP</span>&gt;</span>1697199859837<span class="tag">&lt;/<span class="name">TIMESTAMP</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">PERMISSION_STATUS</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">USERNAME</span>&gt;</span>rc<span class="tag">&lt;/<span class="name">USERNAME</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">GROUPNAME</span>&gt;</span>supergroup<span class="tag">&lt;/<span class="name">GROUPNAME</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">MODE</span>&gt;</span>493<span class="tag">&lt;/<span class="name">MODE</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">PERMISSION_STATUS</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">DATA</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">RECORD</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--RECORD--&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">RECORD</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">OPCODE</span>&gt;</span>OP_END_LOG_SEGMENT<span class="tag">&lt;/<span class="name">OPCODE</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DATA</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">TXID</span>&gt;</span>613<span class="tag">&lt;/<span class="name">TXID</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">DATA</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">RECORD</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">EDITS</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="用-oiv-命令转换-fsimage-为-xml">用 oiv 命令转换 FsImage 为
xml</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hdfs oiv -p XML -i fsimage_0000000000000000613 -o ./fsimage_0000000000000000613.xml</span><br></pre></td></tr></table></figure>
<p>类似：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fsimage</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layoutVersion</span>&gt;</span>-66<span class="tag">&lt;/<span class="name">layoutVersion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">onDiskVersion</span>&gt;</span>1<span class="tag">&lt;/<span class="name">onDiskVersion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">oivRevision</span>&gt;</span>1be78238728da9266a4f88195058f08fd012bf9c<span class="tag">&lt;/<span class="name">oivRevision</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">NameSection</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">namespaceId</span>&gt;</span>1636112529<span class="tag">&lt;/<span class="name">namespaceId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">genstampV1</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">genstampV1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">genstampV2</span>&gt;</span>1085<span class="tag">&lt;/<span class="name">genstampV2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">genstampV1Limit</span>&gt;</span>0<span class="tag">&lt;/<span class="name">genstampV1Limit</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lastAllocatedBlockId</span>&gt;</span>1073741909<span class="tag">&lt;/<span class="name">lastAllocatedBlockId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">txid</span>&gt;</span>613<span class="tag">&lt;/<span class="name">txid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">NameSection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ErasureCodingSection</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--一些未启用的纠删码策略--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ErasureCodingSection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">INodeSection</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--文件与文件夹的元数据--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lastInodeId</span>&gt;</span>16509<span class="tag">&lt;/<span class="name">lastInodeId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">numInodes</span>&gt;</span>61<span class="tag">&lt;/<span class="name">numInodes</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">inode</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>16386<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>DIRECTORY<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>wcinput<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mtime</span>&gt;</span>1694187482432<span class="tag">&lt;/<span class="name">mtime</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">permission</span>&gt;</span>rc:supergroup:0755<span class="tag">&lt;/<span class="name">permission</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nsquota</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">nsquota</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dsquota</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">dsquota</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">inode</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--inode--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">INodeSection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">INodeReferenceSection</span>&gt;</span><span class="tag">&lt;/<span class="name">INodeReferenceSection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">SnapshotSection</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshotCounter</span>&gt;</span>0<span class="tag">&lt;/<span class="name">snapshotCounter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">numSnapshots</span>&gt;</span>0<span class="tag">&lt;/<span class="name">numSnapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">SnapshotSection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">INodeDirectorySection</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--文件夹与文件的层次关系--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">parent</span>&gt;</span>16385<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">child</span>&gt;</span>16458<span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">child</span>&gt;</span>16505<span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">child</span>&gt;</span>16387<span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">child</span>&gt;</span>16386<span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">child</span>&gt;</span>16439<span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--directory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">INodeDirectorySection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">FileUnderConstructionSection</span>&gt;</span><span class="tag">&lt;/<span class="name">FileUnderConstructionSection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">SecretManagerSection</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">currentId</span>&gt;</span>0<span class="tag">&lt;/<span class="name">currentId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tokenSequenceNumber</span>&gt;</span>0<span class="tag">&lt;/<span class="name">tokenSequenceNumber</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">numDelegationKeys</span>&gt;</span>0<span class="tag">&lt;/<span class="name">numDelegationKeys</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">numTokens</span>&gt;</span>0<span class="tag">&lt;/<span class="name">numTokens</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">SecretManagerSection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">CacheManagerSection</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nextDirectiveId</span>&gt;</span>1<span class="tag">&lt;/<span class="name">nextDirectiveId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">numDirectives</span>&gt;</span>0<span class="tag">&lt;/<span class="name">numDirectives</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">numPools</span>&gt;</span>0<span class="tag">&lt;/<span class="name">numPools</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">CacheManagerSection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fsimage</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
  </entry>
  <entry>
    <title>HD0A - MapReduce 概述</title>
    <url>/blog//HD/0A/</url>
    <content><![CDATA[<p>MR 是一个分布式计算程序的编程框架，是用户开发基于 Hadoop
的数据分析应用程序的核心框架。</p>
<p>MR
的核心功能是将用户编写的业务逻辑代码和自带的默认组件整合成一个完整的分布式计算程序，并将其并发运行在一个
Hadoop 集群上。</p>
<span id="more"></span>
<h2 id="mr-的优点">MR 的优点</h2>
<ul>
<li>易于编写一个分布式计算程序【像“编写一个串行程序一样简单”，MR
的接口都写好了，相当于库函数，或者相当于 C 对汇编的封装】</li>
<li>良好的扩展性【硬件性能不够？直接加节点】</li>
<li>高容错性【节点挂了？甩给其他节点接盘】</li>
<li>适合 PB 级以上数据的离线处理【TB 的后一个数量级，一百万
GB】【这个站点的资源文件，加上 md 文件、Hexo 框架的源码和 Git
历史记录才刚过 60MB】</li>
</ul>
<h2 id="mr-的缺点">MR 的缺点</h2>
<ul>
<li>不擅长实时计算，返回结果的速度相对慢【高射炮打蚊子】</li>
<li>不擅长流式计算【不能在消化的同时吃东西】</li>
<li>不擅长有向无环图（DAG）计算【多个应用程序之间相联系，前一个程序的输出是后一个程序的输入，这时
MR 不是不能计算，而是会造成大量的磁盘 I/O。因为每个 MR
运行完之后都会写磁盘】</li>
</ul>
<h2 id="mr-的核心思想">MR 的核心思想</h2>
<p>映射（map）和规约（reduce）。分而治之。</p>
<p>MR 编程模型包含且只包含一个 map 阶段和一个 reduce 阶段。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> /------[]------\</span><br><span class="line">&lt;-------[]-------&gt;</span><br><span class="line"> \------[]------/</span><br></pre></td></tr></table></figure>
<p>还有一个 MRAppMaster 进程，负责 MR 的调度。</p>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
  </entry>
  <entry>
    <title>JA00 - 准备</title>
    <url>/blog//JA/00/</url>
    <content><![CDATA[<ul>
<li>Windows 10 + VSCode 环境配置</li>
<li><code>Hello.java</code></li>
</ul>
<span id="more"></span>
<h2 id="windows-10-vscode-环境配置">Windows 10 + VSCode 环境配置</h2>
<ol type="1">
<li>VSCode 里安装 <code>Extension Pack for Java</code> 扩展。
它会提示你下载安装 JDK。安。</li>
<li>设置环境变量
<ul>
<li><code>JAVA_HOME</code>：JDK 安装路径</li>
<li><code>PATH</code>：<code>%JAVA_HOME%\bin</code></li>
</ul></li>
<li>终端输入： <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure> 输出： <figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">openjdk version &quot;17.0.8.1&quot; 2023-08-24</span><br><span class="line">OpenJDK Runtime Environment Temurin-17.0.8.1+1 (build 17.0.8.1+1)</span><br><span class="line">OpenJDK 64-Bit Server VM Temurin-17.0.8.1+1 (build 17.0.8.1+1, mixed mode, sharing)</span><br></pre></td></tr></table></figure></li>
<li>VSCode
设置搜<code>java.jdt.ls.java.home</code>，在<code>settings.json</code>里改成
JDK 安装路径。</li>
</ol>
<p>安装的是 17，但是版本太高了（<a
href="https://cwiki.apache.org/confluence/display/HADOOP/Hadoop+Java+Versions">Hadoop
支持的 Java 版本</a>），Hadoop 跟不上。所以又安装了 8 的。</p>
<p>VSCode -&gt; <code>Ctrl + Shift + P</code> -&gt; Java: Install New
JDK</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openjdk version &quot;1.8.0_382&quot;</span><br><span class="line">OpenJDK Runtime Environment (Temurin)(build 1.8.0_382-b05)</span><br><span class="line">OpenJDK 64-Bit Server VM (Temurin)(build 25.382-b05, mixed mode)</span><br></pre></td></tr></table></figure>
<p>然后改环境变量和配置文件。</p>
<h2 id="hello.java">Hello.java</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>按钮运行，或者终端：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">java Hello.java</span><br></pre></td></tr></table></figure>
<p>或者终端：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">javac Hello.java</span><br><span class="line">java Hello</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>MD00 - 准备与基本操作</title>
    <url>/blog//MD/00/</url>
    <content><![CDATA[<ul>
<li>Windows 10 环境配置</li>
<li>启动脚本</li>
</ul>
<span id="more"></span>
<h2 id="windows-10-环境配置">Windows 10 环境配置</h2>
<ol type="1">
<li><a href="https://www.mongodb.com/try/download/community">下载
MongoDB</a>，我下载的是<code>7.0.0 (current)</code>的<code>zip</code>格式。</li>
<li>解压，右键用 PowerShell 运行<code>Install-Compass.ps1</code>，安装
GUI。 默认会安装到 C 盘，安装完后手动移到 D 盘。</li>
<li>建数据库文件夹，建一个空日志<code>test.log</code>。</li>
<li>启动 <code>mongod</code> <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mongod --dbpath [数据库文件夹路径] --logpath [日志文件路径] --logappend</span><br></pre></td></tr></table></figure></li>
<li>用 MongoDBCompass 连接。</li>
</ol>
<h2 id="启动脚本">启动脚本</h2>
<p><code>mo.bat</code></p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> MONGODB_HOME=D:\ProgramData\mongodb-win32-x86_64-windows-<span class="number">7</span>.<span class="number">0</span>.<span class="number">0</span>\</span><br><span class="line"><span class="built_in">cd</span> /d <span class="variable">%MONGODB_HOME%</span>\bin</span><br><span class="line"><span class="keyword">call</span> mongod --dbpath <span class="variable">%MONGODB_HOME%</span>\db^</span><br><span class="line">           --logpath <span class="variable">%MONGODB_HOME%</span>\test.log --logappend</span><br></pre></td></tr></table></figure>
<p>脚本会 <code>call mongod</code>，停止则断开连接。</p>
<h2 id="基本操作">基本操作</h2>
<h3 id="展示所有数据库名">展示所有数据库名</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">show dbs</span><br></pre></td></tr></table></figure>
<h3 id="创建切换数据库">创建/切换数据库</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">use dbname</span><br></pre></td></tr></table></figure>
<h3 id="删除某个数据库">删除某个数据库</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">use dbname</span><br><span class="line">db.<span class="title function_">dropDatabase</span>()</span><br></pre></td></tr></table></figure>
<h3 id="向数据库里加集合">向数据库里加集合</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="title function_">createCollection</span>(<span class="string">&quot;c1&quot;</span>);</span><br><span class="line">db.<span class="title function_">createCollection</span>(<span class="string">&quot;c2&quot;</span>);</span><br><span class="line">db.<span class="title function_">createCollection</span>(<span class="string">&quot;c3&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="删除数据库的某个集合">删除数据库的某个集合</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">c1</span>.<span class="title function_">drop</span>();</span><br></pre></td></tr></table></figure>
<h3 id="展示数据库里的所有集合名">展示数据库里的所有集合名</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">show collections</span><br></pre></td></tr></table></figure>
<h3 id="向集合里加文档">向集合里加文档</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">c1</span>.<span class="title function_">insertOne</span>(&#123; <span class="attr">aaa</span>: <span class="number">123</span> &#125;);</span><br><span class="line">db.<span class="property">c1</span>.<span class="title function_">insertMany</span>([</span><br><span class="line">  &#123; <span class="attr">aaa</span>: <span class="number">123</span>, <span class="attr">bbb</span>: <span class="number">456</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">aaa</span>: <span class="number">123</span>, <span class="attr">ccc</span>: <span class="number">789</span> &#125;,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>
<h3 id="查询集合里的所有文档">查询集合里的所有文档</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">c1</span>.<span class="title function_">find</span>();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
  </entry>
  <entry>
    <title>JA01 - 问答</title>
    <url>/blog//JA/01/</url>
    <content><![CDATA[<p>一些问题与回答</p>
<span id="more"></span>
<h2
id="main函数不加static可以吗"><code>main</code>函数不加<code>static</code>可以吗？</h2>
<p>不行。程序启动时实例还没有被创建，需要通过类名调用静态方法。</p>
<h2
id="当类名和文件名不一致时代码检查器会提示修改那么.java文件里只能写一个类吗">当类名和文件名不一致时，代码检查器会提示修改。那么<code>.java</code>文件里只能写一个类吗？</h2>
<p>只能写一个与文件名相同的公共类。其他的类不加<code>public</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test0</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;456&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Test0.fun();</span><br><span class="line">        <span class="type">Test1</span> <span class="variable">test1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test1</span>();</span><br><span class="line">        test1.fun();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="怎么获取键盘输入">怎么获取键盘输入？</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;<span class="comment">//注意要加分号</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Echo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个 String 对象</span></span><br><span class="line">        String str;</span><br><span class="line">        <span class="comment">// 创建一个 Scanner 对象，传参是标准输入流对象</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">// 读取一行，返回String</span></span><br><span class="line">        str = scan.nextLine();</span><br><span class="line">        <span class="comment">// println() 换行，print() 不换行</span></span><br><span class="line">        System.out.print(str);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        System.out.print(str);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        <span class="comment">// 别忘了关闭</span></span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="怎么读写文本文件">怎么读写文本文件？</h2>
<p>Java：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;text.txt&quot;</span>);</span><br><span class="line">        <span class="type">int</span> ch;</span><br><span class="line">        <span class="keyword">while</span> ((ch = reader.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print((<span class="type">char</span>) ch);</span><br><span class="line">        &#125;</span><br><span class="line">        reader.close();</span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;text.txt&quot;</span>);</span><br><span class="line">        writer.write(<span class="string">&quot;字符串&quot;</span>);</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对比 Python：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">input_file_name = <span class="string">&quot;input.txt&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(input_file_name, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> input_file:</span><br><span class="line">    content = input_file.readlines()</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">output_file_name = <span class="string">&quot;output.txt&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(output_file_name, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> output_file:</span><br><span class="line">    output_file.write(<span class="string">&quot;啊啊啊&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="和-cc的运算符有什么不同">和 C/C++的运算符有什么不同？</h2>
<p>先射箭后画靶：</p>
<ul>
<li><p>C/C++/Java 在对整型变量右移 <code>&gt;&gt;</code> 时：</p>
<ul>
<li>正整数前面全补 <code>0</code></li>
<li>负整数前面全补 <code>1</code></li>
<li>无符号整数前面全补 <code>0</code>（Java 没有无符号整数）</li>
<li>作用相当于除以 2</li>
</ul></li>
<li><p>Java 多了一个无符号右移
<code>&gt;&gt;&gt;</code>，不管你整型变量是正是负，前面都直接补零。</p></li>
</ul>
<p>在 Java 中，没有<code>unsigned</code>关键字。</p>
<p>进一步：</p>
<h2 id="java-中的基本数据类型">Java 中的基本数据类型？</h2>
<h3 id="布尔-boolean">布尔 <code>boolean</code></h3>
<p>值为 <code>true</code> 或者
<code>false</code>。可以直接用，占一个字节。</p>
<p>写 <code>if(3 == true)</code>
时会报错，数据类型不同，不能直接比较。</p>
<ul>
<li>在 C 的 <code>&lt;stdbool.h&gt;</code> 中被 <code>#define</code>
了为 <code>1</code> 和 <code>0</code>。
<ul>
<li>写 <code>if(3 == true)</code> 时会跳过分支。</li>
</ul></li>
<li>C++ 同 C，但是不用引头文件，可以直接用。</li>
<li>在 Python 中是首字母大写的，也相当于 <code>0</code> 和
<code>1</code>，但是数据类型不同。
<ul>
<li>写 <code>if(3 == True)</code> 时会按 <code>1</code> 比较。</li>
<li>写 <code>if(3 is True)</code> 时会报错。</li>
</ul></li>
<li>在 JS 中也相当于 <code>0</code> 和
<code>1</code>，但是数据类型不同。
<ul>
<li>写 <code>if(1 == true)</code> 时会执行分支。</li>
<li>写 <code>if(1 === true)</code> 时会跳过分支。</li>
</ul></li>
</ul>
<h3 id="字符-char">字符 <code>char</code></h3>
<p>无符号的两个字节。在 C/C++ 里是一个字节。</p>
<h3 id="整型都是有符号的">整型（都是有符号的）</h3>
<ul>
<li><code>byte</code>：一个字节</li>
<li><code>short</code>：两个字节</li>
<li><code>int</code>：四个字节</li>
<li><code>long</code>：八个字节</li>
</ul>
<h3 id="浮点都是有符号的">浮点（都是有符号的）</h3>
<p>和 C/C++ 一样。</p>
<ul>
<li><code>float</code>：四个字节</li>
<li><code>double</code>：八个字节</li>
</ul>
<h2 id="茴字有几种写法">茴字有几种写法？</h2>
<p>Java 和 Python、JS
等一样，都可以在输出函数里直接写表达式（不用格式字符串的情况下）。以及
Java 也可以格式化输出。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>);<span class="comment">// 98</span></span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span> + <span class="number">1</span>);<span class="comment">// a1</span></span><br><span class="line">        <span class="type">byte</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>, j = <span class="number">3</span>;</span><br><span class="line">        <span class="comment">// 没人会这么写</span></span><br><span class="line">        System.out.println(++i + i++);<span class="comment">// 8</span></span><br><span class="line">        System.out.println(j++ + ++j);<span class="comment">// 8</span></span><br><span class="line">        <span class="comment">// Java 也有 printf()</span></span><br><span class="line">        System.out.printf(<span class="string">&quot;%d, %d&quot;</span>, i, j);<span class="comment">// 5, 5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="java-数组怎么定义">Java 数组怎么定义？</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> arr1[];</span><br><span class="line"><span class="type">int</span>[] arr2;<span class="comment">// 效果一样</span></span><br></pre></td></tr></table></figure>
<p>注意在定义时，<code>[]</code> 里不能加数字。</p>
<p>使用 <code>new</code> 时则必须加。</p>
<h2 id="怎么向数组里加元素">怎么向数组里加元素？</h2>
<p>Array 不能动态加元素，ArrayList 可以。</p>
<p>对于 Array，可以先初始化，再赋值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">arrayLength</span> <span class="operator">=</span> arr.length;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrayLength; i++) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">randomNum</span> <span class="operator">=</span> (<span class="type">int</span>) (<span class="number">100</span> * Math.random());</span><br><span class="line">    arr[i] = randomNum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意，如果用 <code>for-each</code> 循环是给数组元素赋不了值的。</p>
<h2 id="怎么打印数组">怎么打印数组？</h2>
<p>除了 <code>for</code> 循环之外：</p>
<h3 id="for-each-循环"><code>for-each</code> 循环</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> element : arr) &#123;</span><br><span class="line">    System.out.print(element + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="arrays.tostring">Arrays.toString()</h3>
<p>需要 <code>import java.util.Arrays;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(Arrays.toString(arr));</span><br></pre></td></tr></table></figure>
<h2 id="怎么复制数组">怎么复制数组？</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] arr1 = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line"><span class="type">int</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">System.arraycopy(arr1, <span class="number">0</span>, arr2, <span class="number">0</span>, arr1.length);</span><br></pre></td></tr></table></figure>
<p><code>System.arraycopy()</code>
五个参数分别为：源数组、源数组的起始位置、目标数组、目标数组的起始位置、要复制的元素数量。</p>
<h2
id="怎么根据值查找数组中某元素的索引">怎么根据值查找数组中某元素的索引？</h2>
<p>二分查找（返回的不一定是第一个）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Arrays.binarySearch(arr, <span class="number">3</span>);</span><br><span class="line">System.out.println(index);<span class="comment">// 5</span></span><br></pre></td></tr></table></figure>
<p>如果用于 String 数组，是有风险的。因为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> java.util.Arrays.binarySearch(Object[] a, Object key)</span><br></pre></td></tr></table></figure>
<p>这个方法调用了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> java.util.Arrays.binarySearch0(Object[] a, <span class="type">int</span> fromIndex, <span class="type">int</span> toIndex, Object key)</span><br></pre></td></tr></table></figure>
<p>这个方法中使用的不是 <code>java.lang.String.equals()</code>，而是
<code>java.util.Calendar.compareTo()</code>。后者不能用于判断字符串的内容是否相等。</p>
<h2
id="怎么判断两个字符串内容是否相等">怎么判断两个字符串内容是否相等？</h2>
<p>用 <code>String.equals()</code>。</p>
<p><code>==</code> 运算符比较的是两对象的内存地址。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str0</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;<span class="comment">// str1 和 str2 共用一个内存地址，在字符串常量池内是同一个对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        System.out.println(str0 == str1);<span class="comment">// true</span></span><br><span class="line">        System.out.println(str1 == str2);<span class="comment">// false</span></span><br><span class="line">        System.out.println(str0.equals(str1) &amp;&amp; str1.equals(str2));<span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可用 <code>System.identityHashCode()</code>
获取对象的标识哈希码，这是基于对象的内存地址计算的。</p>
<p><code>boolean java.lang.String.equals(Object anObject)</code>的源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Stable</span></span><br><span class="line"><span class="comment">// String 类的成员，用于存放字符串的各个字符</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">byte</span>[] value;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object anObject)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> == anObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">// 可以看到这个方法也是先直接用 `==` 判断的</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (anObject <span class="keyword">instanceof</span> String aString)</span><br><span class="line">            &amp;&amp; (!COMPACT_STRINGS || <span class="built_in">this</span>.coder == aString.coder)</span><br><span class="line">            &amp;&amp; StringLatin1.equals(value, aString.value);<span class="comment">// 这里调用了另一个类的 equals() 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>boolean java.lang.StringLatin1.equals(byte[] value, byte[] other)</code>
的源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 内联候选方法</span></span><br><span class="line"><span class="meta">@IntrinsicCandidate</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(<span class="type">byte</span>[] value, <span class="type">byte</span>[] other)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (value.length == other.length) &#123;</span><br><span class="line">        <span class="comment">// 就是一个一个字符的比较</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; value.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (value[i] != other[i]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>MD01 - CRUD</title>
    <url>/blog//MD/01/</url>
    <content><![CDATA[<p>对某数据库某集合中的文档操作。</p>
<p>我这里键加不加引号效果一样。</p>
<p>CRUD 就是增删改查 Create、Read、Update、Delete。</p>
<p><a href="https://www.mongodb.com/docs/manual/crud/">官方文档</a></p>
<span id="more"></span>
<h2 id="查询">查询</h2>
<h3 id="包含一个多个键值对">包含一个/多个键值对</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">c1</span>.<span class="title function_">find</span>(&#123; <span class="attr">aaa</span>: <span class="number">123</span> &#125;);</span><br><span class="line">db.<span class="property">c1</span>.<span class="title function_">find</span>(&#123; <span class="attr">aaa</span>: <span class="number">123</span>, <span class="attr">bbb</span>: <span class="number">456</span> &#125;);</span><br></pre></td></tr></table></figure>
<p>应该大概也许和与操作符的效果一样：</p>
<ul>
<li><code>$and: []</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">c1</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line">  <span class="attr">$and</span>: [&#123; <span class="attr">aaa</span>: <span class="number">123</span> &#125;, &#123; <span class="attr">bbb</span>: <span class="number">456</span> &#125;],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="包含键值对列表中的一个多个">包含键值对列表中的一个/多个</h3>
<ul>
<li><code>$or: []</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">c1</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line">  <span class="attr">$or</span>: [&#123; <span class="attr">aaa</span>: <span class="number">123</span> &#125;, &#123; <span class="attr">bbb</span>: <span class="number">456</span> &#125;],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="某个键的值大于小于某个值">某个键的值大于/小于某个值</h3>
<ul>
<li><code>$gt:</code> 大于（greater than）</li>
<li><code>$lt:</code> 小于（less than）</li>
<li><code>$gte:</code> 大于等于（greater than or equal to）</li>
<li><code>$lte:</code> 小于等于（less than or equal to）</li>
<li><code>$ne:</code> 不等于（not equal to）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">c1</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line">  <span class="attr">aaa</span>: &#123; <span class="attr">$gt</span>: <span class="number">100</span> &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>可以和前面的套娃：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">c1</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line">  <span class="attr">$and</span>: [&#123; <span class="attr">aaa</span>: &#123; <span class="attr">$gt</span>: <span class="number">100</span> &#125; &#125;, &#123; <span class="attr">bbb</span>: &#123; <span class="attr">$lt</span>: <span class="number">500</span> &#125; &#125;],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="某个键的值在不在某个值列表内">某个键的值在/不在某个值列表内</h3>
<ul>
<li><code>$in: []</code> 在</li>
<li><code>$nin: []</code> 不在</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">c1</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line">  <span class="attr">aaa</span>: &#123; <span class="attr">$in</span>: [<span class="number">123</span>, <span class="number">456</span>] &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="正则匹配某个键的值">正则匹配某个键的值</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">c1</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line">  <span class="attr">aaa</span>: &#123; <span class="attr">$regex</span>: <span class="regexp">/abc/</span> &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="更新">更新</h2>
<h3 id="按-_id-查找一个文档并更新某个字段">按 <code>_id</code>
查找一个文档并更新某个字段</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">goodsbaseinf</span>.<span class="title function_">updateOne</span>(</span><br><span class="line">  &#123; <span class="attr">_id</span>: <span class="number">5</span> &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">$set</span>: &#123;</span><br><span class="line">      <span class="attr">item</span>: <span class="string">&quot;编程语言与程序设计&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
  </entry>
  <entry>
    <title>MD02 - 编写并运行脚本文件</title>
    <url>/blog//MD/02/</url>
    <content><![CDATA[<ul>
<li>在 MongoDBCompass 里内嵌的 <code>_MONGOSH</code> 里不能运行 js
文件。</li>
<li>可使用 MongoDB for VS Code 扩展。<a
href="https://www.mongodb.com/docs/mongodb-vscode/">文档</a></li>
</ul>
<p>前者适合执行简短的命令，后者适合批处理。</p>
<span id="more"></span>
<h2 id="用-vscode-连接数据库">用 VSCode 连接数据库</h2>
<ol type="1">
<li>VSCode 里安装 MongoDB for VS Code 扩展。在最左边活动栏会有一片
🍃。</li>
<li><a href="/blog/MD/00/#启动脚本">启动 mongod</a>。</li>
<li>在扩展里连接。</li>
</ol>
<h2 id="扩展配置">扩展配置</h2>
<ul>
<li>把 <code>Mdb: Confirm Run All</code> 取消勾选，这样每次 ▶️
时不用额外确认。</li>
</ul>
<h2 id="测试">测试</h2>
<ol type="1">
<li><p>🍃 -&gt; <code>Create New Playground</code>。</p></li>
<li><p>右上角 ▶️，会出现一个 <code>Playground Result</code>
窗口。</p></li>
<li><p>🍃 -&gt; <code>CONNECTIONS</code> -&gt; 主机名上右击
<code>REFRESH</code> 刷新。会多一个
<code>mongodbVSCodePlaygroundDB</code> 数据库。</p>
<p>这是由刚才那个脚本 <code>playground-1.mongodb.js</code>
创建的。</p></li>
<li><p>写一个后缀为 <strong><code>.mongodb.js</code></strong>
的文件。</p></li>
<li><p>打开文件后即可 ▶️。</p></li>
</ol>
<h2 id="示例">示例</h2>
<p><strong>注意</strong>：<code>Playground Result</code>
窗口只输出了最后一次操作的结果。</p>
<p>如果一次进行多个操作，可以把每个操作的结果分别输出到控制台：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">collection0</span>.<span class="title function_">find</span>().<span class="title function_">forEach</span>(<span class="function">(<span class="params">doc</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(doc, <span class="literal">null</span>, <span class="number">2</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">db.<span class="property">collection1</span></span><br><span class="line">  .<span class="title function_">find</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: &#123; <span class="attr">$regex</span>: <span class="regexp">/abc/</span> &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">forEach</span>(<span class="function">(<span class="params">doc</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(doc, <span class="literal">null</span>, <span class="number">2</span>));</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<h3 id="向集合里插入文档">向集合里插入文档</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">use</span>(<span class="string">&quot;gooddb&quot;</span>);</span><br><span class="line"></span><br><span class="line">db.<span class="title function_">createCollection</span>(<span class="string">&quot;goodsbaseinf&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> goodsbaseinf = db.<span class="title function_">getCollection</span>(<span class="string">&quot;goodsbaseinf&quot;</span>);</span><br><span class="line"></span><br><span class="line">goodsbaseinf.<span class="title function_">insertOne</span>(&#123;</span><br><span class="line">  <span class="attr">_id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;&lt;c语言&gt;&quot;</span>,</span><br><span class="line">  <span class="attr">bookprice</span>: <span class="number">33.2</span>,</span><br><span class="line">  <span class="attr">adddate</span>: <span class="number">2006</span>,</span><br><span class="line">  <span class="attr">allow</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">baseinf</span>: &#123; <span class="attr">ISBN</span>: <span class="number">183838388</span>, <span class="attr">press</span>: <span class="string">&quot;清华大学出版社&quot;</span> &#125;,</span><br><span class="line">  <span class="attr">tags</span>: [<span class="string">&quot;good&quot;</span>, <span class="string">&quot;book&quot;</span>, <span class="string">&quot;it&quot;</span>, <span class="string">&quot;Program&quot;</span>],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">goodsbaseinf.<span class="title function_">insertMany</span>([</span><br><span class="line">  &#123; <span class="attr">_id</span>: <span class="number">2</span>, <span class="attr">item</span>: <span class="string">&quot;小学生教材&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;《小学一年级语文（上册）》&quot;</span>, <span class="attr">price</span>: <span class="number">12</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">_id</span>: <span class="number">3</span>, <span class="attr">item</span>: <span class="string">&quot;初中生教材&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;《初中一年级语文（上册）》&quot;</span>, <span class="attr">price</span>: <span class="number">15</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">_id</span>: <span class="number">4</span>, <span class="attr">item</span>: <span class="string">&quot;高中生教材&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;《高中一年级语文（上册）》&quot;</span>, <span class="attr">price</span>: <span class="number">20</span> &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">_id</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">item</span>: <span class="string">&quot;外语教材&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;《英语全解\nABC（五年级上）》&quot;</span>,</span><br><span class="line">    <span class="attr">price</span>: <span class="number">30</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>
<h3 id="查询集合里的文档">查询集合里的文档</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">use</span>(<span class="string">&quot;gooddb&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> goodsbaseinf = db.<span class="title function_">getCollection</span>(<span class="string">&quot;goodsbaseinf&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;查看集合 goodsbaseinf 中的所有文档：&quot;</span>);</span><br><span class="line">goodsbaseinf.<span class="title function_">find</span>().<span class="title function_">forEach</span>(<span class="function">(<span class="params">doc</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(doc, <span class="literal">null</span>, <span class="number">2</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;查看集合 goodsbaseinf 中 name 为小学一年级语文（上册）的文档：&quot;</span>);</span><br><span class="line">goodsbaseinf.<span class="title function_">find</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;《小学一年级语文（上册）》&quot;</span> &#125;).<span class="title function_">forEach</span>(<span class="function">(<span class="params">doc</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(doc, <span class="literal">null</span>, <span class="number">2</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;查看集合 goodsbaseinf 中的中小学生教材：&quot;</span>);</span><br><span class="line">goodsbaseinf</span><br><span class="line">  .<span class="title function_">find</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: &#123; <span class="attr">$regex</span>: <span class="regexp">/年级/</span> &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">forEach</span>(<span class="function">(<span class="params">doc</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(doc, <span class="literal">null</span>, <span class="number">2</span>));</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n&quot;</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
  </entry>
  <entry>
    <title>JA02 - Maven 环境配置</title>
    <url>/blog//JA/02/</url>
    <content><![CDATA[<p>Maven（行家）是一个工具，用于构建和管理 Java 工程。</p>
<ul>
<li>构建，就是把生菜做成熟菜。</li>
<li>管理，就是指出使用了哪些别人种的菜。</li>
</ul>
<p>Windows 10 + VSCode 环境配置。</p>
<span id="more"></span>
<h2 id="下载-maven">下载 Maven</h2>
<p><a href="https://dlcdn.apache.org/maven/">下载地址</a></p>
<p>我下载的是 <code>apache-maven-3.9.4-bin.zip</code></p>
<h2 id="配置环境变量">配置环境变量</h2>
<ul>
<li><code>MAVEN_HOME</code>：解压后的目录</li>
<li><code>Path</code>：<code>%MAVEN_HOME%\bin</code></li>
</ul>
<h2 id="配置-maven_homeconfsettings.xml">配置
<code>%MAVEN_HOME%\conf\settings.xml</code></h2>
<ul>
<li><p>本地仓库路径，存放下载的 jar 包：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\ProgramData\maven-local-repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>镜像仓库源（<a
href="https://developer.aliyun.com/mvn/guide">阿里云</a>），从这里下载到本地：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="配置-vscode-扩展">配置 VSCode 扩展</h2>
<p><code>@ext:vscjava.vscode-maven</code>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;maven.settingsFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\ProgramData\\apache-maven-3.9.4\\conf\\settings.xml&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;maven.executable.path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\ProgramData\\apache-maven-3.9.4\\bin\\mvn.cmd&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;maven.executable.preferMavenWrapper&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;java.configuration.maven.globalSettings&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\ProgramData\\apache-maven-3.9.4\\conf\\settings.xml&quot;</span></span><br></pre></td></tr></table></figure>
<p>MavenWrapper 先不用。</p>
<h2 id="尝试创建一个项目">尝试创建一个项目</h2>
<ol type="1">
<li><p>在 VSCode 的资源管理器空白处右键 -&gt; 从 Maven
原型创建新项目。</p></li>
<li><p>选择
<code>maven-archetype-quickstart</code>。（archetype：原型）</p></li>
<li><p>选择示例项目版本（当前最新是 1.4）。</p></li>
<li><p>输入项目的 <code>groupId</code>，类似包名。比如
<code>com.example</code>。</p></li>
<li><p>输入项目的
<code>artfactId</code>（artfact：人工制品），就是项目名。比如
<code>demo</code>。</p></li>
<li><p>选择项目的父文件夹，Maven 会在这个文件夹里建一个与
<code>artfactId</code> 同名的文件夹，用于保存工程文件。</p></li>
<li><p>▶️</p></li>
</ol>
<p>VSCode 会开始执行命令：</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">&quot;<span class="variable">%MAVEN_HOME%</span>\bin\mvn.<span class="built_in">cmd</span>&quot;^</span><br><span class="line"><span class="function">    org.apache.maven.plugins:<span class="title">maven</span>-<span class="title">archetype</span>-<span class="title">plugin</span>:3.1.2:<span class="title">generate</span>^</span></span><br><span class="line"><span class="function">        -<span class="title">DarchetypeArtifactId</span>=&quot;<span class="title">maven</span>-<span class="title">archetype</span>-<span class="title">quickstart</span>&quot;^</span></span><br><span class="line"><span class="function">        -<span class="title">DarchetypeGroupId</span>=&quot;<span class="title">org.apache.maven.archetypes</span>&quot;^</span></span><br><span class="line"><span class="function">        -<span class="title">DarchetypeVersion</span>=&quot;1.4&quot;^</span></span><br><span class="line"><span class="function">        -<span class="title">DgroupId</span>=&quot;<span class="title">com.example</span>&quot;^</span></span><br><span class="line"><span class="function">        -<span class="title">DartifactId</span>=&quot;<span class="title">demo</span>&quot;^</span></span><br><span class="line"><span class="function">        -<span class="title">s</span> &quot;%<span class="title">MAVEN_HOME</span>%\<span class="title">conf</span>\<span class="title">settings.xml</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p>Maven 会开始下载一些文件，保存到 <code>localRepository</code>。</p>
<p>下载完之后：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">[INFO] Using property: groupId = com.example</span><br><span class="line">[INFO] Using property: artifactId = demo</span><br><span class="line">Define value for property &#x27;version&#x27; 1.0-SNAPSHOT: :</span><br></pre></td></tr></table></figure>
<p>让你输入一个版本号。直接回车：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">[INFO] Using property: package = com.example</span><br><span class="line">Confirm properties configuration:</span><br><span class="line">groupId: com.example</span><br><span class="line">artifactId: demo</span><br><span class="line">version: 1.0-SNAPSHOT</span><br><span class="line">package: com.example</span><br><span class="line"> Y: :</span><br></pre></td></tr></table></figure>
<p>让你确认。回车。会输出 <code>BUILD SUCCESS</code> 和所用时间。</p>
<h2 id="demo-目录的结构">demo 目录的结构</h2>
<ul>
<li>src
<ul>
<li>main\java\com\example\App.java</li>
<li>test\java\com\example\AppTest.java</li>
</ul></li>
<li>target
<ul>
<li>classes\com\example\App.class</li>
<li>test-classes\com\example\AppTest.class</li>
</ul></li>
<li>pom.xml</li>
</ul>
<p>在 <code>AppTest.java</code> 里导入了 <code>junit</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertTrue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure>
<p>查看 <code>pom.xml</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ... --&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="测试运行">测试运行</h2>
<p>VSCode 会执行命令：</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="function">d: &amp;&amp; <span class="title">cd</span> <span class="title">d</span>:\<span class="title">school</span>\<span class="title">demo</span> &amp;&amp; <span class="title">cmd</span> /<span class="title">C</span> &quot;命令字符串&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">ProgramData</span>\<span class="title">Java</span>\<span class="title">jdk</span>-17.0.8.101-<span class="title">hotspot</span>\<span class="title">bin</span>\<span class="title">java.exe</span>^</span></span><br><span class="line"><span class="function">    -<span class="title">XX</span>:+<span class="title">ShowCodeDetailsInExceptionMessages</span>^</span></span><br><span class="line"><span class="function">    -<span class="title">cp</span> <span class="title">D</span>:\<span class="title">school</span>\<span class="title">demo</span>\<span class="title">target</span>\<span class="title">classes</span> <span class="title">com.example.App</span></span></span><br></pre></td></tr></table></figure>
<h2 id="测试调第三方库">测试调第三方库</h2>
<p><a href="https://github.com/alibaba/fastjson2">fastjson2</a></p>
<ol type="1">
<li><p>在 <code>pom.xml</code> 里的一对
<code>&lt;dependencies&gt;</code> 标签之间增加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.fastjson2<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.40<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后：</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">mvn install</span><br></pre></td></tr></table></figure>
<p>Maven 会下载依赖到本地。</p></li>
<li><p>修改 <code>App.java</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson2.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">JSONArray</span> <span class="variable">a</span> <span class="operator">=</span> JSON.parseArray(<span class="string">&quot;[1,2,3]&quot;</span>);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>适当修改<code>pom.xml</code>里的 JDK 版本。</p></li>
<li><p>▶️</p></li>
</ol>
<h2 id="pom.xml-示例">pom.xml 示例</h2>
<p>主要保证汉字编码是 UTF-8，还有把依赖和自己写的打包成了同一个
jar。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>task.hrf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javatask<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.fastjson2<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.40<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">classpathPrefix</span>&gt;</span>lib/<span class="tag">&lt;/<span class="name">classpathPrefix</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>task.hrf.Main<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>task.hrf.Main<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>MD03 - 聚合管道操作</title>
    <url>/blog//MD/03/</url>
    <content><![CDATA[<p>就是把多个操作组合到一起。</p>
<ul>
<li><a
href="https://www.mongodb.com/docs/manual/core/aggregation-pipeline/">官方文档</a></li>
<li><a
href="https://www.mongodb.com/docs/v7.0/reference/operator/aggregation-pipeline/">官方文档-操作符</a></li>
</ul>
<p><code>aggregate([])</code> 列表里可加多个
<code>&#123;$操作符&#125;</code>。</p>
<span id="more"></span>
<h2 id="按某个键的值排序输出">按某个键的值排序输出</h2>
<ul>
<li><code>$sort:&#123;&#125;</code></li>
</ul>
<p>按 "_id" 升序输出（-1 就是降序）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">bookorder</span>.<span class="title function_">aggregate</span>([&#123; <span class="attr">$sort</span>: &#123; <span class="attr">_id</span>: <span class="number">1</span> &#125; &#125;]);</span><br></pre></td></tr></table></figure>
<p>只是输出，并不会在原集合里排序。</p>
<p>对于汉字之类的大概是按 Unicode，而不是拼音。<a
href="https://symbl.cc/cn/">这个网站</a>可以查 Unicode。</p>
<h2 id="输出文档个数限制">输出文档个数限制</h2>
<ul>
<li><code>$limit:</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">bookorder</span>.<span class="title function_">aggregate</span>([&#123; <span class="attr">$sort</span>: &#123; <span class="attr">_id</span>: <span class="number">1</span> &#125; &#125;, &#123; <span class="attr">$limit</span>: <span class="number">2</span> &#125;]);</span><br></pre></td></tr></table></figure>
<h2 id="跳过对前-x-个文档的操作">跳过对前 x 个文档的操作</h2>
<ul>
<li><code>$skip:</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">bookorder</span>.<span class="title function_">aggregate</span>([&#123; <span class="attr">$sort</span>: &#123; <span class="attr">_id</span>: <span class="number">1</span> &#125; &#125;, &#123; <span class="attr">$skip</span>: <span class="number">3</span> &#125;, &#123; <span class="attr">$limit</span>: <span class="number">2</span> &#125;]);</span><br></pre></td></tr></table></figure>
<h2
id="按某个键分组对各个分组的某一字段求和">按某个键分组，对各个分组的某一字段求和</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">bookorder</span>.<span class="title function_">aggregate</span>([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">$group</span>: &#123;</span><br><span class="line">      <span class="attr">_id</span>: <span class="string">&quot;$publishingtime&quot;</span>,</span><br><span class="line">      <span class="attr">totalPrice</span>: &#123; <span class="attr">$sum</span>: <span class="string">&quot;$price&quot;</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>
<p>注意不要漏了 <code>$</code></p>
<p>对非数值类的求和为 0。</p>
<h2 id="分别进行两组操作">分别进行两组操作</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">goodsbaseinf</span>.<span class="title function_">aggregate</span>([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">$facet</span>: &#123;</span><br><span class="line">      <span class="attr">group1</span>: [</span><br><span class="line">        &#123; <span class="attr">$match</span>: &#123; <span class="attr">sales_vol</span>: &#123; <span class="attr">$lt</span>: <span class="number">50</span> &#125; &#125; &#125;,</span><br><span class="line">        &#123; <span class="attr">$sort</span>: &#123; <span class="attr">sales_vol</span>: -<span class="number">1</span> &#125; &#125;,</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">group2</span>: [</span><br><span class="line">        &#123; <span class="attr">$match</span>: &#123; <span class="attr">sale_vol</span>: &#123; <span class="attr">$lt</span>: <span class="number">50</span> &#125; &#125; &#125;,</span><br><span class="line">        &#123; <span class="attr">$sort</span>: &#123; <span class="attr">sale_vol</span>: -<span class="number">1</span> &#125; &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
  </entry>
  <entry>
    <title>MD04 - 在 Ubuntu 上安装 MongoDB 并部署副本集</title>
    <url>/blog//MD/04/</url>
    <content><![CDATA[<p>官方教程：</p>
<ul>
<li><a
href="https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-ubuntu/">在
Ubuntu 上安装</a></li>
<li><a
href="https://www.mongodb.com/docs/manual/tutorial/deploy-replica-set/">部署副本集</a></li>
</ul>
<span id="more"></span>
<h2 id="执行了以下几句命令">执行了以下几句命令</h2>
<p>分别在三台虚拟机上。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install gnupg curl</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://pgp.mongodb.com/server-7.0.asc | \</span><br><span class="line">   sudo gpg -o /usr/share/keyrings/mongodb-server-7.0.gpg \</span><br><span class="line">   --dearmor</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse&quot;</span> | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/mongodb-org-7.0.list</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y mongodb-org</span><br></pre></td></tr></table></figure>
<h2 id="绑定-ip">绑定 IP</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/mongod.conf</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line">  bindIp: localhost,ubuntu101</span><br></pre></td></tr></table></figure>
<p>绑定 IP 的后者是当前机器的主机名。</p>
<p>这样既可以在当前机器上使用 <code>mongosh</code>，又可以在物理机上用
MongoDB Compass 连接。</p>
<h2 id="启动-mongod停止重新启动查看状态">启动
mongod/停止/重新启动/查看状态</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl [start] [stop] [restart] [status] mongod</span><br></pre></td></tr></table></figure>
<h2 id="部署副本集">部署副本集</h2>
<p>副本集就是在多台机器上保存同一组数据的副本。</p>
<p>改配置文件并重启 mongod。三台机器取同一个副本集名字。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">replication:</span><br><span class="line">  replSetName: &quot;rs0&quot;</span><br></pre></td></tr></table></figure>
<p>只在一台机器的 mongosh 里，用下面的命令初始化：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">rs.<span class="title function_">initiate</span>(&#123;</span><br><span class="line">  <span class="attr">_id</span>: <span class="string">&quot;rs0&quot;</span>,</span><br><span class="line">  <span class="attr">members</span>: [</span><br><span class="line">    &#123; <span class="attr">_id</span>: <span class="number">101</span>, <span class="attr">host</span>: <span class="string">&quot;ubuntu101:27017&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">_id</span>: <span class="number">102</span>, <span class="attr">host</span>: <span class="string">&quot;ubuntu102:27017&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">_id</span>: <span class="number">103</span>, <span class="attr">host</span>: <span class="string">&quot;ubuntu103:27017&quot;</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>（这里没有设置仲裁节点）</p>
<p>查看节点状态：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">rs.<span class="title function_">status</span>();</span><br></pre></td></tr></table></figure>
<h3 id="如果出错了">如果出错了</h3>
<p>我不小心配置并初始化错了，然后不知道为何 MongoDB Compass
也连不上了。</p>
<p>简单的解决方法是把数据目录删了重建，重新配置。刚装上，所以没有删库成本：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop mongod &amp;&amp;</span><br><span class="line">sudo <span class="built_in">rm</span> -r /var/lib/mongodb &amp;&amp;</span><br><span class="line">sudo <span class="built_in">mkdir</span> /var/lib/mongodb &amp;&amp;</span><br><span class="line">sudo <span class="built_in">chown</span> -R mongodb:mongodb /var/lib/mongodb &amp;&amp;</span><br><span class="line">sudo systemctl start mongod</span><br></pre></td></tr></table></figure>
<h2 id="replication-methods">Replication Methods</h2>
<p><a
href="https://www.mongodb.com/docs/manual/reference/method/js-replication/">Replication
Methods</a></p>
<h2 id="另外">另外</h2>
<p>部署完副本集后只能在 primary 节点上 CRUD</p>
<p>还有一种【分片集群】，但是需要电脑性能很强。这里不部署。</p>
]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
  </entry>
  <entry>
    <title>VMware Workstation VMX 占用 CPU 高的解决记录</title>
    <url>/blog//UC/b0/</url>
    <content><![CDATA[<p>只是【在做完这些操作后的一段时间，没有再出现这个问题】</p>
<p>并不能保证【这些操作的每一步都是一定对的，或有用的】</p>
<p>因为我是通过搜索解决的，并不理解每一步操作背后的东西。</p>
<span id="more"></span>
<h2 id="操作">操作</h2>
<ol type="1">
<li>控制面板 -&gt; 程序 -&gt; 程序和功能 -&gt; 启用 Windows 功能 -&gt;
取消勾选【适用于 Linux 的 Windows 子系统】</li>
<li><code>Win + R</code> 打开 <code>services.msc</code>，停止【HV
主机服务】。</li>
<li>管理员身份在 cmd 里执行：</li>
</ol>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">bcdedit /<span class="built_in">set</span> hypervisorlaunchtype off</span><br></pre></td></tr></table></figure>
<ol start="4" type="1">
<li>没有管虚拟机，强行重启物理机。</li>
<li>打开 VMPlayer，发现 VM 是挂起的。播放之后报了一些关于 CPU
的错。</li>
<li>重启虚拟机，问题解决。</li>
</ol>
<h2 id="牢骚警告">牢骚警告</h2>
<p>可能的底层成因是 VM 和 Hiper-V 什么的不兼容。</p>
<p>可能的上层成因是在 Windows 更新后悄悄启用了 WSL 功能。</p>
<p>因为我记得在之前 WSL 功能是没有启动的（控制面板 -&gt; 程序 -&gt;
程序和功能 -&gt; 启用 Windows 功能 -&gt; 适用于 Linux 的 Windows
子系统），就今天出现了占用 CPU 高的情况（几乎占满）。</p>
<p>怎么注意到的呢，是今天第某次打开
VSCode，给了我一个消息弹窗，“检测到你已经启用 WSL，是否安装 WSL
扩展”。</p>
<p>也可能是我记错了，为什么今天第一次打开 VSCode 没有弹窗呢？</p>
<p>但是查看更新记录，昨天确实是更新过一次的。琐碎的事我是记不住的，所以才要写笔记。</p>
<p>还有前几天给 ubuntu
硬盘扩容了，这个应该不影响。关于扩容的笔记还得等到下次出问题，因为只要问题解决了，我就没有动力继续写了，基本概念（分区、卷组、逻辑卷等）都不想看，只是先试，试也只等到出问题的时候再试。</p>
<p>所以为了写这些笔记，我就必须找一个问题对立。就是任务驱动型作文。</p>
<p>为什么写笔记，一是我记性不好，二是我不想学习。</p>
]]></content>
      <categories>
        <category>无分类</category>
      </categories>
  </entry>
  <entry>
    <title>JSON</title>
    <url>/blog//UC/jn/</url>
    <content><![CDATA[<p>JSON（JavaScript Object Notation，JavaScript
对象表示法）是一种轻量级的数据交换格式，可以看成是字符串。</p>
<p>和 JavaScript 没什么关系，就像 JavaScript 和 Java
没什么关系一样。</p>
<span id="more"></span>
<h2 id="json-字符串-与-js-对象互转">JSON 字符串 与 JS 对象互转</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> jsonStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> jsObj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// JS 对象转 JSON 字符串</span></span><br><span class="line">jsonStr = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(jsObj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON 字符串转 JS 对象</span></span><br><span class="line">jsObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonStr);</span><br></pre></td></tr></table></figure>
<h2 id="json-字符串与-python-字典互转">JSON 字符串与 Python
字典互转</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">py_dic = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python 字典转 JSON 字符串</span></span><br><span class="line">json_str = json.dumps(py_dic)</span><br><span class="line"></span><br><span class="line"><span class="comment"># JSON 字符串转 Python 字典</span></span><br><span class="line">py_dic = json.loads(json_str)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>无分类</category>
      </categories>
  </entry>
  <entry>
    <title>在 Windows 中安装 Linux 虚拟机</title>
    <url>/blog//UC/wl/</url>
    <content><![CDATA[<ul>
<li>真机系统：Windows 10</li>
<li>使用软件：VMware Workstation 17.0.2 Player</li>
<li>虚拟机系统：Ubuntu 22.04.3 server</li>
</ul>
<span id="more"></span>
<p>也可以给硬盘分一个新的区，单独安装 Linux。不过没有必要。</p>
<h2 id="下载安装-vmware-workstation-player">下载安装 VMware Workstation
Player</h2>
<blockquote>
<p>使用 VMware Workstation Player 在 Windows 或 Linux PC
上轻松地将多个操作系统作为虚拟机运行。——网站介绍</p>
</blockquote>
<p><a
href="https://customerconnect.vmware.com/cn/downloads/info/slug/desktop_end_user_computing/vmware_workstation_player/">下载页面</a></p>
<p>这里下载的是当前最新版
<code>VMware Workstation 17.0.2 Player for Windows 64-bit Operating Systems</code>。</p>
<p>安装过程略（“增强型键盘驱动程序”不知道有什么用，先勾上）。</p>
<h2 id="下载-ubuntu-镜像">下载 Ubuntu 镜像</h2>
<p>是一种 Linux 发行版操作系统。</p>
<p><a
href="https://launchpad.net/ubuntu/+cdmirrors">下载页面（仓库集合）</a>，找到
China。</p>
<p>这里下载的是<code>ubuntu-22.04.3-live-server-amd64.iso</code>。</p>
<h2 id="在-vm-player-中新建虚拟机">在 VM Player 中新建虚拟机</h2>
<ol type="1">
<li><code>创建新虚拟机(N)</code></li>
<li><code>安装程序光盘文件(iso)(M)</code></li>
<li><code>浏览(R)</code>，选择下载的镜像文件，下一步。</li>
<li>设置虚拟机名称和位置，下一步。（我这里设置的是<code>Ubuntu100</code>和<code>D:\VMachines\Ubuntu100</code>）</li>
<li>指定磁盘容量，下一步。</li>
<li>自定义硬件（我这里把 CPU 改成了 4 核）。完成。</li>
</ol>
<p>你会看到：</p>
<p><img src="/blog/images/vm.png"></p>
<p>按回车开始安装 Ubuntu。</p>
<h2 id="安装-ubuntu">安装 Ubuntu</h2>
<ol type="1">
<li><p>语言选择，默认回车。</p></li>
<li><p>键盘布局选择，默认回车。</p></li>
<li><p>安装类型，默认回车。</p></li>
<li><p>网络，默认回车。</p></li>
<li><p>代理，默认回车。</p></li>
<li><p>配置镜像源，如果网络不好，改成</p>
<ul>
<li><p>清华源：<code>https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</code></p></li>
<li><p>南京源：<code>https://mirror.nju.edu.cn/ubuntu/</code></p></li>
<li><p>北邮源：<code>https://mirrors.bupt.edu.cn/ubuntu/</code></p>
<p>等均可。</p></li>
</ul></li>
<li><p>配置存储布局，默认选择<code>Done</code>，回车。</p></li>
<li><p>文件系统，<code>Done</code>，<code>Continue</code>。</p></li>
<li><p>设置用户名密码等。</p></li>
<li><p>是否升级到 Pro 版，默认不升级，<code>Continue</code>。</p></li>
<li><p>是否安装 OpenSSH server，先不安装。</p></li>
<li><p>是否安装其他东西，先都不选。</p></li>
<li><p>等待安装系统。</p></li>
<li><p>安装完成后，点击 VM Player
下方的“我已完成安装”，然后<code>Reboot Now</code>。</p></li>
</ol>
<p>报错不要紧，回车。</p>
<p>输入用户名和密码登录 Ubuntu。注意输入密码默认是不回显的。</p>
<h2 id="设置时区">设置时区</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo dpkg-reconfigure tzdata</span><br></pre></td></tr></table></figure>
<p>选择 <code>Asia</code></p>
<p>再选择 <code>Shanghai</code></p>
<h2 id="设置虚拟机与真机的共享文件夹">设置虚拟机与真机的共享文件夹</h2>
<p>VM
的虚拟磁盘文件不好直接打开。有时候需要在虚拟机和真机之间互传文件，可以通过共享文件夹。</p>
<p>（还可以通过<a href="https://wangdoc.com/ssh/">SSH</a>和<a
href="https://www.xshell.com/zh/free-for-home-school/">Xftp</a>）</p>
<p>在 VM Player 里打开虚拟机设置-&gt;选项-&gt;共享文件夹。</p>
<p>我这里设置在<code>D:\VMachines\Shared</code>。</p>
<p>在虚拟机里的位置是<code>/mnt/hgfs/Shared</code>。</p>
]]></content>
      <categories>
        <category>无分类</category>
      </categories>
  </entry>
  <entry>
    <title>把文章链接折腾得简单点</title>
    <url>/blog//UC/e1/</url>
    <content><![CDATA[<p>起因是我觉得文章链接太长了。</p>
<span id="more"></span>
<h2 id="需求">需求</h2>
<ol type="1">
<li>把 <code>hrfis.me/blog/2023/计网-02-概述-体系结构</code>，改成
<code>hrfis.me/blog/CN/02</code>。</li>
<li>删除 <code>/blog/archives/</code> 下多渲染的年份文件夹。</li>
</ol>
<h2 id="分析">分析</h2>
<p>笨办法，用 Python 的 <code>BeautifulSoup</code> 库，二次处理 Hexo
渲染出来的 html。</p>
<p>对于一个 <code>.md</code> 文件：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: CN02 - 概述 - 体系结构</span><br><span class="line">date: 2023-09-09 17:00:00</span><br><span class="line">categories: 计算机网络</span><br><span class="line"><span class="section">permalink: CN/02/</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> OSI 七层协议：参考模型</span><br><span class="line"><span class="bullet">-</span> TCP/IP 四层协议：即 Internet protocol suite，实际用到的</span><br><span class="line"><span class="bullet">-</span> 五层协议：教学模型</span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"></span><br><span class="line">（正文）</span><br></pre></td></tr></table></figure>
<p><code>permalink:</code>
告诉框架就按这个链接渲染。没有这个字段时，就按站点配置文件里设置的渲染（年/月/日/文章名之类的）。</p>
<p><code>categories:</code> 不会影响文章链接，只是在
<code>/blog/categories/</code>
里创了几个分类文件夹，每个分类文件夹里只有一个 <code>index.html</code>
（这样可以达到链接不显示 <code>.html</code> 的效果）。</p>
<ul>
<li>在 <code>/blog/categories/某分类/index.html</code>
里有一些属于此分类的文章链接。</li>
<li>而在 <code>/blog/categories/index.html</code> 里的链接都是指向
<code>/blog/categories/某分类/index.html</code> 的。</li>
</ul>
<p>所以：</p>
<ul>
<li>在每次渲染前，要设置文章的标题，分类和 <code>permalink</code>。</li>
<li>在每次渲染后：
<ol type="1">
<li>把 <code>/blog/categories/</code> 里各个子文件夹里的文件复制到
<code>/blog/缩写分类名/</code>。</li>
<li>删除 <code>/blog/categories/</code> 里各个子文件夹。</li>
<li>删除 <code>/blog/archives/</code> 里的多余的年份文件夹。</li>
<li>修改<strong>站点所有（可以跳转到
<code>/blog/categories/分类名/</code> 的）</strong> <code>.html</code>
文件里的链接为 <code>/blog/缩写分类名/</code>。</li>
</ol></li>
<li>在所有操作之前，且只用做一次的：
<ul>
<li>修改所有已经写的 <code>.md</code> 文件里的站内链接</li>
</ul></li>
</ul>
<h2 id="bm.py-在每次渲染完成之后运行"><code>bm.py</code>
在每次渲染完成之后运行：</h2>
<p>可以尝试用 <code>shutil.move()</code> 和
<code>os.path.join()</code>，这样可以跨平台。我用的时候出错了，但是想先解决这个问题，就没有去研究，所以用的是
f 字符串拼接地址，<code>os.system()</code>执行命令。</p>
<p>还有变量命名带了 <code>DICT</code>，不要学我。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote  <span class="comment"># 转换汉字为 &quot;%XX%YY%ZZ&quot; 的 url 类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ROOT = <span class="string">r&quot;D:\repo\blog&quot;</span>  <span class="comment"># 站点的本地根目录</span></span><br><span class="line">CATEGORIES = <span class="string">rf&quot;<span class="subst">&#123;ROOT&#125;</span>\categories&quot;</span>  <span class="comment"># 分类的目录</span></span><br><span class="line">YEARS = (<span class="number">2023</span>,)  <span class="comment"># 所有文章的年份</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分类的全名和缩写名</span></span><br><span class="line">FULL_NAMES = (</span><br><span class="line">    <span class="string">&quot;Android&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Hadoop&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Java&quot;</span>,</span><br><span class="line">    <span class="string">&quot;MongoDB&quot;</span>,</span><br><span class="line">    <span class="string">&quot;无分类&quot;</span>,</span><br><span class="line">    <span class="string">&quot;算法&quot;</span>,</span><br><span class="line">    <span class="string">&quot;计算机网络&quot;</span>,</span><br><span class="line">    <span class="string">&quot;计算机组成原理&quot;</span>,</span><br><span class="line">    <span class="string">&quot;音乐&quot;</span>,</span><br><span class="line">)</span><br><span class="line">ABBR_NAMES = (<span class="string">&quot;AO&quot;</span>, <span class="string">&quot;HD&quot;</span>, <span class="string">&quot;JA&quot;</span>, <span class="string">&quot;MD&quot;</span>, <span class="string">&quot;UC&quot;</span>, <span class="string">&quot;AL&quot;</span>, <span class="string">&quot;CN&quot;</span>, <span class="string">&quot;CO&quot;</span>, <span class="string">&quot;M&quot;</span>)</span><br><span class="line"><span class="comment"># 生成替换字典</span></span><br><span class="line">ABBR_DICT = <span class="built_in">dict</span>(<span class="built_in">zip</span>(FULL_NAMES, ABBR_NAMES))</span><br><span class="line">ABBR_DICT1 = &#123;quote(full_name): abbr_name <span class="keyword">for</span> full_name, abbr_name <span class="keyword">in</span> ABBR_DICT.items()&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">replace_link</span>(<span class="params">html_file_path: <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    把 &lt;a&gt; 标签里 href 的 &quot;categories/分类全名&quot; 替换成 &quot;分类缩写名&quot;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(html_file_path, <span class="string">&quot;r+&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        html_doc = file.read()</span><br><span class="line">        soup = BeautifulSoup(html_doc, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"></span><br><span class="line">        jump_links = soup.find_all(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> jump_links:</span><br><span class="line">            <span class="keyword">for</span> full_name, abbr_name <span class="keyword">in</span> ABBR_DICT1.items():</span><br><span class="line">                target = <span class="string">f&quot;categories/<span class="subst">&#123;full_name&#125;</span>&quot;</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">if</span> target <span class="keyword">in</span> a[<span class="string">&quot;href&quot;</span>]:</span><br><span class="line">                        a[<span class="string">&quot;href&quot;</span>] = a[<span class="string">&quot;href&quot;</span>].replace(target, abbr_name)</span><br><span class="line">                        <span class="built_in">print</span>(a[<span class="string">&quot;href&quot;</span>])</span><br><span class="line">                <span class="keyword">except</span> KeyError:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        file.seek(<span class="number">0</span>)</span><br><span class="line">        file.write(<span class="built_in">str</span>(soup))</span><br><span class="line">        file.truncate()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">replace_all_link</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    替换 ROOT 及其子目录下所有 html 文件里的链接</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(ROOT):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">if</span> file.endswith(<span class="string">&quot;.html&quot;</span>) <span class="keyword">and</span> file != <span class="string">&quot;404.html&quot;</span>:</span><br><span class="line">                file = <span class="string">rf&quot;<span class="subst">&#123;root&#125;</span>\&#123;file&#125;&quot;</span></span><br><span class="line">                replace_link(file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">move_categories</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    把 CATEGORIES/分类全名/ 里的文件移动（先复制再删除）到 CATEGORIES/分类缩写名/</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> full_name, abbr_name <span class="keyword">in</span> ABBR_DICT.items():</span><br><span class="line">        src_folder = <span class="string">rf&quot;<span class="subst">&#123;CATEGORIES&#125;</span>\&#123;full_name&#125;&quot;</span></span><br><span class="line">        dst_folder = <span class="string">rf&quot;<span class="subst">&#123;ROOT&#125;</span>\&#123;abbr_name&#125;&quot;</span></span><br><span class="line">        os.chdir(src_folder)</span><br><span class="line">        os.system(<span class="string">f&quot;xcopy . <span class="subst">&#123;dst_folder&#125;</span> /s&quot;</span>)</span><br><span class="line">        os.chdir(<span class="string">&quot;..&quot;</span>)</span><br><span class="line">        os.system(<span class="string">f&quot;rmdir /s /q <span class="subst">&#123;full_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">del_redundant_files</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    删除 ROOT/archives/ 下的年份文件夹</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    os.chdir(<span class="string">rf&quot;<span class="subst">&#123;ROOT&#125;</span>\archives&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> year <span class="keyword">in</span> YEARS:</span><br><span class="line">        os.system(<span class="string">f&quot;rmdir /s /q <span class="subst">&#123;year&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    move_categories()</span><br><span class="line">    del_redundant_files()</span><br><span class="line">    replace_all_link()</span><br></pre></td></tr></table></figure>
<p>把它加到<a href="/blog/UC/e0">之前写的</a> <code>bg.bat</code>
里：</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">:: 删除旧文件</span><br><span class="line"><span class="built_in">cd</span> /d d:\repo\blog</span><br><span class="line">git rm -r *</span><br><span class="line">:: 渲染新文件</span><br><span class="line"><span class="built_in">cd</span> ..\blog-source</span><br><span class="line"><span class="keyword">call</span> npx hexo g</span><br><span class="line">:: 转移新文件</span><br><span class="line"><span class="built_in">xcopy</span> public ..\blog /s /e</span><br><span class="line"><span class="keyword">call</span> npx hexo clean</span><br><span class="line">:: 二次处理文件</span><br><span class="line"><span class="built_in">cd</span> /d d:\scripts</span><br><span class="line"><span class="function">D:/<span class="title">ProgramData</span>/<span class="title">anaconda3</span>/<span class="title">Scripts</span>/<span class="title">activate</span></span></span><br><span class="line"><span class="function"><span class="title">call</span> <span class="title">python</span> <span class="title">bm.py</span></span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>无分类</category>
      </categories>
  </entry>
  <entry>
    <title>用 GIMP 让拍摄的纸上的字更清晰</title>
    <url>/blog//UC/sp/</url>
    <content><![CDATA[<ol start="0" type="1">
<li><a href="https://www.gimp.org/downloads/">GIMP</a></li>
<li>拍摄</li>
<li>裁剪</li>
<li><strong>彩色转黑白</strong></li>
<li><strong>白平衡</strong></li>
<li>导出图片</li>
</ol>
<span id="more"></span>
<ol type="1">
<li>首先要拍清晰，手不抖。
<img src="/blog/images/hwimg-source.jpg"></li>
<li>在拍完之后适当裁剪。</li>
<li><ul>
<li>GIMP -&gt; 文件 -&gt; 打开 -&gt; 选择图片</li>
<li>GIMP -&gt; 颜色 -&gt; 去色 -&gt; 彩色到灰度
<img src="/blog/images/hwimg-c2g.jpg"></li>
</ul></li>
</ol>
<p>看起来雾蒙蒙的，而且太白了。</p>
<ol start="4" type="1">
<li><p>白平衡</p>
<ul>
<li>GIMP -&gt; 颜色 -&gt; 自动 -&gt; 白平衡
<img src="/blog/images/hwimg-wb.jpg"> 看起来好多了。</li>
</ul></li>
<li><p>导出图片</p>
<ul>
<li>GIMP -&gt; 文件 -&gt; 导出为 -&gt; 文件名.jpg -&gt; 导出</li>
<li>其中，【保存 Exif 数据】、【保存 XMP 数据】、【保存 IPTC
数据】、【保存缩略图】、【保存色彩配置文件】都不用选。【高级选项】调了没看出明显区别，所以不用调。</li>
<li>导出质量设成 <code>10</code>
就行，质量越低文件越小，只要还能分辨出字就行。</li>
<li>我用 <code>10</code> 导出看起来和导出前没啥区别，但是用
<code>0</code> 导出就： <img src="/blog/images/hwimg-0.jpg">
有点恐怖。<del>但是更清楚了</del></li>
</ul></li>
</ol>
]]></content>
      <categories>
        <category>无分类</category>
      </categories>
  </entry>
  <entry>
    <title>用 browser-sync 实现在文件内容改变后立即刷新页面</title>
    <url>/blog//UC/bs/</url>
    <content><![CDATA[<p>起因是：</p>
<p>不管是直接打开 html
文件，还是用<code>python -m http.server 8000 --bind 127.0.0.1</code>，在修改保存
html 文件后浏览器都不能立马刷新。</p>
<span id="more"></span>
<ol type="1">
<li><p>安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install browser-sync</span><br></pre></td></tr></table></figure>
<p>安装到想作为服务器根目录的文件夹。以前觉得全局安装好，现在暂时觉得本地安装好。（据说用
Flask 也能实现立即刷新，用搜到的方法结果版本不匹配）</p></li>
<li><p>运行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npx browser-sync start --server --files <span class="string">&quot;.&quot;</span></span><br></pre></td></tr></table></figure>
<p><code>--files</code> 后指定要监视的文件。</p>
<p><code>.</code> 表示监视当前目录以及子目录下的所有文件。</p>
<p>可以改成 <code>*.html</code>，<code>public/*.*</code> 等。</p></li>
</ol>
<p>html
文件里至少得有一对<code>&lt;body&gt;</code>标签，要么没法自动刷新。</p>
<p>在没有修改文件内容，只 <code>Ctrl + S</code>
保存时也会刷新，在命令行会输出
<code>File event [change]</code>，只不过看不出来。</p>
<p>好像和直接通过浏览器来刷新不一样，因为我在选项卡上没看到加载动画。</p>
]]></content>
      <categories>
        <category>无分类</category>
      </categories>
  </entry>
  <entry>
    <title>社保</title>
    <url>/blog//UC/si/</url>
    <content><![CDATA[<ul>
<li>社保是什么</li>
<li>城镇职工社保和城乡居民社保
<ul>
<li>城镇职工社保-&gt;五险</li>
<li>城乡居民社保-&gt;两险</li>
</ul></li>
<li>法律依据是什么</li>
</ul>
<span id="more"></span>
<h2 id="社保是什么">社保是什么</h2>
<p>社保是社会保险。再往前问一步，保险是什么？</p>
<p>你交钱给一个<strong>组织</strong>，并和他们签订<strong>契约</strong>。当你出事且符合<strong>出事的条件</strong>时，这个组织会根据契约的条文返还你对应比例的钱。</p>
<table>
<thead>
<tr class="header">
<th>保险类型</th>
<th>组织</th>
<th>契约</th>
<th>出事的条件</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>商业保险</td>
<td>保险公司</td>
<td>保险合同、法律、法规</td>
<td>由契约规定</td>
</tr>
<tr class="even">
<td>社会保险</td>
<td>国家</td>
<td>法律、法规</td>
<td>由契约规定</td>
</tr>
</tbody>
</table>
<p>保险是一种投资，当然可以选择不交——如果你不担心：</p>
<ul>
<li>老了，没钱用</li>
<li>看病，没钱用</li>
<li>工作受伤，没钱用</li>
<li>工作没了，没钱用</li>
<li>生孩子，没钱用</li>
</ul>
<p>这五大问题的话。它们分别对应社保的：</p>
<ul>
<li>基本养老保险</li>
<li>基本医疗保险</li>
<li>工伤保险</li>
<li>失业保险</li>
<li>生育保险</li>
</ul>
<h2 id="城镇职工社保和城乡居民社保">城镇职工社保和城乡居民社保</h2>
<p>它们都属于社会保险。</p>
<ul>
<li>城镇职工社保，包括上面的五险。</li>
<li>城乡居民社保，只包括医疗保险和养老保险。</li>
</ul>
<table>
<colgroup>
<col style="width: 18%" />
<col style="width: 25%" />
<col style="width: 43%" />
<col style="width: 12%" />
</colgroup>
<thead>
<tr class="header">
<th>社会保险类型</th>
<th>谁交</th>
<th>交的前提</th>
<th>交的时间</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>职工社保</td>
<td>职工和雇佣者分担</td>
<td>职工与雇佣者签订<strong>劳动合同</strong></td>
<td>按月</td>
</tr>
</tbody>
</table>
<p>待补充</p>
<h2 id="法律依据">法律依据</h2>
<ul>
<li>《中华人民共和国宪法》（<a
href="https://flk.npc.gov.cn/detail2.html?MmM5MDlmZGQ2NzhiZjE3OTAxNjc4YmY1YTQ4MzAwNGI%3D">2018-03-11
施行版</a>）第二章第四十五条</li>
<li>《中华人民共和国劳动法》（<a
href="https://flk.npc.gov.cn/detail2.html?ZmY4MDgwODE2ZjEzNWY0NjAxNmYyMGYxNmVlMTE3Mzc%3D">2018-12-29
施行版</a>）第九章</li>
<li>《中华人民共和国社会保险法》（<a
href="https://flk.npc.gov.cn/detail2.html?ZmY4MDgwODE2ZjEzNWY0NjAxNmYyMTA5ODliOTE3OWE%3D">2018-12-29
施行版</a>）全文</li>
</ul>
]]></content>
      <categories>
        <category>无分类</category>
      </categories>
  </entry>
  <entry>
    <title>AL00 - 总纲</title>
    <url>/blog//AL/00/</url>
    <content><![CDATA[<p>总纲就是学别人的写法，给别人的代码加注释。</p>
<span id="more"></span>
<p>参考仓库：</p>
<ul>
<li><a href="https://github.com/zhaosaisai/sort.js">sort.js</a></li>
</ul>
<p>算法可视化：</p>
<ul>
<li><a href="https://visualgo.net/zh/">VisuAlgo</a></li>
</ul>
<h2 id="算法的测试">算法的测试</h2>
<p>从文件读取数据集，输出运行时间和运行结果。</p>
<h3 id="数据集">数据集</h3>
<p><code>dataSet.json</code> 类似：</p>
<p>里面还有更长的数组。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">[</span><span class="number">-1</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">[</span><span class="number">3</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">,</span> <span class="number">1</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">[</span><span class="number">-3</span><span class="punctuation">,</span> <span class="number">9999991247561</span><span class="punctuation">,</span> <span class="number">3456</span><span class="punctuation">,</span> <span class="number">-111</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">7</span><span class="punctuation">,</span> <span class="number">9</span><span class="punctuation">,</span> <span class="number">23</span><span class="punctuation">,</span> <span class="number">6</span><span class="punctuation">,</span> <span class="number">0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">[</span><span class="number">-1.23</span><span class="punctuation">,</span> <span class="number">3.14</span><span class="punctuation">,</span> <span class="number">3.14</span><span class="punctuation">,</span> <span class="number">2.71</span><span class="punctuation">,</span> <span class="number">0</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">-4</span><span class="punctuation">,</span> <span class="number">-2</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>
<h3 id="tester.mjs"><code>Tester.mjs</code></h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>获取正方教务系统里的成绩信息并对学分求和</title>
    <url>/blog//UC/d0/</url>
    <content><![CDATA[<p>关键点在于：</p>
<p><a
href="https://教务系统域名/cjcx/cjcx_cxDgXscj.html?doType=query&amp;gnmkdm=N100801&amp;su=学号">https://教务系统域名/cjcx/cjcx_cxDgXscj.html?doType=query&amp;gnmkdm=N100801&amp;su=学号</a></p>
<p>上边那个链接可能适用于各种【正方教务系统】。对它发 POST
请求，然后对返回的 json 的 <code>items</code> 字段转换成 pandas 的
DataFrame 处理。</p>
<p>COOKIES 是从浏览器发送的 POST
请求头里复制的，想重新获取数据时需要手动重新登录、更新代码。只是相当于简化了【登录之后再从表格获取信息】的这一步。</p>
<span id="more"></span>
<h2 id="获取数据">获取数据</h2>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Conf</span>:</span><br><span class="line">    domain_name = <span class="string">&quot;xx.yy.zz&quot;</span></span><br><span class="line">    student_id = <span class="string">&quot;123456789&quot;</span></span><br><span class="line">    cookies = (</span><br><span class="line">        <span class="string">&quot;my_client_ticket=xxxxxx; JSESSIONID=xxxxxx&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_course_grades</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    url = <span class="string">f&quot;https://<span class="subst">&#123;Conf.domain_name&#125;</span>/cjcx/cjcx_cxDgXscj.html?doType=query&amp;gnmkdm=N100801&amp;su=<span class="subst">&#123;Conf.student_id&#125;</span>&quot;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/119.0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Cookie&quot;</span>: Conf.cookies,</span><br><span class="line">    &#125;</span><br><span class="line">    form = &#123;</span><br><span class="line">        <span class="string">&quot;xh_id&quot;</span>: Conf.student_id,</span><br><span class="line">        <span class="string">&quot;xnm&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;xqm&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_search&quot;</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">        <span class="string">&quot;queryModel.showCount&quot;</span>: <span class="string">&quot;100&quot;</span>,</span><br><span class="line">        <span class="string">&quot;queryModel.currentPage&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;queryModel.sortName&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;queryModel.sortOrder&quot;</span>: <span class="string">&quot;asc&quot;</span>,</span><br><span class="line">        <span class="string">&quot;time&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.post(url, headers=headers, data=form)</span><br><span class="line">    response.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;course_grade.json&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(response.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    get_course_grades()</span><br></pre></td></tr></table></figure>
<h2 id="返回的-json-格式类似">返回的 json 格式类似</h2>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;currentPage&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;currentResult&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;entityOrField&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;items&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;bfzcj&quot;</span><span class="punctuation">:</span> <span class="string">&quot;80&quot;</span><span class="punctuation">,</span> <span class="comment">//？？？成绩（始终是数字）</span></span><br><span class="line">      <span class="attr">&quot;bh&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span><span class="punctuation">,</span> <span class="comment">//班号</span></span><br><span class="line">      <span class="attr">&quot;bh_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span> <span class="comment">//班号id</span></span><br><span class="line">      <span class="attr">&quot;bj&quot;</span><span class="punctuation">:</span> <span class="string">&quot;硬件工程2222&quot;</span><span class="punctuation">,</span> <span class="comment">//班级</span></span><br><span class="line">      <span class="attr">&quot;cj&quot;</span><span class="punctuation">:</span> <span class="string">&quot;80&quot;</span><span class="punctuation">,</span> <span class="comment">//成绩（也有“合格”的）</span></span><br><span class="line">      <span class="attr">&quot;cjsfzf&quot;</span><span class="punctuation">:</span> <span class="string">&quot;否&quot;</span><span class="punctuation">,</span> <span class="comment">//成绩是否作废</span></span><br><span class="line">      <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;二○二三年十月三十一日&quot;</span><span class="punctuation">,</span> <span class="comment">//当前日期</span></span><br><span class="line">      <span class="attr">&quot;dateDigit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2023年10月31日&quot;</span><span class="punctuation">,</span> <span class="comment">//当前日期</span></span><br><span class="line">      <span class="attr">&quot;dateDigitSeparator&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2023-10-31&quot;</span><span class="punctuation">,</span> <span class="comment">//当前日期</span></span><br><span class="line">      <span class="attr">&quot;day&quot;</span><span class="punctuation">:</span> <span class="string">&quot;31&quot;</span><span class="punctuation">,</span> <span class="comment">//当前日</span></span><br><span class="line">      <span class="attr">&quot;jd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3.00&quot;</span><span class="punctuation">,</span> <span class="comment">//绩点</span></span><br><span class="line">      <span class="attr">&quot;jg_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;15&quot;</span><span class="punctuation">,</span> <span class="comment">//机构id</span></span><br><span class="line">      <span class="attr">&quot;jgmc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;魔法与机械学院&quot;</span><span class="punctuation">,</span> <span class="comment">//机构名称</span></span><br><span class="line">      <span class="attr">&quot;jgpxzd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span> <span class="comment">//我查的都是1</span></span><br><span class="line">      <span class="attr">&quot;jsxm&quot;</span><span class="punctuation">:</span> <span class="string">&quot;无&quot;</span><span class="punctuation">,</span> <span class="comment">//教师姓名</span></span><br><span class="line">      <span class="attr">&quot;jxb_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span> <span class="comment">//教学班id</span></span><br><span class="line">      <span class="attr">&quot;jxbmc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(2077-2078-1)-xxxx&quot;</span><span class="punctuation">,</span> <span class="comment">//教学班名称</span></span><br><span class="line">      <span class="attr">&quot;kcbj&quot;</span><span class="punctuation">:</span> <span class="string">&quot;主修&quot;</span><span class="punctuation">,</span> <span class="comment">//课程？？</span></span><br><span class="line">      <span class="attr">&quot;kcgsmc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;必修课&quot;</span><span class="punctuation">,</span> <span class="comment">//课程？？名称</span></span><br><span class="line">      <span class="attr">&quot;kch&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxx&quot;</span><span class="punctuation">,</span> <span class="comment">//课程号</span></span><br><span class="line">      <span class="attr">&quot;kch_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxx&quot;</span><span class="punctuation">,</span> <span class="comment">//课程号id</span></span><br><span class="line">      <span class="attr">&quot;kclbmc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;通识课&quot;</span><span class="punctuation">,</span> <span class="comment">//课程？？名称</span></span><br><span class="line">      <span class="attr">&quot;kcmc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;火星文&quot;</span><span class="punctuation">,</span> <span class="comment">//课程名称</span></span><br><span class="line">      <span class="attr">&quot;kcxzdm&quot;</span><span class="punctuation">:</span> <span class="string">&quot;13&quot;</span><span class="punctuation">,</span> <span class="comment">//课程性质代码</span></span><br><span class="line">      <span class="attr">&quot;kcxzmc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;通识必修课&quot;</span><span class="punctuation">,</span> <span class="comment">//课程性质名称</span></span><br><span class="line">      <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;kkbmmc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;外星语学院&quot;</span><span class="punctuation">,</span> <span class="comment">//开课部门名称</span></span><br><span class="line">      <span class="attr">&quot;ksxz&quot;</span><span class="punctuation">:</span> <span class="string">&quot;正常考试&quot;</span><span class="punctuation">,</span> <span class="comment">//考试性质</span></span><br><span class="line">      <span class="attr">&quot;ksxzdm&quot;</span><span class="punctuation">:</span> <span class="string">&quot;01&quot;</span><span class="punctuation">,</span> <span class="comment">//考试性质代码</span></span><br><span class="line">      <span class="attr">&quot;listnav&quot;</span><span class="punctuation">:</span> <span class="string">&quot;false&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;localeKey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zh_CN&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;month&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10&quot;</span><span class="punctuation">,</span> <span class="comment">//当前月</span></span><br><span class="line">      <span class="attr">&quot;njdm_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2077&quot;</span><span class="punctuation">,</span> <span class="comment">//年级代码id</span></span><br><span class="line">      <span class="attr">&quot;njmc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2077&quot;</span><span class="punctuation">,</span> <span class="comment">//年级名称</span></span><br><span class="line">      <span class="attr">&quot;pageable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;queryModel&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;currentPage&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;currentResult&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;entityOrField&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;limit&quot;</span><span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;offset&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pageNo&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pageSize&quot;</span><span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;showCount&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sorts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;totalCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;totalPage&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;totalResult&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;rangeable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;row_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;46&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;rwzxs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;48&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sfdkbcx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;否&quot;</span><span class="punctuation">,</span> <span class="comment">//是否单开班课程</span></span><br><span class="line">      <span class="attr">&quot;sfxwkc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;否&quot;</span><span class="punctuation">,</span> <span class="comment">//是否？？课程</span></span><br><span class="line">      <span class="attr">&quot;sfzh&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxx&quot;</span><span class="punctuation">,</span> <span class="comment">//身份证号</span></span><br><span class="line">      <span class="attr">&quot;totalResult&quot;</span><span class="punctuation">:</span> <span class="string">&quot;49&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;userModel&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;monitor&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;roleCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;roleKeys&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;roleValues&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;usable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;xb&quot;</span><span class="punctuation">:</span> <span class="string">&quot;男&quot;</span><span class="punctuation">,</span> <span class="comment">//性别</span></span><br><span class="line">      <span class="attr">&quot;xbm&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span> <span class="comment">//性别码</span></span><br><span class="line">      <span class="attr">&quot;xf&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0&quot;</span><span class="punctuation">,</span> <span class="comment">//学分</span></span><br><span class="line">      <span class="attr">&quot;xfjd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6.00&quot;</span><span class="punctuation">,</span> <span class="comment">//学分绩点</span></span><br><span class="line">      <span class="attr">&quot;xh&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456789&quot;</span><span class="punctuation">,</span> <span class="comment">//学号</span></span><br><span class="line">      <span class="attr">&quot;xh_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span> <span class="comment">//学号id</span></span><br><span class="line">      <span class="attr">&quot;xm&quot;</span><span class="punctuation">:</span> <span class="string">&quot;王二狗&quot;</span><span class="punctuation">,</span> <span class="comment">//姓名</span></span><br><span class="line">      <span class="attr">&quot;xnm&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2077&quot;</span><span class="punctuation">,</span> <span class="comment">//学年名</span></span><br><span class="line">      <span class="attr">&quot;xnmmc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2077-2078&quot;</span><span class="punctuation">,</span> <span class="comment">//学年名名称</span></span><br><span class="line">      <span class="attr">&quot;xqm&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3&quot;</span><span class="punctuation">,</span> <span class="comment">//学期名</span></span><br><span class="line">      <span class="attr">&quot;xqmmc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span> <span class="comment">//学期名名称</span></span><br><span class="line">      <span class="attr">&quot;xslb&quot;</span><span class="punctuation">:</span> <span class="string">&quot;普通本科生&quot;</span><span class="punctuation">,</span> <span class="comment">//学生？？</span></span><br><span class="line">      <span class="attr">&quot;year&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2023&quot;</span><span class="punctuation">,</span> <span class="comment">//当前年份</span></span><br><span class="line">      <span class="attr">&quot;zsxymc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;魔法与机械学院&quot;</span><span class="punctuation">,</span> <span class="comment">//？？学院名称</span></span><br><span class="line">      <span class="attr">&quot;zyh_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span> <span class="comment">//专业号id</span></span><br><span class="line">      <span class="attr">&quot;zymc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;硬件工程&quot;</span> <span class="comment">//专业名称</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="comment">//下一门课……</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;limit&quot;</span><span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;offset&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;pageNo&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;pageSize&quot;</span><span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;showCount&quot;</span><span class="punctuation">:</span> <span class="number">100</span><span class="punctuation">,</span> <span class="comment">//这是前面POST的form里传的</span></span><br><span class="line">  <span class="attr">&quot;sortOrder&quot;</span><span class="punctuation">:</span> <span class="string">&quot; &quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sorts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;totalCount&quot;</span><span class="punctuation">:</span> <span class="number">47</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;totalPage&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;totalResult&quot;</span><span class="punctuation">:</span> <span class="number">47</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="处理数据">处理数据</h2>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">pd.set_option(<span class="string">&quot;display.unicode.east_asian_width&quot;</span>, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;course_grade.json&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    response_content = json.loads(f.read())</span><br><span class="line"></span><br><span class="line">items = response_content[<span class="string">&quot;items&quot;</span>]</span><br><span class="line">df = pd.DataFrame(items)</span><br><span class="line"><span class="comment"># print(df.columns)</span></span><br><span class="line"></span><br><span class="line">selected_cols = [</span><br><span class="line">    <span class="string">&quot;bfzcj&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cj&quot;</span>,</span><br><span class="line">    <span class="string">&quot;jd&quot;</span>,</span><br><span class="line">    <span class="string">&quot;kcbj&quot;</span>,</span><br><span class="line">    <span class="string">&quot;kch&quot;</span>,</span><br><span class="line">    <span class="string">&quot;kcmc&quot;</span>,</span><br><span class="line">    <span class="string">&quot;kcxzdm&quot;</span>,</span><br><span class="line">    <span class="string">&quot;kcxzmc&quot;</span>,</span><br><span class="line">    <span class="string">&quot;kkbmmc&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ksxz&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ksxzdm&quot;</span>,</span><br><span class="line">    <span class="string">&quot;xf&quot;</span>,</span><br><span class="line">    <span class="string">&quot;xfjd&quot;</span>,</span><br><span class="line">    <span class="string">&quot;xqm&quot;</span>,</span><br><span class="line">    <span class="string">&quot;xqmmc&quot;</span>,</span><br><span class="line">]</span><br><span class="line">df1 = df[selected_cols]</span><br><span class="line"><span class="comment"># df1.to_excel(&quot;output.xlsx&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有类型都是字符串，且不及格课程的学分不是0</span></span><br><span class="line">df1 = df1.astype(&#123;<span class="string">&quot;bfzcj&quot;</span>: <span class="built_in">int</span>, <span class="string">&quot;xf&quot;</span>: <span class="built_in">float</span>&#125;)</span><br><span class="line">sum_xf = df1.loc[df1[<span class="string">&quot;bfzcj&quot;</span>] &gt;= <span class="number">60</span>, <span class="string">&quot;xf&quot;</span>].<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df1[[<span class="string">&quot;kcmc&quot;</span>, <span class="string">&quot;bfzcj&quot;</span>, <span class="string">&quot;xf&quot;</span>]])</span><br><span class="line"><span class="built_in">print</span>(sum_xf)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>无分类</category>
      </categories>
  </entry>
  <entry>
    <title>让笔记 commit 前的工作更简单</title>
    <url>/blog//UC/e0/</url>
    <content><![CDATA[<p>起因是，我是把笔记代码分两个仓库存的。需要做很多重复的工作。</p>
<p>于是我写了两个 bat 文件。</p>
<span id="more"></span>
<p>起因是，我是把笔记代码分两个仓库存的：</p>
<ul>
<li><code>blog-source</code>存 Hexo 框架源码，NexT
主题源码和自己的部分（更改后的配置文件、md 文档、图片等）</li>
<li><code>blog</code>存渲染之后的网页，分支是<code>gh-pages</code></li>
</ul>
<p>这就造成在 commit 前，我需要做以下工作：</p>
<ol type="1">
<li>在<code>blog-source</code>文件夹里先打开本地预览服务器。</li>
<li>点击链接，在浏览器里打开。</li>
<li>预览没问题，渲染网页。</li>
<li>删除<code>blog</code>文件夹里除了<code>.git</code>外的所有文件和文件夹。</li>
<li>把渲染的网页从<code>blog-source/public/</code>转移到<code>blog</code>文件夹里。</li>
<li>清除<code>blog-source</code>文件夹里渲染的网页。</li>
</ol>
<p>手动操作了十几天后很烦，于是我写了两个 bat 文件：</p>
<p><code>bs.bat</code> 做第 1-2 步</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /d d:\repo\blog-source</span><br><span class="line"><span class="built_in">start</span> http://localhost:<span class="number">4000</span>/blog/</span><br><span class="line"><span class="keyword">call</span> npx hexo s</span><br></pre></td></tr></table></figure>
<p><code>bg.bat</code> 做第 3-6 步</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">:: 删除旧文件</span><br><span class="line"><span class="built_in">cd</span> /d d:\repo\blog</span><br><span class="line">git rm -r *</span><br><span class="line">:: 渲染新文件</span><br><span class="line"><span class="built_in">cd</span> ..\blog-source</span><br><span class="line"><span class="keyword">call</span> npx hexo g</span><br><span class="line">:: 转移新文件</span><br><span class="line"><span class="built_in">xcopy</span> public ..\blog /s /e</span><br><span class="line"><span class="keyword">call</span> npx hexo clean</span><br></pre></td></tr></table></figure>
<p>再建一个专门存 bat 的文件夹，把它添加到环境变量
Path。这样在任一文件夹下都可以做第 1-6 步了。</p>
]]></content>
      <categories>
        <category>无分类</category>
      </categories>
  </entry>
  <entry>
    <title>AL01 - 查找</title>
    <url>/blog//AL/01/</url>
    <content><![CDATA[<p>查找</p>
<span id="more"></span>
<h2 id="二分查找某个值的位置">二分查找某个值的位置</h2>
<p>二分查找就是翻书。</p>
<p>有一本 200 页的书，我想翻到 124 页，一下就翻到的概率是很小的。</p>
<p>我会先翻到中间，发现是 100 页。</p>
<p>然后翻到 100~200 页的中间，发现是 150 页。</p>
<p>然后翻到 100~150 页的中间，发现是 125 页。</p>
<p>以此类推。</p>
<p>二分查找就是从列表里查找一个值，前提列表是有序的，这样可以比较大小，在二分之后仍然是有序的。如果要查找的值比列表的中间值小，就在列表的左半部分找，这就是二分。这时需要变换查找范围的右边界，到中间值的左边一个位置。</p>
<p>然后对查找范围继续二分，与中间值作比较，如果要查找的值比中间值大，就在查找范围的右半部分找，这时需要变换查找范围的左边界到中间值的右一个位置。</p>
<p>以此类推，如果找到了，就返回目标元素的索引（位置）。找不到就返回-1。</p>
<h3 id="非递归版">非递归版</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search</span>(<span class="params">lis: <span class="built_in">list</span>[<span class="built_in">int</span> | <span class="built_in">float</span>], key: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    二分查找（非递归版），传列表和要查找的值。返回目标值的索引。</span></span><br><span class="line"><span class="string">    前提列表是有序的，有多个相同值时不一定返回哪个索引。</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    right = <span class="built_in">len</span>(lis) - <span class="number">1</span>  <span class="comment"># 左边界和右边界，刚开始的查找范围是整个列表。</span></span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:  <span class="comment"># 二分，与中间值作比较，变换边界。</span></span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> key &lt; lis[mid]:</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> key &gt; lis[mid]:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>  <span class="comment"># 如果找不到，返回-1</span></span><br></pre></td></tr></table></figure>
<h3 id="递归版">递归版</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search1</span>(<span class="params">lis: <span class="built_in">list</span>[<span class="built_in">int</span> | <span class="built_in">float</span>], key: <span class="built_in">int</span>, left: <span class="built_in">int</span>, right: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    二分查找（递归版），调用时传列表、要查找的值、0、列表长度减一。返回目标值的索引。</span></span><br><span class="line"><span class="string">    前提列表是有序的，有多个相同值时不一定返回哪个索引。</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> left &gt; right:  <span class="comment"># 没有找到，递归结束</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    mid = (left + right) // <span class="number">2</span>  <span class="comment"># 中间值的索引</span></span><br><span class="line">    <span class="keyword">if</span> key &lt; lis[mid]:  <span class="comment"># 要查找的值比中间值小时，递归调用自身查找，并变换右边界</span></span><br><span class="line">        <span class="keyword">return</span> binary_search1(lis, key, left, mid - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">elif</span> key &gt; lis[mid]:</span><br><span class="line">        <span class="keyword">return</span> binary_search1(lis, key, mid + <span class="number">1</span>, right)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> mid</span><br></pre></td></tr></table></figure>
<h2 id="找第二大第-k-小的值">找第二大/第 K 小的值</h2>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">dic = <span class="built_in">dict</span>()  <span class="comment"># 不知道有什么用，但是能运行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_max</span>(<span class="params">lis: <span class="built_in">list</span>[<span class="built_in">int</span> | <span class="built_in">float</span>], left: <span class="built_in">int</span>, right: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span> | <span class="built_in">float</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    查找并返回最大值</span></span><br><span class="line"><span class="string">    传非空列表和其首末索引</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 分到只有一个元素时，返回。写 == 好像也可</span></span><br><span class="line">    <span class="comment"># left、right、mid 是下标</span></span><br><span class="line">    <span class="keyword">if</span> left &gt;= right:</span><br><span class="line">        <span class="keyword">return</span> lis[left]</span><br><span class="line">    <span class="comment"># 二分/分治，分别查找左半部分和右半部分的最大值</span></span><br><span class="line">    mid = (left + right) // <span class="number">2</span></span><br><span class="line">    left_max = find_max(lis, left, mid)</span><br><span class="line">    right_max = find_max(lis, mid + <span class="number">1</span>, right)</span><br><span class="line">    <span class="comment"># 返回大的那个值</span></span><br><span class="line">    <span class="keyword">if</span> left_max &gt; right_max:</span><br><span class="line">        dic.setdefault(left_max, []).append(right_max)</span><br><span class="line">        <span class="keyword">return</span> left_max</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dic.setdefault(right_max, []).append(left_max)</span><br><span class="line">        <span class="keyword">return</span> right_max</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_second_max</span>(<span class="params">lis: <span class="built_in">list</span>[<span class="built_in">int</span> | <span class="built_in">float</span>]</span>) -&gt; <span class="built_in">int</span> | <span class="built_in">float</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    找第二大的元素</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    first_max = find_max(lis, <span class="number">0</span>, <span class="built_in">len</span>(lis) - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(dic[first_max])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">local_sort</span>(<span class="params">A: <span class="built_in">list</span>[<span class="built_in">int</span> | <span class="built_in">float</span>], left: <span class="built_in">int</span>, right: <span class="built_in">int</span></span>) -&gt; <span class="built_in">list</span>[<span class="built_in">int</span> | <span class="built_in">float</span>]:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(left + <span class="number">1</span>, right + <span class="number">1</span>):</span><br><span class="line">        x = A[j]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(j, left - <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> A[i - <span class="number">1</span>] &gt; x:</span><br><span class="line">                A[i] = A[i - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        A[i] = x</span><br><span class="line">    <span class="keyword">return</span> A</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">partition</span>(<span class="params">A: <span class="built_in">list</span>[<span class="built_in">int</span> | <span class="built_in">float</span>], left: <span class="built_in">int</span>, right: <span class="built_in">int</span>, p: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    i = left</span><br><span class="line">    j = right + <span class="number">1</span></span><br><span class="line">    A[left], A[p] = A[p], A[left]</span><br><span class="line">    pivot = A[left]</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> A[i] &lt; pivot:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> A[j] &gt; pivot:</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i &gt;= j:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        A[i], A[j] = A[j], A[i]</span><br><span class="line">    A[j], A[left] = A[left], A[j]</span><br><span class="line">    <span class="keyword">return</span> j</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">select</span>(<span class="params">A: <span class="built_in">list</span>[<span class="built_in">int</span> | <span class="built_in">float</span>], left: <span class="built_in">int</span>, right: <span class="built_in">int</span>, k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    找第 (k + 1) 小的值（k 传 10085 时，找的是第 10086 小的值——就是排序后下标的[10085]）</span></span><br><span class="line"><span class="string">    传列表，0，列表长度减一，k。</span></span><br><span class="line"><span class="string">    不知道意思，但是能运行，好像是对列表部分原地排序。</span></span><br><span class="line"><span class="string">    不用管返回值，最后要找的第 (k + 1) 小的值就是原地操作后的 A[k]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    n = right - left + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> left</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">5</span>:</span><br><span class="line">        local_sort(A, left, right)</span><br><span class="line">        <span class="keyword">return</span> left + k - <span class="number">1</span></span><br><span class="line">    groups = n // <span class="number">5</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, groups + <span class="number">1</span>):</span><br><span class="line">        A = local_sort(A, left + <span class="number">5</span> * (i - <span class="number">1</span>), left + <span class="number">5</span> * i - <span class="number">1</span>)</span><br><span class="line">        A[left + i - <span class="number">1</span>], A[left + <span class="number">5</span> * i - <span class="number">3</span>] = (</span><br><span class="line">            A[left + <span class="number">5</span> * i - <span class="number">3</span>],</span><br><span class="line">            A[left + i - <span class="number">1</span>],</span><br><span class="line">        )</span><br><span class="line">        j = select(A, left, left + groups - <span class="number">1</span>, groups // <span class="number">2</span>)</span><br><span class="line">        <span class="comment"># print(f&quot;j = &#123;A[j]&#125;&quot;)</span></span><br><span class="line">        q = partition(A, left, right, j)</span><br><span class="line">        <span class="comment"># print(f&quot;q = &#123;q&#125;&quot;)</span></span><br><span class="line">        <span class="comment"># print(A)</span></span><br><span class="line">        i = q - left + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> k == i:</span><br><span class="line">            <span class="keyword">return</span> q</span><br><span class="line">        <span class="keyword">if</span> k &lt; i:</span><br><span class="line">            <span class="keyword">return</span> select(A, left, q - <span class="number">1</span>, k)</span><br><span class="line">        <span class="keyword">if</span> k &gt; i:</span><br><span class="line">            <span class="keyword">return</span> select(A, q + <span class="number">1</span>, right, k - i)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>十进制与 K 进制小数互转</title>
    <url>/blog//CO/10-to-k/</url>
    <content><![CDATA[<ul>
<li>K 转 10：和整数进制转换的方法一样</li>
<li>10 转 K：乘 K 取整</li>
</ul>
<span id="more"></span>
<h2 id="k-转-10和整数进制转换的方法一样">K 转
10：和整数进制转换的方法一样</h2>
<p>每一位分别乘上 K 的次方，再相加。</p>
<h3 id="转-10">2 转 10</h3>
<h4 id="有限小数">有限小数</h4>
<p><span class="math inline">\(11.1011_{2} = 3.6875_{10}\)</span></p>
<table>
<thead>
<tr class="header">
<th>项</th>
<th>值</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><span class="math inline">\(1\times2^{1}\)</span></td>
<td><span class="math inline">\(2\)</span></td>
</tr>
<tr class="even">
<td><span class="math inline">\(1\times2^{0}\)</span></td>
<td><span class="math inline">\(1\)</span></td>
</tr>
<tr class="odd">
<td><span class="math inline">\(1\times2^{-1}\)</span></td>
<td><span class="math inline">\(0.5\)</span></td>
</tr>
<tr class="even">
<td><span class="math inline">\(0\times2^{-2}\)</span></td>
<td><span class="math inline">\(0\)</span></td>
</tr>
<tr class="odd">
<td><span class="math inline">\(1\times2^{-3}\)</span></td>
<td><span class="math inline">\(0.125\)</span></td>
</tr>
<tr class="even">
<td><span class="math inline">\(1\times2^{-4}\)</span></td>
<td><span class="math inline">\(0.0625\)</span></td>
</tr>
<tr class="odd">
<td><strong>总和</strong></td>
<td><span class="math inline">\(3.6875\)</span></td>
</tr>
</tbody>
</table>
<h4 id="无限循环小数">无限循环小数</h4>
<p><span class="math inline">\(1.1 \dot{0} 11 \dot{0} ... _{2} =
1.7_{10}\)</span></p>
<p>可以转换成分数计算：</p>
<p><span class="math display">\[
\begin{aligned}
1.1 \dot{0} 11 \dot{0} ... _{2} &amp; = x \\
11.\dot{0} 11 \dot{0} ... _{2} &amp; = 2_{10}x \\
110110. \dot{0} 11 \dot{0} ... _{2} &amp; = 32_{10}x \\
两式相减，110011_{2} &amp; = 30_{10}x \\
x &amp; = \frac{110011_{2}}{30_{10}} = \frac{51_{10}}{30_{10}} =
1.7_{10}
\end{aligned}
\]</span></p>
<h3 id="转-10-1">16 转 10</h3>
<p>同上略。</p>
<h2 id="转-k乘-k-取整">10 转 K：乘 K 取整</h2>
<p>整数部分仍然除 K 取余，小数部分乘 K 取整，然后相加。</p>
<h3 id="转-2">10 转 2</h3>
<p><span class="math inline">\(0.7 _{10} = 0.1 \dot{0} 11 \dot{0} ...
_{2}\)</span></p>
<table>
<thead>
<tr class="header">
<th>小数部分乘 2</th>
<th>取整数部分</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><span class="math inline">\(0.7 \times 2 = 1.4\)</span></td>
<td><span class="math inline">\(1\)</span></td>
</tr>
<tr class="even">
<td><span class="math inline">\(0.4 \times 2 = 0.8\)</span></td>
<td><span class="math inline">\(0\)</span></td>
</tr>
<tr class="odd">
<td><span class="math inline">\(0.8 \times 2 = 1.6\)</span></td>
<td><span class="math inline">\(1\)</span></td>
</tr>
<tr class="even">
<td><span class="math inline">\(0.6 \times 2 = 1.2\)</span></td>
<td><span class="math inline">\(1\)</span></td>
</tr>
<tr class="odd">
<td><span class="math inline">\(0.2 \times 2 = 0.4\)</span></td>
<td><span class="math inline">\(0\)</span></td>
</tr>
<tr class="even">
<td>...</td>
<td>...</td>
</tr>
</tbody>
</table>
<h3 id="转-16">10 转 16</h3>
<p><span class="math inline">\(0.7 _{10} = 0.\mathrm{B} \dot{3} ...
_{16}\)</span></p>
<table>
<thead>
<tr class="header">
<th>小数部分乘 16</th>
<th>取整数部分</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><span class="math inline">\(0.7 \times 16 = 11.2\)</span></td>
<td><span class="math inline">\(\mathrm{B}\)</span></td>
</tr>
<tr class="even">
<td><span class="math inline">\(0.2 \times 16 = 3.2\)</span></td>
<td><span class="math inline">\(3\)</span></td>
</tr>
<tr class="odd">
<td>...</td>
<td>...</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>计算机组成原理</category>
      </categories>
  </entry>
  <entry>
    <title>AL02 - 排序</title>
    <url>/blog//AL/02/</url>
    <content><![CDATA[<p>排序</p>
<span id="more"></span>
<h2 id="插入排序">插入排序</h2>
<p>插入排序就是接扑克牌。</p>
<p>插入排序就像一张一张地接扑克牌，接到第一张扑克牌时什么也不做，接到第二张扑克牌时要与第一张作比较，看插入到第一张的前面还是后面，……，接到第
n 张扑克牌时要与前 n - 1 张比较，看插入到手牌的哪个位置。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插入排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; arr 待排序数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> 原地排序后的数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">insertionSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> len = arr.<span class="property">length</span>; <span class="comment">// 数组长度</span></span><br><span class="line">  <span class="keyword">let</span> preIndex, current; <span class="comment">// 当前元素的前一个元素的索引，和当前元素的值</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="comment">// i 相当于是一个指针，指向当前新接的牌</span></span><br><span class="line">    <span class="comment">// 只有一张或零张牌时不用排序，此时 len == 1 || len == 0，不满足循环条件，直接退出</span></span><br><span class="line">    preIndex = i - <span class="number">1</span>; <span class="comment">// 刚开始是新接的牌的前一张牌的索引，后来向左扫描</span></span><br><span class="line">    current = arr[i]; <span class="comment">// 新接的牌牌面</span></span><br><span class="line">    <span class="keyword">while</span> (preIndex &gt;= <span class="number">0</span> &amp;&amp; arr[preIndex] &gt; current) &#123;</span><br><span class="line">      <span class="comment">// 游标 preIndex 向左扫描，当每找到一张比当前新接的牌大的牌时，把游标当前指向的值覆盖给它右面的元素</span></span><br><span class="line">      <span class="comment">// 能进到这层循环，说明牌有两张或以上</span></span><br><span class="line">      <span class="comment">// 如果 preIndex 当前指向的牌比 current 大，把 preIndex 右边的值用 arr[preIndex] 覆盖</span></span><br><span class="line">      <span class="comment">// 由于 preIndex 是从新接的牌的左边一张牌开始取的，所以会把“插入位置”之后的牌都覆盖了，相当于整体向右挪了一位</span></span><br><span class="line">      <span class="comment">// 包括新接的牌也被覆盖了，所以前面才要单独用一个 current 变量保存新接的牌</span></span><br><span class="line">      <span class="comment">// 当 preIndex 指向的牌比 current 小，说明 preIndex 和 preIndex + 1 “之间” 就是应插入的位置</span></span><br><span class="line">      <span class="comment">// 由于是用覆盖的形式，所以真正的插入位置是 preIndex，在 preIndex 原来位置的牌覆盖给右面了</span></span><br><span class="line">      <span class="comment">// 又由于每次循环 preIndex 都要自减，退出循环之后往插入位置的左边偏了一位，所以退出之后插入位置变成了 preIndex + 1</span></span><br><span class="line">      <span class="comment">// 结束条件是 preIndex 指向的牌比 current 小，找到“插入位置”了</span></span><br><span class="line">      <span class="comment">// 结束条件或者是已经把第 0 张牌覆盖给了第 1 张牌，preIndex 自减之后变成了 -1</span></span><br><span class="line">      <span class="comment">// 所以反过来说，循环继续的条件是 preIndex &gt;= 0 &amp;&amp; arr[preIndex] &gt; current</span></span><br><span class="line">      <span class="comment">// 当 preIndex &lt; 0 时，arr[preIndex] 会越界，所以把 preIndex &gt;= 0 的条件写在前面，短路退出</span></span><br><span class="line">      arr[preIndex + <span class="number">1</span>] = arr[preIndex]; <span class="comment">// 把游标当前指向的值覆盖给它右面的元素</span></span><br><span class="line">      preIndex--; <span class="comment">//向左扫描</span></span><br><span class="line">    &#125;</span><br><span class="line">    arr[preIndex + <span class="number">1</span>] = current; <span class="comment">// “插入”牌</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="选择排序">选择排序</h2>
<p>拿到一手混乱的牌，从中选取最小的，与第 0 张交换位置。</p>
<p>之后忽略第 0 张，从剩余的牌里选取最小的，与第 1 张交换位置。</p>
<p>之后忽略第 0、1 张，从剩余的牌里选取最小的，与第 2 张交换位置。</p>
<p>以此类推。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 选择排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; arr 待排序数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> 原地排序后的数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">selectionSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="comment">// 选择排序</span></span><br><span class="line">  <span class="keyword">const</span> len = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 有零张或一张牌时，不会进入这层循环</span></span><br><span class="line">    <span class="comment">// 两个指针 i 和 j，i 指向每次外层循环的第一个元素。内层循环开始时，j 在 i 的后一位</span></span><br><span class="line">    <span class="comment">// i &lt; len - 1，说明外层 i 只循环到倒数第二位。每次内层循环，j 都要到最后一位</span></span><br><span class="line">    <span class="keyword">let</span> minIndex = i; <span class="comment">// 最小值索引</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">      <span class="comment">// j 向右扫描，寻找后面牌的最小值</span></span><br><span class="line">      <span class="keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;</span><br><span class="line">        <span class="comment">// 如果找到更小的了，更新最小值索引</span></span><br><span class="line">        minIndex = j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把外层循环的第一张牌与后面的最小值交换位置</span></span><br><span class="line">    [arr[minIndex], arr[i]] = [arr[i], arr[minIndex]];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="归并排序">归并排序</h2>
<p>把一沓牌分成一张一张的，摆在桌子上。相邻的两张合并成一个组。</p>
<p>相邻的两组分别排序，合并成一个新组。</p>
<p>相邻的两组分别排序，合并成一个新组。</p>
<p>以此类推。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 归并排序（递归版）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; arr 待排序数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">number[]</span>&#125; 排序后的数组（元素个数大于等于 2 时，为非原地排序）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mergeSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 元素个数为 0 或 1 时不用排序，返回原数组</span></span><br><span class="line">  <span class="keyword">if</span> (len &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 计算中间元素的索引</span></span><br><span class="line">  <span class="comment">// 如果数组长度为奇数：索引就是最中间的</span></span><br><span class="line">  <span class="comment">// 如果数组长度为偶数：索引是右半部分的开头</span></span><br><span class="line">  <span class="keyword">let</span> middleIndex = <span class="title class_">Math</span>.<span class="title function_">floor</span>(len / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取数组的左半部分和右半部分</span></span><br><span class="line">  <span class="comment">// 如果数组长度为奇数：左半部分比右半部分短一</span></span><br><span class="line">  <span class="comment">// 如果数组长度为偶数：左右两部分长度相等</span></span><br><span class="line">  <span class="keyword">let</span> leftPart = arr.<span class="title function_">slice</span>(<span class="number">0</span>, middleIndex);</span><br><span class="line">  <span class="keyword">let</span> rightPart = arr.<span class="title function_">slice</span>(middleIndex);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 合并左右两部分</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; leftPart 左半部分</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; rightPart 右半部分</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span> &#123;<span class="type">number[]</span>&#125; 两部分合并之后的数组</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">let</span> <span class="title function_">merge</span> = (<span class="params">leftPart, rightPart</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> result = []; <span class="comment">// 保存合并结果的数组</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当左右两部分都有元素时</span></span><br><span class="line">    <span class="comment">// 如果数组长度为 2：左右两部分长度都是 1</span></span><br><span class="line">    <span class="comment">// 如果数组长度为 3：左边长 1，右边长 2</span></span><br><span class="line">    <span class="keyword">while</span> (leftPart.<span class="property">length</span> &amp;&amp; rightPart.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="comment">// 这两个分支用于：</span></span><br><span class="line">      <span class="comment">// 比较左右两部分的第一个元素，把小的剔除，剔除后的那一边所有元素向前补位</span></span><br><span class="line">      <span class="comment">// 把剔除后的元素推进结果数组</span></span><br><span class="line">      <span class="keyword">if</span> (leftPart[<span class="number">0</span>] &lt; rightPart[<span class="number">0</span>]) &#123;</span><br><span class="line">        result.<span class="title function_">push</span>(leftPart.<span class="title function_">shift</span>());</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result.<span class="title function_">push</span>(rightPart.<span class="title function_">shift</span>());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 总会有一边的元素会被先剔除完的，这造成退出循环之后，另一边还有元素没进结果数组</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这两个循环用于：把上面没进到结果数组里的元素推进去</span></span><br><span class="line">    <span class="keyword">while</span> (leftPart.<span class="property">length</span>) &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(leftPart.<span class="title function_">shift</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (rightPart.<span class="property">length</span>) &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(rightPart.<span class="title function_">shift</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回合并之后的两部分</span></span><br><span class="line">  <span class="comment">// 在这之前也要用 mergeSort() 自己对两部分进行排序</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">merge</span>(<span class="title function_">mergeSort</span>(leftPart), <span class="title function_">mergeSort</span>(rightPart));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="快速排序">快速排序</h2>
<p>快速排序就是选一个基准，所有比基准小的放在基准左边，比基准大的放在基准右边。
然后就分成了两个区，对每一个区里的元素再选一个基准，重复上面的操作。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">quick_sort0</span>(<span class="params">lis: <span class="built_in">list</span>[<span class="built_in">int</span> | <span class="built_in">float</span>]</span>) -&gt; <span class="built_in">list</span>[<span class="built_in">int</span> | <span class="built_in">float</span>]:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    比较直观的快速排序，但是是非原地排序，占内存。</span></span><br><span class="line"><span class="string">    还有列表加法，所以执行时间比下面的长。</span></span><br><span class="line"><span class="string">    传列表，返回新列表。</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(lis) &lt;= <span class="number">1</span>:  <span class="comment"># 分区有一个或零个元素时不用排序</span></span><br><span class="line">        <span class="keyword">return</span> lis</span><br><span class="line">    pivot = lis[<span class="number">0</span>]  <span class="comment"># 选分区最左边的元素作为基准（枢轴）</span></span><br><span class="line">    left = [x <span class="keyword">for</span> x <span class="keyword">in</span> lis[<span class="number">1</span>:] <span class="keyword">if</span> x &lt;= pivot]  <span class="comment"># 生成左半分区，取比最左边元素小或等于它的</span></span><br><span class="line">    right = [x <span class="keyword">for</span> x <span class="keyword">in</span> lis[<span class="number">1</span>:] <span class="keyword">if</span> x &gt; pivot]  <span class="comment"># 生成右半分区，取比最左边元素大的</span></span><br><span class="line">    <span class="comment"># 对两个分区分别调用自身排序，把它们和枢轴合并</span></span><br><span class="line">    <span class="keyword">return</span> quick_sort0(left) + [pivot] + quick_sort0(right)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>普通十进制数转单精度浮点数</title>
    <url>/blog//CO/10-to-float/</url>
    <content><![CDATA[<ul>
<li>在 IEEE 754 标准下</li>
</ul>
<span id="more"></span>
<p>单精度浮点数，即 32 位二进制浮点数，包含：</p>
<p>一位符号位 + 八位指数位 + 二十三位尾数位</p>
<h2 id="例一">例一</h2>
<p>以 <span class="math inline">\(0.1_{10}\)</span> 为例：</p>
<ol type="1">
<li><p>把十进制转换为二进制 <span class="math inline">\(0.1 _{10} =
0.0\dot{0}01\dot{1}... _{2}\)</span></p></li>
<li><p>用以 <span class="math inline">\(2_{10}\)</span>
为基数的科学计数法表示，并保证【尾数的小数点前是 <span
class="math inline">\(1_{2}\)</span>】 <span class="math inline">\(=
1.\dot{1}00\dot{1}..._{2} \times (2^{-4})_{10}\)</span> 可以看到指数是
<span class="math inline">\(-4_{10}\)</span></p></li>
<li><p>计算指数位（又叫阶码），用指数加上偏移量 <span
class="math inline">\((2^{e-1}-1)_{10}\)</span></p>
<p>这里 <span class="math inline">\(e\)</span>
等于【用于表示指数位的位数】 <span
class="math inline">\(8_{10}\)</span>，所以偏移量为 <span
class="math inline">\(127_{10}\)</span></p>
<p>则阶码为 <span class="math inline">\(-4_{10} + 127_{10} =
123_{10}\)</span></p>
<p>阶码的二进制为 <code>0111 1011</code>，注意
<em>阶码始终为无符号整数</em></p></li>
<li><p>取科学计数法的【小数点后二十三位】作为【尾数位】，因为是无限的，所以要舍去一部分</p>
<p>它的前二十位是：<code>1001 1001 1001 1001 1001</code></p>
<p>二十一至二十八位是：<code>1001 1001</code></p>
<p>所以二十一至二十三位，要么取 <code>100</code>，要么取
<code>101</code>。</p>
<p>通常是舍入到最接近的，一样接近则偶数（末尾为
<code>0</code>）优先，这里 <code>101</code> 更接近。</p></li>
<li><p>把符号位连同阶码、尾数位缝合起来</p>
<p><code>0 | 0111 1011 | 1001 1001 1001 1001 1001 101</code></p></li>
</ol>
<h2 id="例二">例二</h2>
<p>以 <span class="math inline">\(12_{10} = 1.5_{10} \times
(2^{3})_{10}\)</span> 为例，和上面的步骤一样：</p>
<ol type="1">
<li><p>把十进制转换为二进制</p>
<p><span class="math inline">\(12 _{10} = 1100 _{2}\)</span></p></li>
<li><p>用以 <span class="math inline">\(2\)</span>
为基数的科学计数法表示，并保证【尾数的小数点前是 <span
class="math inline">\(1\)</span>】</p>
<p><span class="math inline">\(= 1.1_{2} \times (2^3)_{10}\)</span></p>
<p>可以看到指数是 <span class="math inline">\(3_{10}\)</span></p></li>
<li><p>计算指数位（又叫阶码），用指数加上偏移量 <span
class="math inline">\((2^{e-1}-1)_{10}\)</span></p>
<p>这里 <span class="math inline">\(e\)</span>
等于【用于表示指数位的位数】 <span
class="math inline">\(8_{10}\)</span>，所以偏移量为 <span
class="math inline">\(127_{10}\)</span></p>
<p>则阶码为 <span class="math inline">\(3_{10} + 127_{10} =
130_{10}\)</span></p>
<p>阶码的二进制为 <code>1000 0010</code>，注意
<em>阶码始终为无符号整数</em></p></li>
<li><p>取科学计数法的【小数点后二十三位】作为【尾数位】，因为是有限的，所以后面直接补零</p>
<p>小数点后二十三位是：<code>1000 0000 0000 0000 000</code></p></li>
<li><p>把符号位连同阶码、尾数位缝合起来</p>
<p><code>0 | 1000 0010 | 1000 0000 0000 0000 000</code></p></li>
</ol>
<h2 id="特殊情况">特殊情况</h2>
<p><a href="/blog/UC/kong-yi-ji">单精度浮点数的五种形式</a></p>
<h2 id="如何验证">如何验证</h2>
<ul>
<li><p><a
href="https://baseconvert.com/ieee-754-floating-point">在线转换</a></p></li>
<li><p><a href="/blog/CO/gdb">用 GDB 查看变量内存</a></p></li>
<li><p><a href="https://en.wikipedia.org/wiki/IEEE_754">Wikipedia</a> |
<a href="https://zh.wikipedia.org/wiki/IEEE_754">维基百科</a></p></li>
<li><p>获取国际标准文件</p>
<p>IEEE 754 标准是电气与电子工程师协会（Institute of Electrical and
Electronics Engineers）制定的关于浮点数表示和运算的标准。最新标准是 <a
href="https://standards.ieee.org/ieee/754/6210/">IEEE
754-2019</a>，对应国际标准 <a
href="https://www.iso.org/cms/%20render/live/en/sites/isoorg/contents/data/standard/08/09/80985.html">ISO/IEC
60559:2020</a>，预计下一次在 2028 年修订。 http://snti.ru/
这个网站分享了各种国际标准文件的磁力链接，但是可以免费下载的不全，IEC
的只有 61xxx。据说可以给站长发邮件要
<code>popov_al@perm.ru</code>，每个文件一刀乐。在 ISO 官网上下载需要 187
瑞士法郎，合 1000 多人民币。</p></li>
</ul>
]]></content>
      <categories>
        <category>计算机组成原理</category>
      </categories>
  </entry>
  <entry>
    <title>《弗洛伊德及其后继者——现代精神分析思想史》读书笔记</title>
    <url>/blog//Freud-and-Beyond.html</url>
    <content><![CDATA[<p>为什么学精神分析：解决问题 + 重拾阅读能力。</p>
<p>弗洛伊德天天给自己精神分析，结果死于抽烟得的口腔癌。但不能否认他是一位伟大的医生。</p>
<span id="more"></span>
<h2 id="凡例">凡例</h2>
<blockquote>
<p>引用原文</p>
</blockquote>
<p>【自己的注】</p>
<p>其他都是对原文的演绎。而原文是由译者陈祉妍、黄峥、沈东郁翻译自作者斯蒂芬·A.米切尔和玛格丽特·J.布莱克的，加上引用了大量文献。阅读的是
2007 年 9 月第一版。</p>
<h2 id="何为精神分析">何为精神分析</h2>
<p>精神分析是一种心理治疗的方式，是一种学派。</p>
<p>精神分析的过程：</p>
<ul>
<li>把模糊不清的体验细化</li>
<li>把片段的回忆和感受进行整合，并赋予能用语言描述出来的意义</li>
</ul>
<p>【反卷积 + MapReduce】</p>
<blockquote>
<p>人们有时创造出新词来传达旧的观点，以便夸大差异，从而宣称自己具有原创性。有时，人们又把旧的语言扩展，用来传达新的观点，以便夸大相同点，从而宣称自己保持了连续性。（12
页）</p>
</blockquote>
<p>精神分析的目标是解决心理冲突。</p>
<h2 id="当代精神分析">当代精神分析</h2>
<p>弗洛伊德创立了精神分析学，就像牛顿创立了牛顿力学。</p>
<p>后人对其取“精华”，去“糟粕”（本能驱力、俄狄浦斯情结的核心重要性、性和攻击在动机中的首要地位）之后，进一步发展（客体关系理论、自体心理学等）。</p>
<p>精神分析这个学派始终在努力扩展和重新界定自身。</p>
<h2
id="西格蒙德弗洛伊德与经典精神分析传统">西格蒙德·弗洛伊德与经典精神分析传统</h2>
<p>1873 年，弗洛伊德 17
岁，当时德国的考古学家谢里曼通过拼凑零碎的历史文献，确定了古代城市特洛伊位于现在土耳其的沿海平原。这激发了弗洛伊德的想象力，他的挖掘之处不是土地，而是病人的心灵。</p>
<p>【弗洛伊德是奥地利人。维也纳从二战结束后的 1945 年开始，每年都有<a
href="https://tv.cctv.com/special/Vienna2023/index.shtml">新年音乐会</a>】</p>
<h3 id="从大脑到心灵">从大脑到心灵</h3>
<p>弗洛伊德毕业于医学院校，最初是神经心理学的研究者。刚开始他认为癔症是大脑神经出了问题，直到看到同行通过催眠暗示引导出了病人原先并不存在的癔症，还可以通过暗示暂时解除症状。问题的根源在于想法，而不是神经。</p>
<p>【不是你大脑的哪根筋（神经）出了问题，是灵魂（心灵）（想法）出了问题。和西药/中药、细节/整体、白盒测试/黑盒测试、药物治疗/谈话治疗的区别差不多】</p>
<blockquote>
<p>为什么心灵中的某些想法会变得和普通想法如此不同呢？一些想法是怎样变得自己无法知道的呢？它们是怎样具有造成如此严重破坏的能力的呢？</p>
</blockquote>
<p>弗洛伊德的第一个合作者，布洛伊尔，一位维也纳内科医生尝试回答这些问题。他接触过的一个病人认为水是剧毒的，通过布洛伊尔的催眠暗示，病人回想起了她之前看到了“她一个关系不太好的闺蜜的狗”正在舔杯子里的水。出于礼貌，她对医生隐瞒了此事。在催眠状态下释放情绪后，症状消失了。布洛伊尔把这些经验告诉了弗洛伊德，两人在
1893 年出版了第一篇精神分析论文《一份初步交流》：</p>
<blockquote>
<p>癔症是由于被抑制的回忆以及有关的情感所造成的。这些回忆与情感从未以正常方式被经历；他们与心灵的其他部分割裂，结果积累恶化，以破坏性的而且似乎是无法解释的症状形式在表面浮现出来。如果追溯这些症状的源头，症状的意义就会变得清晰，情感就会在大量宣泄中得以释放。然后症状就会消失。</p>
</blockquote>
<p>【刨根问底，开闸放水】</p>
<p>这些最初的临床发现引出了一个问题：为什么某些经历会引发魂不守舍？</p>
<p>布洛伊尔提出，当人在过度疲劳、压力过大时，会进入一种“催眠样状态”，在这种状态下的经历无法被整合进“正常状态”。通过催眠并鼓励病人重新回忆后，分裂就愈合了。他认为，或许某些人比其他人更容易进入催眠样状态，因此更容易成为癔症患者。</p>
<p>而弗洛伊德认为，魂不守舍并不是因为意识的状态改变了，而是这些被解离的回忆和情感是和意识的其余部分冲突的，和意识的其余部分不相容，因此被主动排除在意识觉察之外。</p>
<p>前者认为癔症患者是意识状态容易改变的，变得“被隔开”的人。后者认为癔症患者是充满冲突、向自己和他人隐瞒秘密的人。</p>
<p>【外因与内因、“时运不济”与“矛盾密布的手”】</p>
<h3 id="从催眠到精神分析">从催眠到精神分析</h3>
<p>从 1895 年到 1905
年，弗洛伊德把他的理论和临床治疗相结合，两者互相促进发展。他逐渐发现催眠并不像他和布洛伊尔最初设想的那样有效。</p>
<p>他认为，永久去除症状的关键在于让“无意识内容”变得可以被“正常的意识”大概了解。病人有一种抵抗的力量在避免回想之前的事，弗洛伊德称之为防御（defense）。催眠状态是分析师人为绕过了防御，但是催眠状态结束后，病人对回忆的阻抗就恢复了。分析师告诉病人她的回忆，病人可以知道自己是痛恨那条狗的，或者痛恨那个闺蜜的，但是感受不到这种痛恨的感觉。</p>
<p>于是他开始设想关于心灵的地形模型：</p>
<ul>
<li>无意识：由“不可接受”的想法和情感构成</li>
<li>前意识：由能够变成意识内容的、可接受的想法和情感构成</li>
<li>意识：由任何时间处于意识觉察中的想法和情感构成</li>
</ul>
<p>【对于大部分的正常人，“食粪”在无意识里，“晚上可以吃面”在前意识里，“现在考虑晚上吃什么”在意识里】</p>
<p>伴随着以地形模型为代表的理论进展，也发生了技术上的创新。分析师临床工作的任务从“绕墙”转到了“拆墙”。在上一个世纪之交（19
世纪到 20
世纪），弗洛伊德确定了自由联想的方法，让病人想到什么就说什么，不去检查和筛选，即让病人“成为自己意识流的被动观察者”：</p>
<blockquote>
<p>“仿佛……你是个坐在火车车厢窗边的旅客，向车厢内的某个人描述你所看到的窗外变换的景象”</p>
</blockquote>
<p>自由联想作为一种技术方法帮助分析师了解病人的无意识内容，与此同时防御仍然活跃并可触及。病人是清醒的，可以“说谎”。弗洛伊德发现，病人无法长时间保持自由联想，因为对回忆的“阻抗”与“被压抑的秘密”是紧密联系的。此外，构成病人问题核心的冲突的想法和感受很快转移到分析师身上，病人拒绝谈论令人尴尬或者不合适的内容，病人认为这与分析师有关，这被称为移情。</p>
<p>阻抗和移情并不是治疗的阻碍，而是治疗的核心。请看一位病人的例子：格洛丽亚无法决定是否嫁给与她同居了一段时间的男子。经过一段时间的分析后，分析师发现她在做所有事之前，都会先考虑最坏的后果，这源于她童年的恐惧（见下节）。她对自由联想的恐惧、对分析师解译的恐惧、总是考虑最坏的后果这三者是同源的。如果她任凭自己的想法流淌，她坚信会有危险的想法出现，会失去控制。她始终在监控和审查自己的体验并抑制自己的心理过程，而没有意识到。弗洛伊德发现，对于格洛丽亚这样的病人最有帮助的并不是绕过防御，而是当防御出现时，对其进行探讨。</p>
<p>【打开天窗说亮话，用谈话的方式治疗，简称话疗】</p>
<h3 id="梦">梦</h3>
<p>弗洛伊德本人的梦相当丰富，他也有一些困扰他的神经症症状，很快他成为了自己最重要的病人。他沉浸在自己创造的新技术中，结合自己的梦，把这些自我发现通过信件寄给远在柏林的医生朋友威廉·弗里斯，弗里斯像是弗洛伊德的半个分析师。到
1895 年，弗洛伊德感到自己已经把握了梦是如何形成的。</p>
<blockquote>
<p>梦是冲突愿望的伪装满足（弗洛伊德，1900）</p>
</blockquote>
<p>在睡眠状态下与在催眠状态下类似，阻止“被禁止的愿望”进入意识的力量会变弱。如果这些愿望直接在梦中被表达，梦就会醒。让愿望进入梦的力量和阻碍愿望进入梦的力量在斗争之后达成了一种妥协：把愿望经过二级润饰（凝缩、置换、象征）后进入梦。</p>
<p>【所以说每个人天生就是艺术家】</p>
<p>请看上面的病人，格洛丽亚的梦：她梦见父亲有一次下班回家，鞋上沾了一些恶心的东西，可能是狗屎。不管是什么东西，这使她恐惧。</p>
<p>在现实中，格洛丽亚的弟弟在她五岁时出生。通过回忆，她回想起了她当时对父亲“让母亲怀孕”这个事件里的作用有非常模糊的认识，并最终记起她是嫉妒她父亲“给了她母亲一个孩子”，而不是“给了她自己一个孩子”。弗洛伊德是这么分析的：格洛丽亚是强烈地依恋她的父亲，和她父亲的生殖器的。她与父亲关系里的性兴奋被凝缩成了等父亲回家，而弟弟的出现就像狗屎一样。</p>
<ul>
<li>性兴奋：等父亲回家</li>
<li>生殖器：鞋</li>
<li>弟弟：狗屎</li>
</ul>
<p>【可以把“生殖器”换成“一个令人感到好奇/恐惧/尴尬/不明所以的，人们不愿意提的，并促进了创伤事件发生的新鲜事物”，是同一个意思】</p>
<h3 id="童年性欲">童年性欲</h3>
<p>弗洛伊德通过对一些病人刨根问底，发现所有的回忆都指向童年的创伤经历（六岁之前），并且无一例外与过早接触性有关。这些发现导致弗洛伊德提出了令人争议的幼儿诱惑（infantile
seduction）理论：所有神经症的根源都是因为孩子们过早接触性，感到兴奋、恐惧而又无法理解。等到青春期，孩子们就会被来自数年前的子弹击中。当时普遍的观点是：孩子们是一张白纸，本应在青春期才会大量分泌性激素，结果过早地被成年人干涉。</p>
<p>【这个理论引起争议的原因可能是，“接触性”可以被任何一件事替代】</p>
<p>1896
年，弗洛伊德的父亲去世，他通过自己的梦吃惊地发现：自己的童年并没有过性遭遇，并没有“被引诱”，而是他自己“渴望被引诱”。他对母亲有渴望，而把父亲当成了竞争者，父亲的死使他感到获胜。加上他的一些病人们也恢复了“表面看来像是童年性经历”的记忆。</p>
<p>于是他开始质疑自己的理论。在 1897
年给弗里斯的一封信里写道：这些性经历的大部分可能从未发生过，只是把“愿望和渴求”的记忆错当成了关于“事件”的记忆。</p>
<p>【得不到，就想象自己得到了】</p>
<p>幼儿诱惑理论的推翻，促使弗洛伊德重新理解临床资料，在 1897
年提出幼儿性欲理论：病人的神经症症状所揭示出的冲动、幻想和冲突不是源自外部的污染，而是源自孩子的心灵本身。他越来越坚信，性欲不止会主导神经症病人的童年，而且主导了所有男人和女人的童年。这里的性欲不仅仅包含生殖器，还包含口和肛门，即口欲（吮吸）和肛欲（排便）。</p>
<p>在 1905
年，弗洛伊德发表了《关于性理论的三篇论文》，根据的是本能驱力的观点，这成为弗洛伊德后来所有理论建构的重要基石。弗洛伊德推理道：心灵是释放触动它的刺激的装置。</p>
<blockquote>
<p>心灵的结构是为了容纳、控制，并在可能的情况下释放内部刺激。</p>
</blockquote>
<p>分为外部刺激和内部刺激。外部刺激可以避免，比如吃人的老虎。内部刺激则不断增长，比如饥饿，越不吃越饿。他大量吸收了牛顿的物理学和达尔文的生物学。</p>
<p>【《自然哲学的数学原理》发表于 17 世纪，《物种起源》发表于 19 世纪
1859 年，那时弗洛伊德三岁】</p>
<p>内部刺激的核心是性本能，表现为身体各个部分的紧张，这些紧张需要找到一个客体释放。例如嘴有吸吮的需求，这种需求来自性本能（力比多），需要找到一个客体释放，不管是乳房还是奶嘴。肛门有排泄的需求，孩子们想随时随地排泄，在需求被满足之后，孩子们会感到快乐。而社会化需要限制这些孩子原始的需求：随地大小便会有伤风化，一定程度的整洁必须得建立起来。对这些原始需求克制并升华的人是正常人，没有克制的人是性变态，部分克制的人是神经症患者。</p>
<blockquote>
<p>大量的成人功能的建构不是为了提供经过伪装的满足形式和有效防御，就是提供满足与防御的复杂结合，而后者更为常见。</p>
</blockquote>
<p>根据弗洛伊德的幼儿性欲理论，如果有一个成年人非常爱整洁，说明他/她对肛欲冲动的防御非常高。反之则是一个喜欢制造混乱的人。</p>
<p>【弗洛伊德是从内部看的，如果从外部看，就是言传身教。内外两方面同时看就是，人会被自己的心理、他人的教育和任何其他事物影响。人来自自然，去向自然，天地与我并生，而万物与我为一】</p>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
  </entry>
  <entry>
    <title>《Lost In Tianyi》所表达的</title>
    <url>/blog//lost-in-tianyi.html</url>
    <content><![CDATA[<p>我不是在写精神分析的读书笔记吗，读到了俄狄浦斯情结，然后去搜俄狄浦斯，搜到了俄狄浦斯和斯芬克斯的故事。想起来有一首歌叫《斯芬克斯的谜底》。</p>
<p>很多音乐我都是先听，可能过了很久才明白意思的，因为我听的时候没有注意歌词。所以我可能在听之前不是那种人，而听之后变成了那种人，被音乐塑造了，被获取到的一切信息塑造了，因为没有人告诉我应该怎么做，或者接下来该干什么。</p>
<p>最近重新听了《Lost In
Tianyi》（迷失在天依里）。天依是洛天依，是一位虚拟歌手，有形象的歌声数据库。专辑有
9 首歌，分别来自 9 组创作者。</p>
<span id="more"></span>
<p>第一首，《8102》，是 2018 倒过来——专辑的发行时间是 2018
年。讲的一个人最开始有单纯的愿望，后来受到“历史”和“社会”的影响，但是仍然坚持自己的单纯愿望，过好每一天和珍惜身边的人。这么说肯定是有丢失信息的，因为我是从完整的歌词里总结的，可能每个人理解都不一样。</p>
<p>第二首，《啦哒哒》，讲的两只小猫。“我”这只猫代表创作者，“你”这只猫代表创作者的理想。歌词可以分成四个部分：迷茫的我看到了你、开始创作并追求理想、与理想分离、回归现实的一个人。歌词里没有出现一个“猫”字，但是可以推断出来，是从猫的视角来写的。</p>
<p>第三首，《最大化》，歌词里明确写了“做自己”。而且是在信息时代做自己，“最大化”取自
Windows
操作系统的窗口按钮——第一句歌词就是“穿梭在复制粘贴，再粘贴复制的无数窗口”。</p>
<p>第四首，《风兮风兮》，以写“风”来代指人之间的争斗，或者是各种思想对人的影响。如果单看这一首歌的歌词，可以说是过度解读的。但如果把这张专辑看成一张概念专辑，就可以这么解读。加上这个作者的其他歌词里也用到了“风”的意象。</p>
<p>第五首，《斯芬克斯的谜底》，讲人一生的心态变化。歌名来自希腊神话里斯芬克斯的谜题：什么东西早上四条腿，中午两条腿，晚上三条腿？这首歌是接着上一首歌的，歌词第一句里就有“被风吹散”，所以可以把整张专辑当成概念专辑。俄狄浦斯破解了斯芬克斯的谜题，但是没有破解他自己的谜题。康德写了一本《纯粹理性批判》，但我没看过，只是从字面意思理解：不要相信“纯粹理性”。</p>
<p>第六首，《笔记本上的幻想世界》，我认为是可以鼓励人学习的，与此对应的是“现实的真实世界”。总结出主旨就没意思了，破坏了歌词原来的意境。</p>
<p>第七首，《斯人》，讲两种文化/思想/世界观的碰撞——这首歌的歌词是中文与日文混杂的。两个角色分别由两个歌手演绎，但都是洛天依，洛天依除了汉语数据库还有日语数据库。</p>
<p>第八首，《嘘つきは恋のはじまり》（谎言是恋爱的开始），是一首日文歌，歌名就是主旨。</p>
<p>第九首，《Monologue》（独白），是创作者以洛天依的视角唱给创作者的歌。</p>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
  </entry>
  <entry>
    <title>《草蛇惊一》歌词解读</title>
    <url>/blog//holy-shit-grass-snake.html</url>
    <content><![CDATA[<p>《草蛇惊一》收录于初音未来 V4C 专辑《初梦》，作词是<a
href="https://space.bilibili.com/396967">麦当叔劳劳</a>。</p>
<span id="more"></span>
<p><a href="https://www.bilibili.com/video/BV1Px41177ht/">去 B
站观看</a> | 在线听：</p>
<iframe frameborder="no" width="100%" height="86" src="//music.163.com/outchain/player?type=2&amp;id=515455714&amp;auto=1&amp;height=66">
</iframe>
<p>这应该属于意识流文学。一千个读者心中有一千个哈姆雷特，我认为歌词写的是主人公内心的矛盾。</p>
<p>还可以参考歌词的<a
href="https://coolmikehatsune22.wordpress.com/2020/11/13/snake-in-the-grass/">英文翻译</a>，译者是
coolmikehatsune22。里面有一些和我想的不一样，或者没想到的东西，会在下文说明。</p>
<h2 id="歌名">歌名</h2>
<p>很容易从歌名联想到“打草惊蛇”。</p>
<p>我认为【草蛇惊一】的【一】是指打草的人。</p>
<p>在这里，草、蛇和打草的人都是主人公自己——主人公自己惊动了自己。</p>
<p>非得拆开的话，【草】是身，【蛇】是心，【惊】是内，【一】是外。</p>
<h2 id="主歌一">主歌一</h2>
<h3 id="羡慕风车">羡慕风车</h3>
<blockquote>
<p><em>羡慕风车 不必去四海漂泊 只要能在原地旋转便能体会风的快乐</em></p>
</blockquote>
<p>第一句最重要，是起因。</p>
<p>主人公的内心独白。我们把主人公此时的视角记作“视角 A”。</p>
<p>【风车】有三层意思：</p>
<ol type="1">
<li>指被【风】驱动的人或物。</li>
<li>指<a
href="https://book.douban.com/subject/34908576/">《堂吉诃德》</a>里的风车所指，即假想敌。</li>
<li>指主人公自己。</li>
</ol>
<p>如果你对【风】这个字的想法和我一样，那你就能明白我在说什么。在网页底部列举了一些关于【风】的其他歌曲。</p>
<p>【原地旋转】就是不作出改变，变成石头，最后变成流浪的风。</p>
<h3 id="及时行乐">及时行乐</h3>
<blockquote>
<p><em>及时行乐 外婆的故事里说因果报应乃白日见鬼</em></p>
</blockquote>
<p>视角 A 想要把自己的人生观向【风车】靠拢。</p>
<p>英文翻译是：“毕竟，奶奶在她的故事里总是在说，你不应该指望报应会降临到坏人身上”。</p>
<h3 id="说书">说书</h3>
<blockquote>
<p><em>转折 没曾想单木不林一丝不线如我 孤单的说书者也能偷乐</em></p>
</blockquote>
<p>主人公突然转换为上帝视角，把自己代入说书者。这样就像<a
href="https://movie.douban.com/subject/1292064/">看电影</a>一样，不用再担心各种现实问题了。</p>
<h3 id="相忘于江湖">相忘于江湖</h3>
<blockquote>
<p><em>相濡以沫不如相忘于江湖 外公总说这是他孤单的借口</em></p>
</blockquote>
<p>进一步妄想自己是【相忘于江湖】的鱼，逃避现实。</p>
<blockquote>
<p>《庄子·内篇·大宗师》：</p>
<ul>
<li>泉涸，鱼相与处于陆，相呴以湿，相濡以沫，不如相忘于江湖。与其誉尧而非桀也，不如两忘而化其道。</li>
</ul>
<p>泉水干了，鱼聚集在陆地。与其用唾沫互相润湿对方，不如各自去往大江大湖，互相忘记。说尧好，说桀不好，和我有什么关系？</p>
<p>《庄子·外篇·天运》：</p>
<ul>
<li>孔子见老聃而语仁义。老聃曰：“夫………………夫鹄不日浴而白，乌不日黔而黑。黑白之朴，不足以为辩，名誉之观，不足以为广。泉涸，鱼相与处于陆，相呴以湿，相濡以沫，不若相忘于江湖。”</li>
</ul>
<p>白天鹅不用每天沐浴，毛自然就是白的；黑乌鸦不用每天染色；毛自然就是黑的。乌鸦的黑和天鹅的白都是出于本然，不足以分辨谁优谁劣；名声和荣誉，更不用去散播张扬。</p>
</blockquote>
<p>英文翻译则非常直白：“与其帮助挽救我们能挽救的东西，不如完全忘记它，这是爷爷总是说的（他孤身一人的）借口”。</p>
<h2 id="主歌二">主歌二</h2>
<h3 id="放轻松">放轻松</h3>
<blockquote>
<p><em>放轻松 压力别弄得太大 飘飘欲仙欲死不知是不是自己的风格</em></p>
</blockquote>
<p>主人公认为自己逃避现实是不对的，此时视角转换回了视角 A。</p>
<p>前半部分是视角 A 对自己说的：没事，放轻松一点。</p>
<p>后半部分是视角 A 对说书者说的：这已经成为你的风格了吗？</p>
<h3 id="除根">除根</h3>
<blockquote>
<p><em>一语道破 下手斩草除根哭吧哭吧 无聊卑微笑话</em></p>
</blockquote>
<p>视角 A【一语道破】了说书者的伪装，并否定掉了风车的人生观。</p>
<p>认为有这种想法的自己是【无聊卑微笑话】，要把这种想法【斩草除根】。</p>
<p>【风车】你就尽情去哭吧。</p>
<h3 id="暴躁">暴躁</h3>
<blockquote>
<p><em>音色也在不知不觉中变得低沉 就像患了名为暴躁的病一样</em></p>
</blockquote>
<p>主人公在否定自己之后，【风车】的一面并没有消失，而是在反噬视角
A。</p>
<p>主人公的【音色】逐渐【低沉】，内心逐渐暴躁。</p>
<h3 id="不回念">不回念</h3>
<blockquote>
<p><em>快停止吧 那张顽固蠢蛋的终身证明我不想再去想念</em></p>
</blockquote>
<p>风车和视角 A
在脑海里互相争斗。主人公希望自己不要再胡思乱想了，给自己开了【顽固蠢蛋的终身证明】。</p>
<p>有马原“否定之否定”规律的影子。</p>
<h2 id="导歌">导歌</h2>
<h3 id="子龙我就不走">子龙我就不走</h3>
<blockquote>
<p><em>一不做二不休自在风流 乐不思蜀子龙我就不走</em></p>
</blockquote>
<p>对于一件事，我要么不做，要么就做到最好，我觉得这样太酷啦；</p>
<p>赵子龙救了刘禅最终导致乐不思蜀，这让我怎么做接下来每一步的决定呢？干脆不做了。</p>
<p>不管怎么断句都可以：</p>
<ul>
<li>乐不思蜀/子龙我/就不走</li>
<li>乐不思蜀子龙/我就不走</li>
</ul>
<p>都是讲主人公不想去走赵云的【乐不思蜀】这一条路，然而这两件事隔了好几十年。</p>
<p>英文注释【子龙】：‘child dragon’, the eponymous snake。</p>
<p>正好呼应歌名，不管是【赵子龙】还是【蛇】都能代指主人公。</p>
<h3 id="金蝉脱壳">金蝉脱壳</h3>
<blockquote>
<p><em>过五关杀六将公子献头 金蝉脱壳孙老头八十二变我有</em></p>
</blockquote>
<p>主人公一会儿代入关羽，一会儿代入荆轲/太子丹。并预想了像他们一样做事之后的结果。</p>
<p>（但是在荆轲刺秦的故事中，是荆轲带着樊於期的头，公子不是带的，也不是被带的。也可能不是这个典故，百度搜【公子献头】出自漫画《火凤燎原》。也可能压根没有典故，只是一种代指）</p>
<p>【金蝉脱壳】指主人公抽离自己为说书者。</p>
<p>【孙老头】就是孙猴子，【八十二变】指思想转换的复杂性。</p>
<p>不管怎么断句都可以：</p>
<ul>
<li>金蝉脱壳/孙老头八十二变我有</li>
<li>金蝉脱壳孙老头/八十二变我有</li>
<li>金蝉脱壳孙老头八十二变/我有</li>
</ul>
<p>我认为是第一种，【金蝉脱壳】和前半句【过五关杀六将公子献头】是连在一起的，用【孙老头八十二变】来修饰主人公想法的混乱程度。</p>
<p>歌手断句是第二种——当然不是初音未来现场发挥的，是作者设计的，可能会听起来更舒服。另外，选择【八十二变】的原因还可能有，【头——八】两个字的连接处确实比【头——七】不管是唱起来还是听起来都更舒服。以及【我】比【孙老头】还多十变。</p>
<p>英文翻译则是第三种，用【孙老头八十二变】来修饰【我有】很多种【金蝉脱壳】的行动。</p>
<h3 id="翻筋斗">翻筋斗</h3>
<blockquote>
<p><em>百闻不如一见来翻筋斗 福星高照五湖四海都随我漫步遨游 山雨欲来风满楼</em></p>
</blockquote>
<p>终于要作决定了！但是在做出决定之前的继续妄想，构成了主人公脑海里的狂风。</p>
<p>【百闻不如一见】【翻筋斗】指【孙老头】想要做出决定。</p>
<p>至于是决定行动，还是决定继续妄想，不得而知。</p>
<h2 id="副歌">副歌</h2>
<h3 id="再见">再见</h3>
<blockquote>
<p><em>再见吧 提线的傀儡师 耻笑咚咚跳的心脏和那不实际的憧憬</em></p>
</blockquote>
<p>傀儡是身体，傀儡师是幻想。主人公向对自己造成心惊肉跳的幻想作别。</p>
<p>英文翻译【不实际的憧憬】为 lofty ideals（远大的理想）。</p>
<h3 id="暴露">暴露</h3>
<blockquote>
<p><em>玩笑吧 我不想听假话 暴露皆大欢喜不攻自破不成熟的笑话</em></p>
</blockquote>
<p>英文翻译：“你想开什么玩笑就开什么玩笑，但我不会再屈服于你的谎言，我会把你一直在快乐地兜售的所有那些毫无实质意义、脆弱的垃圾都吹出来。”</p>
<p>我对前半句的翻译有点不认同，但认为后半句翻译得非常好。</p>
<p>我认为这写的是主人公【不想听假话】的想法和【暴露笑话】的行为，是指主人公给自己的
EQ 开了低通滤波。</p>
<h3 id="再次不回念">再次不回念</h3>
<blockquote>
<p><em>怠慢吗 或许只是懈怠吧 嘁嘁咔咔咚咚咭咭再也不想它</em></p>
</blockquote>
<p>主人公认为，这都是由自己的【怠慢】或者【懈怠】造成的。在又一番思想斗争之后停止了思考——然后进入第二段主歌。</p>
<h2 id="报菜名时间">报菜名时间</h2>
<p>歌词里含有【风】的：</p>
<ul>
<li><del><em>“野马也，尘埃也，生物之以息相吹也”</em></del></li>
<li><a
href="https://www.bilibili.com/video/BV1WR4y147x4">《我没有歌能给你听》</a>：讲理想与现实，讲拉扯，辅助理解风的意象</li>
<li><a
href="https://music.163.com/song?id=399343720">《酷瓜树》</a>：讲傻瓜，辅助理解风、树、泥土的意象</li>
<li><a
href="https://music.163.com/#/song?id=411314657">《大风吹》</a>：讲风的一种后果【吹到谁谁就倒霉】</li>
<li><a
href="https://music.163.com/#/song?id=381872">《时间》</a>：讲拉扯，辅助理解风的意象</li>
<li><a
href="https://music.163.com/#/program?id=2492186574">《风兮风兮》</a>：讲风的几种后果【生野草】【惊白鸟】</li>
<li><a
href="https://www.bilibili.com/video/BV1wT4y1k7Pw">《白鸟过河滩》</a>：讲拉扯，辅助理解风、海、白鸟的意象</li>
<li><a
href="https://www.bilibili.com/video/BV1Lw411d7vS">《斩草歌》</a>：辅助理解风、草的意象</li>
<li><a
href="https://www.bilibili.com/video/BV1Rp4y1P7Qe">《四风判词》</a>：辅助理解风的意象</li>
<li><a href="https://www.dizzylab.net/d/Conformity/">《大风歌
20XX》</a>：讲捧杀，被捧杀的人和参与了捧杀的人</li>
<li><a
href="https://www.bilibili.com/video/BV1nP4y1W7dr/">《石头歌》</a>：讲变与不变，讲永恒</li>
</ul>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
  </entry>
  <entry>
    <title>《韶音赋》歌词注解</title>
    <url>/blog//shao-yin-fu.html</url>
    <content><![CDATA[<ul>
<li>韶：一种乐曲，后引申为“美好的”。</li>
<li>赋：一种文体，用于描写和抒情。</li>
</ul>
<p>词作者是<a
href="https://space.bilibili.com/109564">战场原妖精</a>。</p>
<span id="more"></span>
<h2 id="词">词</h2>
<h3 id="壹">壹</h3>
<blockquote>
<p><i>浮黎元始开天地 诸神创世天各一</i><br/>
<i>三清六御轮回助 神界人间满紫气</i><br/></p>
</blockquote>
<ul>
<li><p><strong>浮黎元始</strong>：浮黎元始天尊，指盘古。</p>
<p>——也有说指玉皇大帝的，而盘古是祂的长子【玉清元始天尊】。</p>
<p>这不重要，只需要知道祂是神仙，是创世者，是对自然的想象，是一种信仰。</p>
<p>【三清六御】同理，也有三清四御的说法。可能是出于字形和音韵美，选择【浮黎】比【玉清】好，【三清六御】比【三清四御】好。（应该没有道长能找到这）</p></li>
<li><p><strong>紫气</strong>：祥瑞之气。</p></li>
</ul>
<h3 id="贰">贰</h3>
<blockquote>
<p><i>天边远山泛青光 忽而花落花满殇</i><br/>
<i>我从雾中乘风来 只为伴君不思量</i><br/></p>
</blockquote>
<ul>
<li><strong>青光</strong>：绿色的光。也指光阴、时光。</li>
<li><strong>殇</strong>：非“正常”死亡：未成年而死、战死、为国捐躯。</li>
</ul>
<p>【我】是一名来自世界之外的旁观者：什么东西都不想，主打一个陪伴【君】。</p>
<h3 id="叁">叁</h3>
<blockquote>
<p><i>伏羲女娲神农氏 江河淮济育生灵</i><br/>
<i>南宫北斗映贤尚 天涯海角随君行</i><br/></p>
</blockquote>
<ul>
<li><strong>伏羲女娲神农氏</strong>：用三位代指多位。神农就是“炎黄子孙”的炎帝。</li>
<li><strong>江河淮济</strong>：长江、黄河、淮河、济水。四条流入大海的河。</li>
<li><strong>南宫北斗</strong>：星辰。</li>
<li><strong>贤尚</strong>：尚：尊崇。可以把【贤尚】空想成【人】的意思。</li>
</ul>
<h3 id="肆">肆</h3>
<blockquote>
<p><i>生来无欲享富贵 但求为君咏思绪</i><br/>
<i>若夫德行无领会 自退远方乘浪归</i><br/></p>
</blockquote>
<ul>
<li>【若夫】：句首语气词，“至于……的话”。</li>
</ul>
<p>要是【我】没有【领会】到【君】的【德行】，那【我】就要回去了。——这是其中一种理解方式。</p>
<h3 id="伍">伍</h3>
<blockquote>
<p><i>我带着梦想 带着希望 带着力量</i><br/>
<i>探寻人间的感伤</i><br/></p>
</blockquote>
<h3 id="陆">陆</h3>
<blockquote>
<p><i>请赋予我理想 请赋予我希望</i><br/>
<i>请赋予我一颗炽热的心房</i><br/> <i>让这情感释放</i><br/></p>
</blockquote>
<ul>
<li>【赋予】和【赋】是紧密相关的。</li>
<li>【一颗心房】并不是量词使用不当。即使在生物学上也有心房、心室的概念，比如：</li>
</ul>
<style>
   .r{
      color: red;
   }
   .b{
      color: blue;
   }
</style>
<p><span class="r">动脉血</span>从【左心室】流入<span
class="r">主动脉</span>，途经心肺之外的全身毛细血管消耗氧，变成<span
class="b">静脉血</span>，经<span
class="b">上腔、下腔静脉</span>流回【右心房】。这被称为【体循环】。</p>
<p><span class="b">静脉血</span>从【右心室】流入<span
class="r">肺动脉</span>，途径肺里的毛细血管吸收氧，变成<span
class="r">动脉血</span>，经<span
class="b">肺静脉</span>流回【左心房】。这被称为【肺循环】。</p>
<h3 id="柒">柒</h3>
<blockquote>
<p><i>泪水模糊了眼眶 为何这般闪亮</i><br/>
<i>就算我终会消亡 终会迷茫</i><br/> <i>请让我带走这份熵</i><br/></p>
</blockquote>
<ul>
<li>【熵】是物理学的一个概念，用于描述系统的混乱程度。</li>
</ul>
<p>对于一个孤立的（不与外界交换能量和质量的）系统，其熵会一直增加。这被称为热力学第二定律。</p>
<p>浅显不恰当的例子就是：如果不整理耳机线，它总是会缠起来。</p>
<h2 id="曲">曲</h2>
<p>曲子有三个发布版本：</p>
<ul>
<li>初版由洛天依演唱，战场原妖精词曲调，2012 年发布于<a
href="https://www.bilibili.com/video/BV1ax411F7z2/">哔哩哔哩</a>。</li>
<li>2014 年作者重调重混，由洛天依演唱，收录于专辑<a
href="https://www.bilibili.com/video/av1042693/">《平行四界Quadimension》</a>。</li>
<li>2016 年作者重调重混，由星尘演唱，发布于<a
href="https://www.bilibili.com/video/BV1us41167ww/">哔哩哔哩</a>。</li>
</ul>
<p>曲子结构并没有什么大变化。这是第二个版本：</p>
<iframe frameborder="no" width="100%" height="86" src="//music.163.com/outchain/player?type=2&amp;id=429460265&amp;auto=1&amp;height=66">
</iframe>
<p>曲风属于【旋律金属/民谣金属】（根据专辑宣传视频里的介绍）。</p>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
  </entry>
  <entry>
    <title>乐理 - A0 - 频率与音程</title>
    <url>/blog//M/A0/</url>
    <content><![CDATA[<ul>
<li>钢琴琴键的声音频率</li>
<li>音程与升降号</li>
<li>音程速查表</li>
</ul>
<span id="more"></span>
<h2 id="声音的频率">声音的频率</h2>
<p>声音是由声源振动产生的，通过机械波传递。</p>
<p>声音的频率就是机械波的频率，也是声源振动的频率。</p>
<p>比如声源振动 <span class="math inline">\(440\)</span>
次每秒，频率就是 <span
class="math inline">\(440\mathrm{Hz}\)</span>。“每秒”这个单位 <span
class="math inline">\(\mathrm{s^{-1}}\)</span> 也记作赫兹 <span
class="math inline">\(\mathrm{Hz}\)</span>，是国际单位制“秒”的导出单位。</p>
<p>暂时先不管“基频”、“泛频”等概念。</p>
<h2 id="钢琴琴键的声音频率">钢琴琴键的声音频率</h2>
<ol type="1">
<li><p>规定一个基准频率，比如 <span
class="math inline">\(440\mathrm{Hz}\)</span>，作为第一个音。</p></li>
<li><p>把第一个音的频率乘上 <span
class="math inline">\(\sqrt[12]{2}\)</span>，就得到第二个音。一直乘，乘了十二次之后，第十三个音的频率正好是第一个音频率的两倍。</p>
<p>这十三个音把一个 <span class="math inline">\(1:2\)</span>
的频率区间分成了十二个部分，每个音的频率都是对应部分的端点，相邻两音的频率比为
<span
class="math inline">\(1:\sqrt[12]{2}\)</span>。这就是十二平均律。</p></li>
<li><p>如果把第一个音（<span
class="math inline">\(440\mathrm{Hz}\)</span>）记作<code>A4</code>，往前乘十二次，得到
<span class="math inline">\(880\mathrm{Hz}\)</span>
的音，就记作<code>A5</code>。同理，再乘十二次，得到 <span
class="math inline">\(1760\mathrm{Hz}\)</span> 就是<code>A6</code>。</p>
<p>还可以往后除，<span class="math inline">\(220\mathrm{Hz}\)</span>
是<code>A3</code>，<span class="math inline">\(110\mathrm{Hz}\)</span>
是<code>A2</code>。</p>
<p>同理。<span class="math inline">\(27.5\mathrm{Hz}\)</span>
是<code>A0</code>，<span class="math inline">\(3520\mathrm{Hz}\)</span>
是<code>A7</code>。</p>
<p><code>A7</code>再往前乘三次，得到频率为 <span
class="math inline">\(3520 \times \sqrt[4]{2} \mathrm{Hz}\)</span>
的音，记作<code>C8</code>。</p></li>
<li><p>从<code>A0</code>到<code>C8</code>，有 88 个音，频率构成首项为
<span class="math inline">\(27.5\)</span>，公比为 <span
class="math inline">\(\sqrt[12]{2}\)</span> 的等比数列。这就是 88
键钢琴每个琴键的频率。</p></li>
</ol>
<p>上面是规定 <span class="math inline">\(\mathrm{A4=440Hz}\)</span>
时，还可以有其他规定。</p>
<h2 id="音程">音程</h2>
<p>两个音之间的频率比，称为音程。</p>
<p>频率比为 <span class="math inline">\(1:2\)</span>
的两个音之间，音程称为一个<strong>纯八度</strong>（简称八度）。</p>
<p>快速认识钢琴一个八度里的音：</p>
<p><img src="/blog/images/piano.webp"></p>
<p>为什么这么命名，先别管。</p>
<p>两个相邻琴键的频率比，比如<code>C4</code>和<code>C#4</code>之间，频率比为
<span
class="math inline">\(1:\sqrt[12]{2}\)</span>，称为一个<strong>半音</strong>。也叫小二度。</p>
<p>两个琴键相隔一个琴键的频率比，比如<code>C4</code>和<code>D4</code>之间，频率比为
<span
class="math inline">\(1:\sqrt[6]{2}\)</span>，称为两个半音。也叫一个<strong>全音</strong>或大二度。</p>
<h2 id="音程速查表">音程速查表</h2>
<table>
<colgroup>
<col style="width: 14%" />
<col style="width: 17%" />
<col style="width: 17%" />
<col style="width: 17%" />
<col style="width: 17%" />
<col style="width: 17%" />
</colgroup>
<thead>
<tr class="header">
<th>相隔半音数</th>
<th>音程名（纯）</th>
<th>音程名（大）</th>
<th>音程名（小）</th>
<th>音程名（增）</th>
<th>音程名（减）</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>纯一度</td>
<td></td>
<td></td>
<td></td>
<td>减二度</td>
</tr>
<tr class="even">
<td>1</td>
<td></td>
<td></td>
<td>小二度</td>
<td>增一度</td>
<td></td>
</tr>
<tr class="odd">
<td>2</td>
<td></td>
<td>大二度</td>
<td></td>
<td></td>
<td>减三度</td>
</tr>
<tr class="even">
<td>3</td>
<td></td>
<td></td>
<td>小三度</td>
<td>增二度</td>
<td></td>
</tr>
<tr class="odd">
<td>4</td>
<td></td>
<td>大三度</td>
<td></td>
<td></td>
<td>减四度</td>
</tr>
<tr class="even">
<td>5</td>
<td>纯四度</td>
<td></td>
<td></td>
<td>增三度</td>
<td></td>
</tr>
<tr class="odd">
<td>6</td>
<td></td>
<td></td>
<td></td>
<td>增四度</td>
<td>减五度</td>
</tr>
<tr class="even">
<td>7</td>
<td>纯五度</td>
<td></td>
<td></td>
<td></td>
<td>减六度</td>
</tr>
<tr class="odd">
<td>8</td>
<td></td>
<td></td>
<td>小六度</td>
<td>增五度</td>
<td></td>
</tr>
<tr class="even">
<td>9</td>
<td></td>
<td>大六度</td>
<td></td>
<td></td>
<td>减七度</td>
</tr>
<tr class="odd">
<td>10</td>
<td></td>
<td></td>
<td>小七度</td>
<td>增六度</td>
<td></td>
</tr>
<tr class="even">
<td>11</td>
<td></td>
<td>大七度</td>
<td></td>
<td></td>
<td>减八度</td>
</tr>
<tr class="odd">
<td>12</td>
<td>纯八度</td>
<td></td>
<td></td>
<td>增七度</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="升降号">升降号</h2>
<p><span class="math inline">\(\sharp\)</span>
为升号（sharp），用于把一个音升高半音。</p>
<p>比如 <span class="math inline">\(\mathrm{B \sharp 4 =
C5}\)</span>。<code>B#4 = C5</code></p>
<p><span class="math inline">\(\flat\)</span>
为降号（flat），用于把一个音降低半音。</p>
<p>比如 <span class="math inline">\(\mathrm{D \flat 4 = C \sharp
4}\)</span>。<code>Db4 = C#4</code></p>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
  </entry>
  <entry>
    <title>用 GDB 查看变量内存</title>
    <url>/blog//CO/gdb/</url>
    <content><![CDATA[<p>起因是想验证浮点数的存储方式。</p>
<p><a
href="https://baseconvert.com/ieee-754-floating-point">这个网站</a>可以实现普通十进制数与
IEEE 754 浮点数的相互转换。</p>
<span id="more"></span>
<p>示例程序：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> num = <span class="number">1.7</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在第六行打上断点，VSCode 开调试，在调试控制台里：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-<span class="built_in">exec</span> x/4tb &amp;num</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-exec</code> 执行命令</li>
<li><code>x</code> 查看内存</li>
<li><code>4</code> 输出 4 个单元
<ul>
<li>不写默认为 <code>1</code></li>
</ul></li>
<li><code>t</code> 以二进制形式输出
<ul>
<li><code>x</code> 十六进制</li>
</ul></li>
<li><code>b</code> 以【一个字节】为一个单元
<ul>
<li><code>h</code> 两个字节</li>
<li><code>w</code> 四个字节</li>
<li><code>g</code> 八个字节</li>
</ul></li>
<li><code>&amp;</code>取变量地址</li>
</ul>
<p>输出结果：</p>
<p><code>0x61fe1c: 10011010 10011001 11011001 00111111</code></p>
<p>从右往左排列后：</p>
<p><code>00111111 11011001 10011001 10011010</code></p>
<p>才是<code>float 1.7</code>的二进制表示。</p>
<p>还可以直接用</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-<span class="built_in">exec</span> x/tw &amp;num</span><br></pre></td></tr></table></figure>
<p>输出四个字节，结果：</p>
<p><code>0x61fe1c: 00111111110110011001100110011010</code></p>
]]></content>
      <categories>
        <category>计算机组成原理</category>
      </categories>
  </entry>
  <entry>
    <title>乐理 - A♯0 - 音名与唱名、音阶与音级</title>
    <url>/blog//M/A%E2%99%AF0/</url>
    <content><![CDATA[<ul>
<li>音名与唱名</li>
<li>七声音阶及音级</li>
</ul>
<span id="more"></span>
<p><em>英文并不一定是正确的专业名词</em></p>
<h2 id="音名和唱名">音名和唱名</h2>
<ul>
<li><p>音名（pitch name，音高名称）</p>
<ul>
<li><p><code>C4</code>、<code>C#4</code>、<code>D4</code>等是音名，对应<strong>绝对音高</strong>。</p></li>
<li><p>比如 <span class="math inline">\(\mathrm{C4 = 220 \times
\sqrt[4]{2} Hz}\)</span>。</p></li>
</ul></li>
</ul>
<p><img src="/blog/images/piano.webp"></p>
<ul>
<li><p>唱名（sol-fa note，唱名表示法<a href="#fn1" class="footnote-ref"
id="fnref1" role="doc-noteref"><sup>1</sup></a>中的音符）</p>
<ul>
<li><p><code>do</code>、<code>re</code>、<code>mi</code>、<code>fa</code>、<code>sol</code>、<code>la</code>、<code>ti</code>
是唱名，对应<strong>相对音高</strong>。</p></li>
<li><p>在简谱里记作
<code>1</code>、<code>2</code>、<code>3</code>、<code>4</code>、<code>5</code>、<code>6</code>、<code>7</code>。</p></li>
<li><p>我们可以<strong>规定</strong> <code>1</code> 至 <code>7</code>
分别<strong>对应</strong>七个白键 <code>C4</code> 至
<code>B4</code>。这时简谱头部会有 <span class="math inline">\(\mathrm{1
= C}\)</span>。</p></li>
<li><p>在简谱里，如果用 <span class="math inline">\(1\)</span> 表示
<span class="math inline">\(\mathrm{C4}\)</span>，那么 <span
class="math inline">\(\mathrm{\dot{1}}\)</span> 就表示 <span
class="math inline">\(\mathrm{C5}\)</span>。<span
class="math inline">\(\mathrm{\dot{\dot{1}}}\)</span> 表示 <span
class="math inline">\(\mathrm{C6}\)</span>，<span
class="math inline">\(\underset{·}{1}\)</span> 表示 <span
class="math inline">\(\mathrm{C3}\)</span>，以此类推。</p></li>
</ul></li>
</ul>
<h2 id="音阶">音阶</h2>
<blockquote>
<p>在音乐理论中，音阶（scale，尺度）是按基本频率或音高排序的任何一组音符。按音高递增排序的音阶是升序音阶，按音高递减排序的音阶是降序音阶。<a
href="#fn2" class="footnote-ref" id="fnref2"
role="doc-noteref"><sup>2</sup></a></p>
</blockquote>
<p><code>A0 B0 C1 D1 E1 F1 G1 A1 B1 ... C4 D4 E4 F4 G4 A4 B4 ... C7 D7 E7 F7 G7 A7 B7 C8</code>
就是一组升序音阶，对应钢琴的所有白键。</p>
<p>在上面的例子中，每个八度里用到了七个音名<code>C D E F G A B</code>（不包括区间右端点），这被称为<strong>七声音阶</strong>（heptatonic
scale）。</p>
<h2 id="音级">音级</h2>
<p>七声音阶里有七个音级（degree，刻度）：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">音级</th>
<th>名称</th>
<th>英文名称</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><span
class="math inline">\(Ⅰ\)</span></td>
<td>主音</td>
<td>tonic</td>
</tr>
<tr class="even">
<td style="text-align: center;"><span
class="math inline">\(Ⅱ\)</span></td>
<td>上主音</td>
<td>supertonic</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><span
class="math inline">\(Ⅲ\)</span></td>
<td>中音</td>
<td>mediant</td>
</tr>
<tr class="even">
<td style="text-align: center;"><span
class="math inline">\(Ⅳ\)</span></td>
<td>下属音</td>
<td>subdominant</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><span
class="math inline">\(Ⅴ\)</span></td>
<td>属音</td>
<td>dominant</td>
</tr>
<tr class="even">
<td style="text-align: center;"><span
class="math inline">\(Ⅵ\)</span></td>
<td>下中音</td>
<td>submediant</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><span
class="math inline">\(Ⅶ\)</span></td>
<td>导音</td>
<td>subtonic / leading note</td>
</tr>
</tbody>
</table>
<aside id="footnotes" class="footnotes footnotes-end-of-document"
role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p><a
href="https://en.wikipedia.org/wiki/Solmization">https://en.wikipedia.org/wiki/Solmization</a><a
href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p><a
href="https://en.wikipedia.org/wiki/Scale_(music)">https://en.wikipedia.org/wiki/Scale_(music)</a><a
href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</aside>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
  </entry>
  <entry>
    <title>乐理 - B0 - 中古调式</title>
    <url>/blog//M/B0/</url>
    <content><![CDATA[<ul>
<li>【音阶相同】是什么意思</li>
<li>调式与移调</li>
<li><span class="math inline">\(7 \times 12\)</span> 种中古调式</li>
<li>不同的中古调式可能使用相同的琴键</li>
</ul>
<span id="more"></span>
<h2 id="音阶相同是什么意思">【音阶相同】是什么意思</h2>
<p><span class="math inline">\(\mathrm{C-D-E-F-G-A-B}\)</span> 和</p>
<p><span class="math inline">\(\mathrm{A-B-C-D-E-F-G}\)</span>
音阶相同吗？</p>
<p>这两组音阶分别都是同一个八度里的音（不包括右端点）。</p>
<p>如果把“音阶”理解为【无限扩展到多个八度后，所有音的绝对音高】的话，得到的答案是相同的，因为【它们都使用了钢琴的所有白键】。</p>
<p>但是看别人网上的回答，这两组音阶是不同的。</p>
<p>原因在于：</p>
<ul>
<li><p>首先，主音不同。 前者以 <span
class="math inline">\(\mathrm{C}\)</span> 为主音，后者以 <span
class="math inline">\(\mathrm{A}\)</span> 为主音。</p></li>
<li><p>其次，音级之间的音程关系（相隔的半音数）不同。</p>
<p>前者为 <span class="math inline">\(2-2-1-2-2-2-1\)</span>，</p>
<p>后者为 <span
class="math inline">\(2-1-2-2-1-2-2\)</span>。（算上下一个八度里的主音）</p></li>
</ul>
<p>我们说两组音阶相同，意思是<strong>它们的主音、音程关系都相同</strong>。</p>
<h2 id="调式">调式</h2>
<p>狭义的调式（mode） = 主音 + 音程关系</p>
<ol type="1">
<li>确定一个起始音（主音）。</li>
<li>从主音开始，往后（高音方向）取不同的音级。这些不同的音相隔的半音数可能不同，直到取完一个八度。</li>
<li>再往前、往后取，直到取完所有八度。</li>
</ol>
<p>比如：</p>
<ul>
<li>以 <span class="math inline">\(\mathrm{C}\)</span>
为主音，音程关系为 <span class="math inline">\((2-2-1-2-2-2-1)\)</span>
的调式，称为 <span class="math inline">\(\mathrm{C}\)</span>
<strong>自然大调</strong>。<code>C Major</code> 用到的音名为： <span
class="math display">\[
\mathrm{...B3-C4-D4-E4-F4-G4-A4-B4-C5...}
\]</span></li>
<li>以 <span class="math inline">\(\mathrm{A}\)</span>
为主音，音程关系为 <span class="math inline">\((2-2-1-2-2-2-1)\)</span>
的调式，称为 <span class="math inline">\(\mathrm{A}\)</span>
<strong>自然大调</strong>。<code>A Major</code> 用到的音名为： <span
class="math display">\[
\mathrm{...G\sharp3-A4-B4-C\sharp4-D4-E4-F\sharp4-G4\sharp-A5...}
\]</span></li>
<li>以 <span class="math inline">\(\mathrm{A}\)</span>
为主音，音程关系为 <span class="math inline">\((2-1-2-2-1-2-2)\)</span>
的调式，称为 <span class="math inline">\(\mathrm{A}\)</span>
<strong>自然小调</strong>。<code>A Minor</code> 用到的音名为： <span
class="math display">\[
\mathrm{...G3-A4-B4-C4-D4-E4-F4-G4-A5...}
\]</span></li>
</ul>
<h2 id="移调">移调</h2>
<p>移调（transpose）就是把所有音同时升高或降低相同的半音数。</p>
<p>移调前后，所有音的相对间隔不变。即音程关系不变。</p>
<h2 id="中古调式">中古调式</h2>
<p>7 种中古调式（church
mode，教会调式）是指广义的调式，只确定了音程关系，还没确定主音。</p>
<p>即确定了<code>主音-上主音-中音-下属音-属音-下中音-导音-主音</code>之间相隔的半音数。</p>
<table>
<colgroup>
<col style="width: 38%" />
<col style="width: 44%" />
<col style="width: 16%" />
</colgroup>
<thead>
<tr class="header">
<th>调式名</th>
<th>别名/结构相同的调式</th>
<th>相隔的半音数</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>伊奥尼亚调式<br/>Ionian mode</td>
<td><strong>自然大调</strong><code>Major</code><br/>中国七声清乐宫调</td>
<td><code>2-2-1-2-2-2-1</code></td>
</tr>
<tr class="even">
<td>多利亚调式<br/>Dorian mode</td>
<td>中国七声清乐商调</td>
<td><code>2-1-2-2-2-1-2</code></td>
</tr>
<tr class="odd">
<td>弗里几亚调式<br/>Phrygian mode</td>
<td>中国七声清乐角调</td>
<td><code>1-2-2-2-1-2-2</code></td>
</tr>
<tr class="even">
<td>利底亚调式<br/>Lydian mode</td>
<td></td>
<td><code>2-2-2-1-2-2-1</code></td>
</tr>
<tr class="odd">
<td>混合利底亚调式<br/>Mixolydian mode</td>
<td>中国七声清乐徵调</td>
<td><code>2-2-1-2-2-1-2</code></td>
</tr>
<tr class="even">
<td>爱奥尼亚调式<br/>Aeolian mode</td>
<td><strong>自然小调</strong><code>Minor</code><br/>中国七声清乐羽调</td>
<td><code>2-1-2-2-1-2-2</code></td>
</tr>
<tr class="odd">
<td>洛克里亚调式<br/>Iocrian mode</td>
<td></td>
<td><code>1-2-2-1-2-2-2</code></td>
</tr>
</tbody>
</table>
<p>在确定了主音之后，就是狭义的 <span class="math inline">\(7 \times
12\)</span> 种调式。因为一个八度里的 <span
class="math inline">\(12\)</span> 个音每一个都可以作为主音。</p>
<p>比如以 <span class="math inline">\(\mathrm{C}\)</span>
为主音的伊奥尼亚调式，就叫 <code>C Ionian</code>、
<code>C Major</code>、“<span class="math inline">\(\mathrm{C}\)</span>
自然大调” 或者 “<span class="math inline">\(\mathrm{C}\)</span>
大调”。</p>
<h2
id="不同的中古调式可能使用相同的琴键">不同的中古调式可能使用相同的琴键</h2>
<p>仔细观察 7 种中古调式，你会发现【相邻音级之间相隔的半音数】在这 7
种调式里是一个循环。</p>
<ul id="colored">
<li>
2-2-1-2-2-2-1
</li>
<li>
2-1-2-2-2-1-2
</li>
<li>
1-2-2-2-1-2-2
</li>
<li>
2-2-2-1-2-2-1
</li>
<li>
2-2-1-2-2-1-2
</li>
<li>
2-1-2-2-1-2-2
</li>
<li>
1-2-2-1-2-2-2
</li>
</ul>
<style>
    .shadow {
        text-shadow: 1px 1px 2px #000;
    }
</style>
<script>
    const colors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'purple'];
    const modes = ['Ionian', 'Dorian', 'Phrygian', 'Lydian', 'Mixolydian', 'Aeolian', 'Iocrian'];
    const ul = document.getElementById("colored");
    const lis = ul.getElementsByTagName("li");

    Array.from(lis).forEach((li, index) => {
        let digits = li.innerHTML.split('-');
        let coloredDigits = digits.map((digit, i) => {
            let colorIndex = (index + i) % colors.length;
            let ret = `<span class="shadow" style="color: ${colors[colorIndex]};">${digit}</span>`;
            return ret;
        });
        li.innerHTML = coloredDigits.join(' - ') + ' ：' + modes[index];
    });
</script>
<p>因此，如果以 <span class="math inline">\(\mathrm{X}\)</span>
为主音，构造自然大调音阶的话（加数字表示升高半音数）：</p>
<ul>
<li><p>以 <span class="math inline">\(\mathrm{Y=(X+2)}\)</span>
为主音，构造出多利亚调式的音阶，与 <span
class="math inline">\(\mathrm{X}\)</span>
自然大调使用的琴键相同。</p></li>
<li><p>以 <span class="math inline">\(\mathrm{Z=(X+2+2)}\)</span>
为主音，构造出弗里几亚调式的音阶，与 <span
class="math inline">\(\mathrm{X}\)</span> 自然大调、<span
class="math inline">\(\mathrm{Y}\)</span>
多利亚调使用的琴键相同。</p></li>
<li><p>……</p></li>
<li><p>以 <span class="math inline">\(\mathrm{V=(X+2+2+1+2+2)}\)</span>
为主音，构造出自然小调的音阶，与 <span
class="math inline">\(\mathrm{X}\)</span> 自然大调、<span
class="math inline">\(\mathrm{Y}\)</span> 多利亚调、<span
class="math inline">\(\mathrm{Z}\)</span> 弗里几亚调……
使用的琴键相同。</p></li>
<li><p>以 <span
class="math inline">\(\mathrm{W=(X+2+2+1+2+2+2)}\)</span>
为主音，构造出洛克里亚调式的音阶，与 <span
class="math inline">\(\mathrm{X}\)</span> 大调、<span
class="math inline">\(\mathrm{Y}\)</span> 多利亚调、<span
class="math inline">\(\mathrm{Z}\)</span> 弗里几亚调…… <span
class="math inline">\(\mathrm{V}\)</span>
自然小调使用的琴键相同。</p></li>
</ul>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
  </entry>
  <entry>
    <title>乐理 - C1 - 三分损益法与十二律</title>
    <url>/blog//M/C1/</url>
    <content><![CDATA[<ul>
<li>律式与调式的区别</li>
<li>音律定法-&gt;律式
<ul>
<li>三分损益法-&gt;十二律</li>
</ul></li>
</ul>
<span id="more"></span>
<p>音乐是先有实践，后有理论的。</p>
<h2 id="律式与调式的区别">律式与调式的区别</h2>
<p>律式是给乐器调音用的。</p>
<p>在古代，并不能精确测得乐器的音高，所以要取一个能代表标准音高的东西，比如竹管。</p>
<ul>
<li><p>竹管越长、敲击时的震动频率越低、音高越低。</p></li>
<li><p>竹管越短、敲击时的震动频率越高、音高越高。</p></li>
</ul>
<p>取不同长度的竹管作为音名。乐器调音完，有了音名之后，在此基础上进行演奏。</p>
<p>不同地区的演奏者喜欢使用不同长度、不同数目的竹管。比如我喜欢使用一些竹管，把它们取名为：</p>
<p><span class="math display">\[
\mathrm{...G3、A3、}\mathbf{C4、D4、E4、G4、A4、}\mathrm{C5、D5...}
\]</span></p>
<p><span class="math inline">\(\mathrm{X \in
\{C,D,E,G,A\}}\)</span>，其中 <span
class="math inline">\(\mathrm{Xn}\)</span> 竹管的长度是 <span
class="math inline">\(\mathrm{X(n+1)}\)</span>
竹管长度的两倍，竹管越长音高越低。</p>
<p>我把使用次数最多的竹管 <span
class="math inline">\(\mathrm{C4、C5...}\)</span> 叫主音 <span
class="math inline">\(\mathrm{C}\)</span>。</p>
<p><span class="math inline">\(\mathrm{C、D、E、G、A}\)</span>
就是我的五个音级，对应唱名<strong>宫</strong>、<strong>商</strong>、<strong>角</strong>、<strong>徵</strong>、<strong>羽</strong>，<code>do</code>
<code>re</code> <code>mi</code> <code>sol</code> <code>la</code> 或者
<span class="math inline">\(1、2、3、5、6\)</span>。</p>
<p>这一些竹管之间，音程关系为 <span
class="math inline">\(2-2-3-2-3\)</span>。还可以往频率高、低的方向继续加竹管，并保持主音和音程关系不变，这就是我的调式。</p>
<p>即：</p>
<ul>
<li>律式规定了：【音名】&lt;-&gt;【频率】的对应关系</li>
<li>调式规定了：【唱名】&lt;-&gt;【音名】的对应关系</li>
</ul>
<h2 id="三分损益法">三分损益法</h2>
<p>三分损益法定音取的是 <em>单位长度</em>
的竹管，所以宫、商、角、徵、羽是 <em>唱名</em>。</p>
<ol type="1">
<li>取一个 <span class="math inline">\(81\)</span>
个单位长度的定音竹管，作为宫。</li>
<li>截断（损）三分之一，剩余的三分之二（<span class="math inline">\(81
\times \frac{2}{3} = 54\)</span>）作为徵。</li>
<li>再加长（益）三分之一，<span class="math inline">\(54 \times
\frac{4}{3} = 72\)</span>，作为商。</li>
<li>再损三分之一，<span class="math inline">\(72 \times \frac{2}{3} =
48\)</span>，作为羽。</li>
<li>再益三分之一，<span class="math inline">\(48 \times \frac{4}{3} =
64\)</span>，作为角。</li>
</ol>
<table>
<thead>
<tr class="header">
<th><strong>唱名</strong></th>
<th>宫</th>
<th>商</th>
<th>角</th>
<th>徵</th>
<th>羽</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>单位长度</strong></td>
<td><span class="math inline">\(81\)</span></td>
<td><span class="math inline">\(72\)</span></td>
<td><span class="math inline">\(64\)</span></td>
<td><span class="math inline">\(54\)</span></td>
<td><span class="math inline">\(48\)</span></td>
</tr>
</tbody>
</table>
<h2 id="十二律">十二律</h2>
<p><span class="math display">\[
\left\{
\begin{aligned}
64              \times \frac{2}{3} &amp; = 42\frac{2}{3}   \\
42\frac{2}{3}   \times \frac{4}{3} &amp; = 56\frac{8}{9}   \\
56\frac{8}{9}   \times \frac{4}{3} &amp; = 75\frac{23}{27} \\
75\frac{23}{27} \times \frac{2}{3} &amp; = 50\frac{46}{81} \\
\vdots
\end{aligned}
\right.
\]</span></p>
<p>在上面的基础上继续损益，注意在 <span
class="math inline">\(42\frac{2}{3}\)</span>
处益了两次，然后继续损—益—损— ……</p>
<p>并规定 <strong>宫 = 黄钟</strong>，相当于十二平均律简谱的 <span
class="math inline">\(\mathbf{1=C}\)</span>，得到十二律的各个音：</p>
<table>
<thead>
<tr class="header">
<th>序号</th>
<th>音名</th>
<th>来源</th>
<th>去向</th>
<th>单位长度</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>黄钟</td>
<td>起始音</td>
<td>损，林钟</td>
<td><span class="math inline">\(81\)</span></td>
</tr>
<tr class="even">
<td>2</td>
<td>大吕</td>
<td>蕤宾，益</td>
<td>损，夷则</td>
<td><span class="math inline">\(75\frac{23}{27}\)</span></td>
</tr>
<tr class="odd">
<td>3</td>
<td>太簇</td>
<td>林钟，益</td>
<td>损，南吕</td>
<td><span class="math inline">\(72\)</span></td>
</tr>
<tr class="even">
<td>4</td>
<td>夹钟</td>
<td>夷则，益</td>
<td>损，无射</td>
<td><span class="math inline">\(67\frac{103}{243}\)</span></td>
</tr>
<tr class="odd">
<td>5</td>
<td>姑洗 Xiǎn</td>
<td>南吕，益</td>
<td>损，应钟</td>
<td><span class="math inline">\(64\)</span></td>
</tr>
<tr class="even">
<td>6</td>
<td>仲吕</td>
<td>无射，益</td>
<td>损，清黄钟</td>
<td><span class="math inline">\(59\frac{2039}{2187}\)</span></td>
</tr>
<tr class="odd">
<td>7</td>
<td>蕤宾</td>
<td>应钟，益</td>
<td>益，大吕</td>
<td><span class="math inline">\(56\frac{8}{9}\)</span></td>
</tr>
<tr class="even">
<td>8</td>
<td>林钟</td>
<td>黄钟，损</td>
<td>益，太簇</td>
<td><span class="math inline">\(54\)</span></td>
</tr>
<tr class="odd">
<td>9</td>
<td>夷则</td>
<td>大吕，损</td>
<td>益，夹钟</td>
<td><span class="math inline">\(50\frac{46}{81}\)</span></td>
</tr>
<tr class="even">
<td>10</td>
<td>南吕</td>
<td>太簇，损</td>
<td>益，姑洗</td>
<td><span class="math inline">\(48\)</span></td>
</tr>
<tr class="odd">
<td>11</td>
<td>无射 Yì</td>
<td>夹钟，损</td>
<td>益，仲吕</td>
<td><span class="math inline">\(44\frac{692}{729}\)</span></td>
</tr>
<tr class="even">
<td>12</td>
<td>应钟</td>
<td>姑洗，损</td>
<td>益，蕤宾</td>
<td><span class="math inline">\(42\frac{2}{3}\)</span></td>
</tr>
<tr class="odd">
<td>13</td>
<td>清黄钟</td>
<td>仲吕，损</td>
<td>……</td>
<td><span class="math inline">\(39\frac{6265}{6561}\)</span></td>
</tr>
</tbody>
</table>
<h2 id="另外">另外</h2>
<p>可以在<a
href="http://read.nlc.cn/user/index">中国国家数字图书馆</a>查看不同版本的《史记》，宫、商、角、徵、羽对应的音名是不一样的。但<strong>如果认为以下几点同时成立的话，便可以推出
{宫,商,角,徵,羽} 对应 {黄钟,太簇,姑洗,林钟,南吕}</strong>：</p>
<ol type="1">
<li>{黄钟,大吕,太簇,夹钟,姑洗,仲吕,蕤宾,林钟,夷则,南吕,无射,应钟}的音高顺序是正确的，从低音到高音。</li>
<li>可以把第一条集合里的音类比成十二平均律的一个八度内的音名（绝对音高）。</li>
<li>可以把{宫,商,角,徵,羽,宫,...}类比成十二平均律的唱名（相对音高）。</li>
<li>第三条集合里的音，音程关系始终是 <span
class="math inline">\(2-2-3-2-3\)</span>。</li>
<li>令<strong>宫 = 黄钟</strong>。</li>
</ol>
<h2 id="参考">参考</h2>
<p>[1] 维基百科. 十二律[EB/OL].(2023-07-14)[2023-09-02]. <a
href="https://zh.wikipedia.org/zh-cn/十二律">https://zh.wikipedia.org/zh-cn/十二律</a>.</p>
<p>[2] 司马迁. 史记：卷二十五 律書第三[M/OL].(2020-09-10)[2023-09-02].
<a
href="https://zh.wikisource.org/wiki/史記/卷025">https://zh.wikisource.org/wiki/史記/卷
025</a>.</p>
<p>[3] leeonix.
【科普向】中国古代的十二律以及十二平均律[EB/OL].(2019-07-30)[2023-09-02].
<a
href="https://www.bilibili.com/read/cv3194623/">https://www.bilibili.com/read/cv3194623</a>.</p>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
  </entry>
  <entry>
    <title>CN00 - 概述 - 杂项概念</title>
    <url>/blog//CN/00/</url>
    <content><![CDATA[<ul>
<li>概述：计算机网络、互 Lian 网、ISP、IXP、RFC 文档</li>
<li>组成及通信
<ul>
<li>边缘部分的通信：C/S、P2P</li>
<li>核心部分的通信：电路交换、分组交换、报文交换</li>
</ul></li>
<li>类别</li>
</ul>
<span id="more"></span>
<h2 id="概述">概述</h2>
<p>什么叫计算机网络？</p>
<p>一些通用的、可编程的（含
CPU）硬件连接起来，可以传输多种不同类型的数据。</p>
<ul>
<li>互连网 internet：通用名词，一群计算机连起来。</li>
<li>互联网 Internet：专用名词，全球计算机连起来。</li>
</ul>
<p>世界上第一个网页：<a
href="http://info.cern.ch">http://info.cern.ch</a></p>
<p><strong>ISP</strong></p>
<p>互联网服务提供者（Internet Service
Provider），可以是移动联通电信公司，也可以是非营利组织。</p>
<ul>
<li>主干 ISP：国</li>
<li>地区 ISP：省</li>
<li>本地 ISP：省以下</li>
</ul>
<p>内容提供者可以连接各级 ISP 和 IXP。</p>
<p><strong>IXP</strong></p>
<p>互联网交换点（Internet eXchange Point），让两个 ISP 直接相连。</p>
<p>比如两个同级 ISP 交换信息时，可以通过 IXP，而不必通过上级 ISP。</p>
<p><strong>RFC 文档</strong></p>
<p>“请求评论”（Request For
Comments）的文档，公开发布的互联网建议标准，请求公众评论。</p>
<p>最后制定互联网标准 STD。</p>
<h2 id="组成及通信">组成及通信</h2>
<ul>
<li>边缘部分：所有用户直接使用的主机。又叫端系统。</li>
<li>核心部分：大量网络和连接网络的路由器。</li>
</ul>
<h3 id="边缘部分的通信">边缘部分的通信</h3>
<p>计算机通信，实际上是进程间通过端口号通信。</p>
<h4 id="cs">C/S</h4>
<p>客户-服务器</p>
<p>客户和服务器都是指进程。</p>
<h4 id="p2p">P2P</h4>
<p>peer to peer，peer：平等的。</p>
<p>本质是 C/S，每台主机既是 C 又是 S。</p>
<h3 id="核心部分的通信">核心部分的通信</h3>
<h4 id="电路交换">电路交换</h4>
<p>三步走：建立连接-&gt;占线通信-&gt;释放连接</p>
<ul>
<li>占线，两台机器间通信完了才能接受与其他机器通信</li>
<li>效率低（时间利用密度低，占线过程中会有不收发信息的时候）</li>
</ul>
<h4 id="分组交换">分组交换</h4>
<p>存储转发，类比快递收寄</p>
<ol type="1">
<li><p>把报文分组，每组写上头部信息。（包裹大包分成小包，写上序号、寄出地和目的地等）</p></li>
<li><p>通过路由器一级一级地转发到目的地。</p>
<pre class="mermaid">   gantt
    title 分组交换（甘特图）
    dateFormat s
    axisFormat %S

    section 1号包
    从A到B    :0, 5s
    从B到C    :5, 5s
    从C到D    :10, 5s

    section 2号包
    从A到B    :5, 5s
    从B到C    :10, 5s
    从C到D    :15, 5s

    section 3号包
    从A到B    :10, 5s
    从B到C    :15, 5s
    从C到D    :20, 5s</pre>
<ul>
<li>0-5 时间 1 号包裹从 A 站到 B 站</li>
<li>5-10 时间 1 号包裹从 B 站到 C 站、2 号包裹从 A 站到 B 站</li>
<li>10-15 时间 1 号包裹从 C 站到 D 站、2 号包裹从 B 站到 C 站、3
号包裹从 A 站到 B 站</li>
<li>……</li>
<li>（书上的图是以空间为横轴，以时间为纵轴）</li>
</ul></li>
<li><p>把各个包裹合并。</p>
<ul>
<li>不会占线，速度比报文交换快</li>
<li>排队等路由器转发</li>
<li>动态分配线路，不保证带宽</li>
<li>增加开销（合并的时候）</li>
</ul></li>
</ol>
<h4 id="报文交换">报文交换</h4>
<p>也是存储转发，但是不分组，直接发完整的。</p>
<h2 id="类别">类别</h2>
<h3 id="按作用范围">按作用范围</h3>
<ul>
<li>WAN：广域网，几十到几千公里</li>
<li>MAN：城域网，5~50km</li>
<li>LAN：局域网，1km</li>
<li>PAN：个人局域网，10m</li>
</ul>
<h3 id="按使用者">按使用者</h3>
<ul>
<li>公用网</li>
<li>专用网</li>
</ul>
<h3 id="接入网-an">接入网 AN</h3>
<p>不是核心部分，也不是边缘部分。</p>
<p><a href="404">宽带接入技术</a></p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>能指和所指</title>
    <url>/blog//M/ss/</url>
    <content><![CDATA[<ul>
<li>能指和所指</li>
<li>C 语言中的指针</li>
</ul>
<span id="more"></span>
<h2 id="能指和所指">能指和所指</h2>
<p>能指就是符号，所指就是符号所指向的意义。</p>
<p>能指是【生】，所指是【诞生、生物、生活、不成熟、不熟悉、从业者<code>-ist</code>……】。</p>
<p>能指是变量名，所指是变量值。</p>
<p>变量名可以被重新赋值，就是老子说的“非常名”。</p>
<p>简单点说就是【一词多义】【古今异义】【结合上下文理解】</p>
<h2 id="c-语言中的指针">C 语言中的指针</h2>
<h3 id="普通变量">普通变量</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> num = <span class="number">100</span>;</span><br></pre></td></tr></table></figure>
<p>变量类型<code>int</code>，变量名<code>num</code>-&gt;变量值<code>100</code>。</p>
<p>普通变量名已经有一层指向了。</p>
<h3 id="指针变量">指针变量</h3>
<p>用于专门存放内存地址（值的位置）的变量，叫指针。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>* ptr = &amp;num;</span><br></pre></td></tr></table></figure>
<p>变量类型<code>int*</code>，变量名<code>ptr</code>-&gt;变量值<code>num-&gt;100的内存地址</code></p>
<p>（这种说法好像是不严谨的，<code>int*</code>好像是 C++ 的说法）</p>
<p><code>&amp;num</code>，就是获取<code>num</code>值的位置。</p>
<ul>
<li><code>&amp;</code>一个变量名，就是获取变量名的值的地址。简称取地址。</li>
<li><code>*</code>一个变量名，就是获取变量名的值（只对指针有效）。简称访问地址。</li>
<li><code>*&amp;</code>一个变量名就是先<code>&amp;</code>后<code>*</code>（两个运算符优先级相同，且都是右结合）。
<ul>
<li>先取地址，后访问地址，和单独使用变量名效果一样。</li>
</ul></li>
<li><code>&amp;</code>一个指针变量名，就是获取指针变量值本身的位置（存放<code>num</code>地址值的地址）。</li>
</ul>
<p>还可以创建二级指针，就是指向指针的指针：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>** pptr = &amp;ptr;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>pptr</code>变量名指向某一个地址，这个地址处记录着<code>ptr</code>的地址</li>
<li><code>ptr</code>变量名指向某一个地址，这个地址处记录着<code>num</code>的地址</li>
<li><code>num</code>变量名指向某一个地址，这个地址处记录着<code>num</code>的值<code>100</code></li>
</ul>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
  </entry>
  <entry>
    <title>CN01 - 概述 - 性能指标</title>
    <url>/blog//CN/01/</url>
    <content><![CDATA[<ul>
<li><span class="math inline">\(\mathrm{K,M,G...}\)</span>
的不同含义</li>
<li>速率、带宽、吞吐量</li>
<li>发送时延、传播时延、处理时延、排队时延</li>
<li>时延带宽积</li>
<li>每比特宽度</li>
<li>RTT 和有效数据（速）率</li>
<li>（网络）利用率</li>
</ul>
<span id="more"></span>
<h2 id="mathrmkmg...-的不同含义"><span
class="math inline">\(\mathrm{K,M,G...}\)</span> 的不同含义</h2>
<p>基数不同：</p>
<ul>
<li>在计算机领域，<span class="math inline">\(\mathrm{K =
2^{10}}\)</span>，<span class="math inline">\(\mathrm{M =
2^{10}K}\)</span>……</li>
<li>在通信的领域，<span class="math inline">\(\mathrm{K =
10^{3}}\)</span>，<span class="math inline">\(\mathrm{M =
10^{3}K}\)</span>……</li>
</ul>
<p>数据通过网线或空气传播时，是在通信的领域。</p>
<p>一般 <span class="math inline">\(\mathrm{MB}\)</span> 指 <span
class="math inline">\(\mathrm{2^{10} \times 2^{10} \times 8
bit}\)</span>，</p>
<p><span class="math inline">\(\mathrm{Mbit}\)</span> 指 <span
class="math inline">\(\mathrm{10^{3} \times 10^{3} bit}\)</span>，</p>
<p>具体问题具体分析。如果追求准确的话，<span
class="math inline">\(\mathrm{2^{10} \times 2^{10} \times 8
bit}\)</span> 用 <span class="math inline">\(\mathrm{MiB}\)</span>
表示。</p>
<h2 id="速率">速率</h2>
<p><span class="math inline">\(\mathrm{bit/s}\)</span></p>
<p><strong>通常</strong>指额定速率。</p>
<h2 id="带宽">带宽</h2>
<h3 id="频域上的mathrmhz">频域上的：<span
class="math inline">\(\mathrm{Hz}\)</span></h3>
<p>信号频率范围 <span class="math inline">\(\mathrm{200Hz \sim
300Hz}\)</span>，</p>
<p>带宽为 <span class="math inline">\(\mathrm{300Hz - 200Hz =
100Hz}\)</span>。</p>
<h3 id="时域上的mathrmbits">时域上的：<span
class="math inline">\(\mathrm{bit/s}\)</span></h3>
<p><strong>通常</strong>指某信道的最高速率。</p>
<h2 id="吞吐量">吞吐量</h2>
<p>指实际速率 <span class="math inline">\(\mathrm{bit/s}\)</span>，进量
+ 出量。</p>
<p>有多条链路时，吞吐量由瓶颈链路决定。</p>
<h2 id="时延">时延</h2>
<p>单位都是时间单位。</p>
<h3 id="发送时延">发送时延</h3>
<p>网卡发送数据的时间。<strong>与信道长度无关</strong>。不要使用【传输时延】这个词。</p>
<p><span class="math inline">\(\mathrm{s = \dfrac{bit}{bit/s}} =
\dfrac{数据长度}{发送速率}\)</span></p>
<h3 id="传播时延">传播时延</h3>
<p>电磁波在网线或空气中传播的时间。<strong>与信道长度有关</strong>。</p>
<p><span class="math inline">\(\mathrm{s = \dfrac{m}{m/s} =
\dfrac{信道长度}{信号传播速率}}\)</span></p>
<ul>
<li>光速：<span class="math inline">\(\mathrm{3.0 \times 10^5
km/s}\)</span></li>
<li>铜线：<span class="math inline">\(\mathrm{2.3 \times 10^5
km/s}\)</span></li>
<li>光纤：<span class="math inline">\(\mathrm{2.0 \times 10^5
km/s}\)</span></li>
</ul>
<p>发送时延和传播时延没啥关系。</p>
<h3 id="处理时延">处理时延</h3>
<p>主机或路由器收到分组后，对分组进行处理的时间。</p>
<h3 id="排队时延">排队时延</h3>
<p>分组在路由器输入队列和输出队列里排队的时间。</p>
<h3 id="过程">过程</h3>
<p>……-&gt;输出排队-&gt;发送-&gt;传播-&gt;输入排队-&gt;处理-&gt;输出排队……</p>
<h2 id="时延带宽积">时延带宽积</h2>
<p><span class="math inline">\(\mathrm{bit = s \times bit/s = 传播时延
\times 带宽}\)</span></p>
<p>已经从发送端发出，但尚未到达接收端的比特数。又叫<strong>以比特为单位的链路长度</strong>。</p>
<h2 id="每比特宽度">每比特宽度</h2>
<p>（两行式子都存疑）</p>
<p><span class="math display">\[
\begin{aligned}
&amp;\mathrm{m/bit = \dfrac{m}{bit} = \dfrac{信道长}{比特数}} \\
&amp;\mathrm{m/bit = \dfrac{m/s}{bit/s} =
\dfrac{信道传播速率}{信道当前带宽（或者网卡发送速率？）}}
\end{aligned}
\]</span></p>
<h2 id="rtt">RTT</h2>
<p>往返时间（Round-Trip Time）</p>
<pre class="mermaid">gantt
    title RTT（甘特图）
    dateFormat s
    axisFormat %S

    section RTT
    RTT :3,17s

    section A
    发送           :0,3s
    接收    :17,3s
    ……    :20,4s

    section 传播
    从A到B传播    :1,8s
    从B到A传播    :11,8s

    section B
    接收      :7,3s
    发送    :10,3s</pre>
<p>其中排队时间和处理时间在接收和发送之间，这里忽略了。</p>
<h2 id="有效数据率">有效数据率</h2>
<p><span class="math inline">\(\mathrm{bit/s = \dfrac{bit}{s} =
\dfrac{数据长度}{发送时间+RTT}}\)</span></p>
<p>是有效的数据<strong>速率</strong>。</p>
<h2 id="利用率">利用率</h2>
<p><span class="math inline">\(网络利用率 = 1 -
\dfrac{空闲时延}{当前时延}\)</span></p>
<p>利用率越高，当前时延越大（堵车）。</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>CN02 - 概述 - 体系结构</title>
    <url>/blog//CN/02/</url>
    <content><![CDATA[<ul>
<li>OSI 七层协议：参考模型</li>
<li>TCP/IP 四层协议：即 Internet protocol suite，实际用到的</li>
<li>五层协议：教学模型</li>
</ul>
<span id="more"></span>
<h2 id="体系结构表">体系结构表</h2>
<table>
<tr>
<td>
应用层
</td>
<td rowspan="3">
应用层
</td>
<td rowspan="3">
应用层
</td>
<td rowspan="3">
HTTP FTP SMTP DNS POP SSH TLS/SSL……
</td>
<td>
……
</td>
</tr>
<tr>
<td>
表示层（语法层）
</td>
<td>
数据格式转换、字符编码、压缩、加解密、序列化
</td>
</tr>
<tr>
<td>
会话层
</td>
<td>
创建、管理和维护会话
</td>
</tr>
<tr>
<td>
传输层
</td>
<td>
传输层
</td>
<td>
传输层
</td>
<td>
TCP UDP……
</td>
<td>
自下而上第一个提供<b>端到端</b>的服务。UDP提供无连接不可靠的数据报服务。TCP提供有连接<b>可靠</b>的数据报服务
</td>
</tr>
<tr>
<td>
网络层
</td>
<td>
网络层
</td>
<td>
网络层
</td>
<td>
IP ARP……
</td>
<td>
路由选择。提供无连接不可靠的数据报服务
</td>
</tr>
<tr>
<td>
数据链路层
</td>
<td rowspan="2">
链路层
</td>
<td>
数据链路层
</td>
<td rowspan="2">
ARQ HDLC PPP……
</td>
<td>
差错控制（循环冗余校验CRC、帧检验序列FCS、海明码、 奇偶校验……）
点对点的流量控制
</td>
</tr>
<tr>
<td>
物理层
</td>
<td>
物理层
</td>
<td>
讨论用多大的电压表示0和1，比特如何在空气中传播
</td>
</tr>
<tr>
<th>
OSI
</th>
<th>
TCP/IP
</th>
<th>
教学模型
</th>
<th>
协议
</th>
<th>
任务
</th>
</tr>
</table>
<p>在网络体系结构中，<strong>不包含协议的内部实现细节</strong>。只是一个框架。</p>
<h2 id="pdu">PDU</h2>
<p>Protocol Data Unit，协议数据单元。</p>
<p>每一层的协议把数据封装成不同的 PDU。</p>
<h2 id="网络协议的三要素">网络协议的三要素</h2>
<ul>
<li>语法：数据的结构、格式、编码方式
<ul>
<li>HTTP 协议中的请求和响应消息的格式</li>
<li>TCP 协议中的数据包格式</li>
</ul></li>
<li>语义：数据的含义、解释，在传输过程中的意义和目的
<ul>
<li>HTTP 协议中的请求和响应消息的含义</li>
<li>TCP 协议中的数据包序列号</li>
</ul></li>
<li>同步：数据传输的时序
<ul>
<li>TCP 协议中的流量控制和拥塞控制</li>
</ul></li>
</ul>
<h2 id="物理层之下的传输媒体">物理层之下的传输媒体</h2>
<p><strong>不在体系结构之内。</strong> 或者说第 0 层。</p>
<ul>
<li>导引性传输媒体
<ul>
<li>双绞线（网线）</li>
<li>光缆：给光纤加上保护套，里面还填充了其他东西。
<ul>
<li>单模光纤：非常细，光传输时不会发生多次反射。适用于长距离、高速数据传输。</li>
<li>多模光纤：适用于短距离数据传输。</li>
</ul></li>
<li>同轴电缆</li>
<li>架空明线</li>
</ul></li>
<li>非导引性传输媒体
<ul>
<li>自由空间，空气或真空。
<ul>
<li>多径效应</li>
<li>微波接力</li>
</ul></li>
</ul></li>
</ul>
<h2 id="物理层">物理层</h2>
<p>物理层讨论的是如何传比特的，用什么协议（或者规程，两个名词一个意思）。不解释比特的意思。</p>
<p>它尽量隔开了传输媒体（铜线、光纤等）和上一层（数据链路层）之间的关系。</p>
<p>物理层确定了<strong>与传输媒体接口有关的一些特性：</strong></p>
<h3 id="机械特性">机械特性</h3>
<p>接线器的形状与尺寸、引脚数目和排列方式、固定和锁定装置等。</p>
<h3 id="电气特性">电气特性</h3>
<p>电压、电流、电阻、电容、电感、阻抗、信号速率等。</p>
<p>指明各条导线上的电压范围。</p>
<h3 id="功能特性">功能特性</h3>
<p><strong>数据传输的方式</strong></p>
<p>串行或并行</p>
<p><strong>编码方式</strong></p>
<p>指明某条导线上某一电平的电压的意义。或者说，指明 0，1
分别用哪个范围内的电压表示。即 <strong>比特 &lt;-&gt; 电压</strong>
的对应关系。</p>
<h3 id="过程特性">过程特性</h3>
<p>事件顺序，流程。</p>
<h2 id="数据链路层">数据链路层</h2>
<p>MAC 地址（物理地址）</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>CN03 - 物理层 - 通信基础概念</title>
    <url>/blog//CN/03/</url>
    <content><![CDATA[<ul>
<li>通信双方的交互方式：单向通信、双向交替通信、双向同时通信</li>
<li>编码和调制</li>
<li>编码方式：极性不归零电平（Polar NRZL）、极性不归零反转（Polar
NRZI）、极性归零（Polar RZ）、曼彻斯特编码、差分曼彻斯特编码</li>
<li>基带调制、带通调制、正交振幅调制（QAM）</li>
</ul>
<span id="more"></span>
<h2 id="通信双方的交互方式">通信双方的交互方式</h2>
<h3 id="单向通信单工">单向通信（单工）</h3>
<p>一段单行道。电视、广播。</p>
<h3 id="双向交替通信半双工">双向交替通信（半双工）</h3>
<p>一段有两个车道的马路，但是规定在一边的车道有车正在走时，另一边（相反方向）的车道不能有车走。对讲机。</p>
<h3 id="双向同时通信全双工">双向同时通信（全双工）</h3>
<p>一段正常的两个车道的马路。</p>
<h2 id="编码和调制">编码和调制</h2>
<ul>
<li>把信号（数或者模）转换为数字信号，叫编码。</li>
<li>把信号（数或者模）转换为模拟信号，叫调制。</li>
</ul>
<p>上面的抽象成了简单的情况，还是要根据语义判断。</p>
<h2 id="编码方式">编码方式</h2>
<p>参考了：<a
href="https://zhuanlan.zhihu.com/p/601728934">编码技术（RZ、NRZ、NRZI、曼彻斯特、差分曼彻斯特等）</a></p>
<h3 id="极性不归零电平polar-nrzl">极性不归零电平（Polar NRZL）</h3>
<p>Non-Return-to-Zero level</p>
<ul>
<li>正电平，<code>‾</code>，<code>1</code></li>
<li>负电平，<code>_</code>，<code>0</code></li>
</ul>
<h3 id="极性不归零反转polar-nrzi">极性不归零反转（Polar NRZI）</h3>
<p>Non-return-to-zero inverted</p>
<p>中心不跳变，边界遇 1 跳变（反转）。</p>
<h3 id="极性归零polar-rz">极性归零（Polar RZ）</h3>
<p>Return-to-Zero</p>
<ul>
<li>正脉冲，凸（<code>-‾-</code>），<code>1</code></li>
<li>负脉冲，凹（<code>-_-</code>），<code>0</code></li>
</ul>
<h3 id="曼彻斯特编码">曼彻斯特编码</h3>
<p>中心始终跳变</p>
<ul>
<li>G.E. Thomas Convention：
<ul>
<li>中心向下跳变，<code>‾_</code>，<code>1</code></li>
<li>中心向上跳变，<code>_‾</code>，<code>0</code></li>
<li>简记：<strong>下为 1</strong></li>
</ul></li>
<li>IEEE 802.3 Convention 和上面的定义相反</li>
</ul>
<h3 id="差分曼彻斯特编码">差分曼彻斯特编码</h3>
<p>中心始终跳变</p>
<ul>
<li>G.E. Thomas Convention：
<ul>
<li>左边界无跳变，<code>1</code>
<ul>
<li><code>_|_‾</code></li>
<li><code>‾|‾_</code></li>
</ul></li>
<li>左边界有跳变，<code>0</code>
<ul>
<li><code>_|‾_</code></li>
<li><code>‾|_‾</code></li>
</ul></li>
<li>简记：<strong>左连为 1</strong></li>
</ul></li>
<li>IEEE 802.3 Convention 和上面的定义相反</li>
</ul>
<h3 id="对比">对比</h3>
<p>（如果 <code>#</code> 号没对齐，可以尝试换设备查看）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 1  1  0  0  1</span><br><span class="line"></span><br><span class="line">‾‾‾‾‾‾______‾‾‾    # 极性不归零电平 Polar NRZL</span><br><span class="line"></span><br><span class="line">‾‾‾_________‾‾‾    # 极性不归零反转 Polar NRZI</span><br><span class="line"></span><br><span class="line">-‾--‾--_--_--‾-    # 极性归零 Polar RZ</span><br><span class="line"></span><br><span class="line">‾_|‾_|_‾|_‾|‾_|    # 曼彻斯特编码（G.E. Thomas Convention）</span><br><span class="line"></span><br><span class="line">‾_|_‾|_‾|_‾|‾_|    # 差分曼彻斯特编码（G.E. Thomas Convention）</span><br></pre></td></tr></table></figure>
<h2 id="基带调制">基带调制</h2>
<p>基带信号就是原始的数字信号，把基带信号转换成另一种数字信号就叫基带调制。也叫编码。</p>
<h2 id="带通调制">带通调制</h2>
<p>使用载波的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">‾‾‾‾‾‾______‾‾‾    # 基带信号</span><br><span class="line"></span><br><span class="line">MWMWMW------MWM    # 调幅（AM）</span><br><span class="line"></span><br><span class="line">MWMWMWПUПUПUMWM    # 调频（FM）</span><br><span class="line"></span><br><span class="line">MWMWMWWMWMWMMWM    # 调相（PM）</span><br></pre></td></tr></table></figure>
<h2 id="正交振幅调制qam">正交振幅调制（QAM）</h2>
<p>简单地理解就是：</p>
<p><span class="math display">\[
\begin{aligned}
调制后的信号 &amp; = 振幅 \times 载波(相位) \\
y &amp; = A\sin(\omega x + \phi) \\
\end{aligned}
\]</span></p>
<p>用不同的<strong>振幅</strong>和<strong>相位</strong>排列组合，来表示（承载）不同的基带信号，比只调幅/只调频/只调相的信息密度高。</p>
<p>使用 <span class="math inline">\(x\)</span> 个振幅和 <span
class="math inline">\(y\)</span> 个相位的 QAM 时，一个码元对应的比特数是
<span class="math inline">\(\log _2(xy)\)</span> 向上取整。</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>CN04 - 物理层 - 信道的极限容量</title>
    <url>/blog//CN/04/</url>
    <content><![CDATA[<ul>
<li>码元
<ul>
<li><span class="math inline">\(1\)</span> 码元对应 <span
class="math inline">\(x \mathrm{bit}\)</span> 时（<span
class="math inline">\(x &gt; 1\)</span>）：</li>
<li>码元种类数（信号状态数） <span class="math inline">\(n =
2^x\)</span></li>
<li>码元对应的比特数 <span class="math inline">\(x =
\log_2(n)\)</span></li>
<li>当 <span class="math inline">\(0 &lt; x &lt;
1\)</span>时，一个比特由多个码元表示</li>
</ul></li>
<li>奈氏准则：无噪声低通信道中码元传输最高速率
<ul>
<li><span class="math inline">\(波特 = \mathrm{码元/s} = 2W \times
【码元单位】\)</span></li>
<li><span class="math inline">\(W\)</span>：信道的频域带宽 <span
class="math inline">\(\mathrm{Hz}\)</span></li>
<li><span class="math inline">\(比特率 = \mathrm{bit/s} = 2Wx =
2W\log_2(n)\)</span></li>
</ul></li>
<li>信噪比
<ul>
<li>用 <span class="math inline">\(\dfrac{S}{N}\)</span> 表示</li>
<li>用 <span class="math inline">\(\mathrm{dB} = 10 \log_{10}
\dfrac{S}{N}\)</span> 表示</li>
<li><span class="math inline">\(\dfrac{S}{N} =
10^{\mathrm{dB}/10}\)</span></li>
</ul></li>
<li>香农公式：信道极限速率
<ul>
<li><span class="math inline">\(\mathrm{bit/s} = W \log_2 (1 +
\dfrac{S}{N})\)</span></li>
</ul></li>
<li>奈氏准则和香农公式的意义</li>
<li>影响数据在信道中传输速率的因素有：
<ul>
<li>信道长度</li>
<li>信道带宽</li>
<li>信噪比</li>
<li><a href="/blog/CN/03/#编码方式">编码方式</a></li>
<li><a href="/blog/CN/05">信道复用方式</a></li>
<li>信号传播速度（电磁波在介质中的传播速度）<strong>不会影响</strong>信道数据的传输速率</li>
</ul></li>
</ul>
<span id="more"></span>
<h2 id="码元">码元</h2>
<p>码元，就是用来表示【码】的单个【元】。</p>
<ul>
<li>【码】就是串 <code>010100...</code></li>
<li>【元】就是符号（x 元 x 次方程）。</li>
<li>【码元】就是用来表示长串的众多符号中的单个符号。</li>
</ul>
<p>比如串 <code>1001 1111</code>，可以分隔成前后两部分，记作
<code>9F</code>。</p>
<p><code>9</code> 和 <code>F</code>
都是码元，是不同的码元，它们分别一一对应（双射）了一个四位二进制数。</p>
<p>如果分隔成八个部分，那 <code>0</code> 和 <code>1</code>
也是码元。</p>
<p><span class="math inline">\(\{一，壹，Ⅰ，①，...\}\)</span>
都是码元，这是多个码元对应一个比特 <code>1</code> 的情况。</p>
<p>类比信号，码就是波形，码元就是在发送和解读波形时，可以分辨的最小单位波形。</p>
<h2
id="奈氏准则奈奎斯特香农采样定理的一部分">奈氏准则（奈奎斯特—香农采样定理的一部分）</h2>
<p>奈奎斯特这个人推导出的准则：</p>
<p><span class="math display">\[
\begin{aligned}
&amp; 低通信道中码元传输的最高速率（码元/\mathrm{s}） \\
= \ &amp; 两倍频域带宽（\mathrm{单位是 Hz，即 s^{-1}}）\times
【码元单位】
\end{aligned}
\]</span></p>
<p>是在理想的、信道内无噪声的情况下。这里的最高速率指的是，保证接收方接收符号（码元）不出错（码间串扰）时的速率上限。</p>
<p><span class="math inline">\(1\)</span> 码元对应 <span
class="math inline">\(x\)</span>
个比特。但这里强调的是“码元每秒”，所以用“码元单位”。</p>
<p>符号速率（码元每秒）也叫波特 <span
class="math inline">\(\mathrm{Baud}\)</span>。</p>
<p>频域带宽用 <span class="math inline">\(W\)</span> 表示。</p>
<h2 id="信噪比">信噪比</h2>
<p>就是信比噪，两种表示方式：</p>
<ul>
<li><span class="math inline">\(\dfrac{S}{N} =
\dfrac{信号平均功率}{噪声平均功率}\)</span></li>
<li><span class="math inline">\(\mathrm{dB} = 10
\lg\dfrac{S}{N}\)</span></li>
</ul>
<p>前者没有单位，也可以看成是 <span
class="math inline">\(\dfrac{瓦特}{瓦特}\)</span>。</p>
<p>后者是无量纲单位 <span
class="math inline">\(\mathrm{dB}\)</span>。（是单位，这里为了方便把它当成物理量用）</p>
<p>第二个式子可以改写成 <span class="math inline">\(\dfrac{S}{N} =
10^{\mathrm{dB}/10}\)</span></p>
<h2 id="香农公式香农哈特莱容量定理">香农公式（香农—哈特莱容量定理）</h2>
<p>考虑到了信道有噪声：</p>
<p><span class="math display">\[
\begin{aligned}
信道极限速率 &amp; = \mathrm{bit/s = Hz \times bit} \\
&amp; = W \log_2(1 + \dfrac{S}{N}) \\
\end{aligned}
\]</span></p>
<p><span class="math inline">\(\mathrm{bit}\)</span>
也是无量纲单位。</p>
<h2 id="奈氏准则和香农公式的意义">奈氏准则和香农公式的意义</h2>
<p>信噪比越大，接收方接收到的信息失真越少。</p>
<p>奈氏准则直接假定噪声为 <span
class="math inline">\(0\)</span>，信噪比无穷大。这鼓励了人们研究更好的编码技术，一次传更多的东西。</p>
<p>香农公式告诉我们：</p>
<ul>
<li>信噪比越大，极限速率越高，但是信噪比不可能无限大，所以速率也有极限。</li>
<li>只要信息传输速率低于极限速率，就一定能找到某种方法实现无差错的传输。</li>
</ul>
<p>计算传输速率时，取奈氏准则和香农公式的结果小的。</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>CN05 - 物理层 - 信道复用技术</title>
    <url>/blog//CN/05/</url>
    <content><![CDATA[<ul>
<li>频分复用（FDM）</li>
<li>时分复用（TDM）</li>
<li>统计时分复用（STDM）</li>
<li>波分复用（WDM）</li>
<li>码分复用（CDM）</li>
<li>频分多址/时分多址/码分多址（FDMA/TDMA/CDMA）</li>
</ul>
<span id="more"></span>
<h2 id="频分复用fdm">频分复用（FDM）</h2>
<ul>
<li>Frequency Division Multiplexing</li>
<li>Frequency：频率</li>
<li>Division：划分</li>
<li>Multiplex：多种的</li>
</ul>
<p>把一个大频带划分成若干个小频带，把不同的信号分别调制到这些小频带里。</p>
<p>比如 A 信号占用 <span
class="math inline">\(\mathrm{10-11kHz}\)</span>，B 信号占用 <span
class="math inline">\(\mathrm{11-12kHz}\)</span>……把它们一起发出去。</p>
<p>相当于 CPU 多核进程并行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">^频率</span><br><span class="line">|</span><br><span class="line">|-----------------</span><br><span class="line">|C信号</span><br><span class="line">|-----------------</span><br><span class="line">|B信号</span><br><span class="line">|-----------------</span><br><span class="line">|A信号</span><br><span class="line">|-----------------</span><br><span class="line">|</span><br><span class="line">|-----------------------&gt;时间</span><br></pre></td></tr></table></figure>
<h2 id="时分复用tdm">时分复用（TDM）</h2>
<ul>
<li>Time Division Multiplexing</li>
</ul>
<p>把时间分割成一个个 TDM
帧，每帧内分为若干个时隙，每个时隙内分别传送不同的信号。</p>
<p>相当于 CPU 单核进程并发。</p>
<p>每个 TDM 帧内保证每组信号都传了，就是没传也要保留留给它的空时隙。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">^频率</span><br><span class="line">|</span><br><span class="line">|--------------------------</span><br><span class="line">|A|B|C|A|B|C| |B|C|A| |C|</span><br><span class="line">|--------------------------</span><br><span class="line">|     |     |     |     |</span><br><span class="line">|TDM帧|TDM帧|TDM帧|TDM帧|</span><br><span class="line">|------------------------------&gt;时间</span><br></pre></td></tr></table></figure>
<p>这造成信道利用率不高。</p>
<h2 id="统计时分复用stdm">统计时分复用（STDM）</h2>
<ul>
<li>Statistic：统计</li>
</ul>
<p>和 TDM 一样把时间划分成一个个帧。</p>
<p>但在每个 STDM
帧内，时隙数量小于信号种类数量。为每组信号动态分配时隙，比如 B
信号断了可以先不传它。</p>
<p><strong>有四组信号 ABCD：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> ^信号</span><br><span class="line"> |</span><br><span class="line"> |--------------------------</span><br><span class="line">D| d | d | d | d |</span><br><span class="line"> |--------------------------</span><br><span class="line">C|   | c | c | c |</span><br><span class="line"> |--------------------------</span><br><span class="line">B| b | b |   |   |</span><br><span class="line"> |--------------------------</span><br><span class="line">A| a |   | a | a |</span><br><span class="line"> |------------------------------&gt;时间</span><br></pre></td></tr></table></figure>
<p><strong>STDM：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">^频率</span><br><span class="line">|</span><br><span class="line">|--------------------------</span><br><span class="line">|a|b|d|b|c|d|a|d|c|c|d|a|</span><br><span class="line">|--------------------------</span><br><span class="line">|     |     |     |     |</span><br><span class="line">|STDMf|STDMf|STDMf|STDMf|</span><br><span class="line">|------------------------------&gt;时间</span><br></pre></td></tr></table></figure>
<h2 id="波分复用wdm">波分复用（WDM）</h2>
<ul>
<li>Wavelength：波长</li>
</ul>
<p>就是<strong>光的频分复用</strong>，但是用波长表示。</p>
<h2 id="码分复用cdm">码分复用（CDM）</h2>
<ul>
<li>Code：码</li>
</ul>
<p>把一个码元用多个符号表示，每个符号叫<strong>码片</strong>（chip）。</p>
<ul>
<li>比如把 <code>1</code> 用 <code>0001 1011</code> 表示。</li>
<li>那么 <code>0</code> 必须用上面的反码 <code>1110 0100</code>
表示。</li>
</ul>
<p>为了方便，把 <strong>码片</strong> <code>0</code> 记作 <span
class="math inline">\(-1\)</span>，<strong>码片</strong> <code>1</code>
记作 <span class="math inline">\(+1\)</span>。那么：</p>
<table>
<thead>
<tr class="header">
<th>码元</th>
<th>码片们</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>1</code></td>
<td><span class="math inline">\((-1,-1,-1,+1,+1,-1,+1,+1)\)</span></td>
</tr>
<tr class="even">
<td><code>0</code></td>
<td><span class="math inline">\((+1,+1,+1,-1,-1,+1,-1,-1)\)</span></td>
</tr>
</tbody>
</table>
<h2
id="频分多址时分多址码分多址fdmatdmacdma">频分多址/时分多址/码分多址（FDMA/TDMA/CDMA）</h2>
<ul>
<li>MA：Multiple Access（多路访问）</li>
</ul>
<p>多址，就是可以让多个用户在不同地点接入进来。</p>
<p>FDM、TDM、CDM 没有强调多不多址。</p>
<h2 id="题目">题目</h2>
<h3 id="年考研-37-题">14 年考研 37 题</h3>
<blockquote>
<p>站点 A、B、C 通过 CDMA 共享链路，A、B、C 的码片序列分别是（1, 1, 1,
1）、（1, -1, 1, -1）和（1, 1, -1, -1），若 C 从链路上收到的序列是（2,
0, 2, 0, 0, -2, 0, -2, 0, 2, 0, 2），则 <strong>C 收到 A</strong>
发送的数据是？</p>
</blockquote>
<p>C 的序列分成四位一组，分别与 A 的序列做规格化内积：</p>
<p><span class="math display">\[
\frac{1}{4} \times
\begin{bmatrix}
2 &amp; 0 &amp; 2 &amp; 0 \\
0 &amp; -2 &amp; 0 &amp; -2 \\
0 &amp; 2 &amp; 0 &amp; 2 \\
\end{bmatrix} A^T =
\begin{bmatrix}
1 \\
-1 \\
1 \\
\end{bmatrix}
\]</span></p>
<p>1 代表 <code>1</code>，-1 代表 <code>0</code>。</p>
<p>所以 C 收到 A 发送的数据是 <code>101</code>。</p>
<h3 id="section">【2-16】</h3>
<p>来自谢老《计算机网络（第 8 版）》</p>
<blockquote>
<p>共有四个站进行码分多址 CDMA 通信。四个站的码片序列为： A: (-1 -1 -1
+1 +1 -1 +1 +1) B: (-1 -1 +1 -1 +1 +1 +1 -1) C: (-1 +1 -1 +1 +1 +1 -1
-1) D: (-1 +1 -1 -1 -1 -1 +1 -1) 现收到这样的码片序列：(-1 +1 -3 +1 -1
-3 +1 +1)。问<strong>哪个站发送数据了</strong>？发送数据的站发送的是 1
还是 0？</p>
</blockquote>
<p>把收到的序列分别与四个站的序列做规格化内积：</p>
<p><span class="math display">\[
\frac{1}{8} \times
\begin{bmatrix}
A \\
B \\
C \\
D \\
\end{bmatrix}
\begin{bmatrix}
-1 \\
+1 \\
-3 \\
+1 \\
-1 \\
-3 \\
+1 \\
+1 \\
\end{bmatrix} =
\begin{bmatrix}
1 \\
-1 \\
0 \\
1 \\
\end{bmatrix}
\]</span></p>
<ul>
<li>A 站发送了<code>1</code></li>
<li>B 站发送了<code>0</code></li>
<li>C 站没有发送</li>
<li>D 站发送了<code>1</code></li>
</ul>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>CN06 - 数据链路层 - 基本问题</title>
    <url>/blog//CN/06/</url>
    <content><![CDATA[<p>物理层没法解决的三个问题：</p>
<ol type="1">
<li>发出去之后，哪一方接收</li>
<li>传输何时开始，何时结束</li>
<li>判断是否有传输错误</li>
</ol>
<p>对应数据链路层的三个基本问题：</p>
<ol type="1">
<li>封装成帧（载客）
<ul>
<li>帧定界符 SOH、EOT（何时开始和结束）</li>
</ul></li>
<li>透明传输（转义特殊字符）
<ul>
<li>ESC</li>
</ul></li>
<li>差错检测（判断传输是否出错）
<ul>
<li>误码率（BER）</li>
<li>帧检验序列（FCS）的计算：在待传数据后面加上（<span
class="math inline">\(P\)</span> 长度减一/生成多项式最高次数）个
0，然后用 <span class="math inline">\(P\)</span> 去除，得到的余数。</li>
<li>循环冗余检验（CRC）的方法</li>
<li>【无比特差错】与【无传输差错】</li>
</ul></li>
</ol>
<p>数据链路层：物理链路+协议与实现协议的软硬件（马路+交通规则）。</p>
<p>网络适配器（网卡）连接了物理层和数据链路层。</p>
<span id="more"></span>
<h2 id="数据链路层">数据链路层</h2>
<p>把从物理层收到的比特流封装成帧，上交给网络层。</p>
<p>帧相当于出租车，物理链路相当于马路。</p>
<p>它不考虑物理层是怎么传比特的。</p>
<h2 id="封装成帧">封装成帧</h2>
<p>帧是出租车，数据是乘客。</p>
<p>出租车有载客上限，帧有最大传送单元 MTU（Maximum Transfer Unit）。</p>
<p>如果数据长度超过了 MTU，会被分割成多个帧。</p>
<h3 id="帧定界符">帧定界符</h3>
<p>是帧的一部分，它位于帧的前后，标识帧开始和结束。</p>
<ul>
<li>SOH（Start Of Header）：头部的开始
<ul>
<li>二进制：<code>0000 0001</code></li>
<li>Unicode：<code>U+0001</code></li>
<li>HTML：<code>&amp;#1;</code></li>
<li>键盘：<code>^A</code></li>
</ul></li>
<li>EOT（End Of Transmission）：传输结束
<ul>
<li>二进制：<code>0000 0010</code></li>
<li>Unicode：<code>U+0004</code></li>
<li>HTML：<code>&amp;#4;</code></li>
<li>键盘：<code>^D</code></li>
</ul></li>
</ul>
<p>如果帧数据部分的某一个字节和帧定界符雷同了，为了避免把它当成帧定界符，需要在它前面加上转义字符。</p>
<p>发送端：网络层 -&gt; 数据链路层之前：插入转义字符。</p>
<p>接收端：数据链路层 -&gt; 网络层之前：剔除转义字符。</p>
<h2 id="透明传输">透明传输</h2>
<p>让数据【看不见】数据链路上有什么妨碍它传输的东西。或者说数据链路对数据来说是【透明】的。</p>
<h3 id="转义字符">转义字符</h3>
<ul>
<li>ESC（Escape）：逃
<ul>
<li>二进制：<code>0001 1011</code></li>
<li>Unicode：<code>U+001B</code></li>
<li>HTML：<code>&amp;#27;</code></li>
<li>键盘：<code>^[</code></li>
</ul></li>
</ul>
<p>收到两个连续的转义字符时，说明发送端传了一个转义字符的符号，而不是它的语义。相当于程序设计语言中的<code>\\</code>。</p>
<h2 id="差错检测">差错检测</h2>
<p>判断数据是否传输出错。</p>
<h3 id="误码率ber">误码率（BER）</h3>
<p>Bit Error Rate</p>
<p>平均每传送 <span class="math inline">\(\mathrm{(BER)^{-1}}\)</span>
个比特，会有一个比特出错。</p>
<h3 id="帧检验序列fcs">帧检验序列（FCS）</h3>
<p>Frame Check Sequence</p>
<p>简称冗余码。</p>
<p>冗余码的二进制位数记作 <span class="math inline">\(n\)</span>，这里取
<span class="math inline">\(n = 3\)</span> 的例子：</p>
<ol type="1">
<li><p>明确待传的数据，比如 <code>1001 0001</code>。可记作 <span
class="math inline">\(M\)</span>。</p></li>
<li><p>把待传数据后面<strong>补上 <span class="math inline">\(n\)</span>
个 <code>0</code></strong>，比如
<code>1001 0001 000</code>。相当于对它乘了三次二。即 <span
class="math inline">\(2^{n}M\)</span> <span class="math inline">\((n =
3)\)</span>，<strong>它是被除数</strong>。</p></li>
<li><p>用双方提前规定好的<strong>除数</strong> <span
class="math inline">\(P\)</span> 去除被除数，<span
class="math inline">\(P\)</span> 比冗余码的长度多一位。比如
<code>1100</code>：</p>
<p>（空格是分隔符，看得清楚一些，没有特殊含义）</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">        1</span><br><span class="line">    -------------</span><br><span class="line">1100|1001 0001 000</span><br><span class="line">     1100</span><br></pre></td></tr></table></figure>
<p>↑ 不管大小，<code>1</code> 开头就商 <code>1</code>，<code>0</code>
开头就商 <code>0</code>：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">        1</span><br><span class="line">    --------------</span><br><span class="line">1100|1001 0001 000</span><br><span class="line">     1100</span><br><span class="line">     ------</span><br><span class="line">      101 0</span><br></pre></td></tr></table></figure>
<p>↑“相减”，相当于对<strong>后三位</strong>做了<strong>异或</strong>操作（异为
<code>1</code>，同为 <code>0</code>）。</p>
<p>继续操作：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">        1 1100 001</span><br><span class="line">    --------------</span><br><span class="line">1100|1001 0001 000</span><br><span class="line">     1100</span><br><span class="line">     ------</span><br><span class="line">      101 0</span><br><span class="line">      110 0</span><br><span class="line">      ------</span><br><span class="line">       11 00</span><br><span class="line">       11 00</span><br><span class="line">       ------</span><br><span class="line">        0 000</span><br><span class="line">        0 000</span><br><span class="line">        ------</span><br><span class="line">          0001</span><br><span class="line">          0000</span><br><span class="line">          ------</span><br><span class="line">           001 0</span><br><span class="line">           000 0</span><br><span class="line">           ------</span><br><span class="line">            01 00</span><br><span class="line">            00 00</span><br><span class="line">            ------</span><br><span class="line">             1 000</span><br><span class="line">             1 100</span><br><span class="line">             -----</span><br><span class="line">               100</span><br></pre></td></tr></table></figure>
<p>则余数 <code>100</code> 就是冗余码。</p></li>
<li><p>把冗余码添加到原数据的末尾： <code>1001 0001 100</code></p></li>
</ol>
<h3 id="循环冗余检验crc">循环冗余检验（CRC）</h3>
<p>Cyclic Redundancy Check</p>
<p>接收方把收到的、经发送方添加了冗余码后的数据再用 <span
class="math inline">\(P\)</span>
去除，如果余数为零，说明有<strong>极大概率</strong>传输没出错；反过来如果传输没出错，则余数<strong>一定</strong>为零。</p>
<p>除数 <span class="math inline">\(P\)</span> 还有一种记法，比如：</p>
<p><code>1100</code> 记作：</p>
<p><span class="math display">\[
X^3+X^2
\]</span></p>
<p><code>101 1001</code> 记作：</p>
<p><span class="math display">\[
X^6+X^4+X^3+1
\]</span></p>
<p>这种多项式被称作【生成多项式】 <span
class="math inline">\(P(X)\)</span></p>
<h3 id="无比特差错与无传输差错">无比特差错与无传输差错</h3>
<p>通过添加冗余码和 CRC，能够实现几乎百分百的无比特差错。</p>
<p>——这是对于每一个帧来说的。如果接收方没有收到某一个帧，或者收到了重复的帧，或者收到帧的顺序错了：这三种情况都属于传输差错。</p>
<p>CRC 不保证无传输差错，所以不属于【可靠传输】。</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>CN07 - 数据链路层 - 点对点协议 PPP</title>
    <url>/blog//CN/07/</url>
    <content><![CDATA[<ul>
<li>Point-to-Point Protocol：用户到 ISP 的协议。ISP 是学校，PPP
就是和门口保安的对话。<a
href="https://www.rfc-editor.org/rfc/rfc1661">RFC 1661</a> | <a
href="https://blog.csdn.net/qq_20677327/article/details/106079040">翻译</a>
<ul>
<li>不采用序号和确认机制，接收方每收到一个帧就进行 CRC
校验，正确就收下，错误就丢弃。断章取义。</li>
<li>组成部分：
<ul>
<li>【网络层 -&gt; 数据链路层】一个将 IP 数据报封装到串行链路的方法</li>
<li>【物理层 &lt;-&gt; 数据链路层】一个链路控制协议 LCP (Link Control
Protocol)。分配临时 IP 地址。说话。</li>
<li>【数据链路层 &lt;-&gt; 网络层】一套网络控制协议 NCP (Network Control
Protocol)。填表。</li>
</ul></li>
<li>是有连接，面向字节的协议</li>
</ul></li>
</ul>
<span id="more"></span>
<h2 id="ppp-协议的工作状态">PPP 协议的工作状态</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">【链路静止】：保安没看见你</span><br><span class="line">| 猫呼叫路由器，建立物理层连接：和保安搭话</span><br><span class="line">v</span><br><span class="line">【链路建立】：保安听见你了，问你来干什么</span><br><span class="line">| LCP配置协商：我要进学校</span><br><span class="line">| 失败：保安听不懂你的广东话，【链路静止】</span><br><span class="line">v</span><br><span class="line">【鉴别】：验证你的身份</span><br><span class="line">| 失败：【链路终止】-&gt;【链路静止】</span><br><span class="line">v</span><br><span class="line">【网络层协议】：登记</span><br><span class="line">| NCP配置协商：填表</span><br><span class="line">v</span><br><span class="line">【链路打开】：让你进了</span><br></pre></td></tr></table></figure>
<h2 id="ppp-帧格式">PPP 帧格式</h2>
<table style="width:100%;">
<colgroup>
<col style="width: 14%" />
<col style="width: 18%" />
<col style="width: 53%" />
<col style="width: 7%" />
<col style="width: 1%" />
<col style="width: 5%" />
</colgroup>
<thead>
<tr class="header">
<th>字段名</th>
<th>标志字段、地址字段、控制字段</th>
<th>协议字段</th>
<th>信息字段</th>
<th>FCS</th>
<th>标志字段</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>字段值（十六进制）</strong></td>
<td>7E FF 03</td>
<td>0021【IP
数据报】<br/>8021【NCP】<br/>C021【LCP】<br/>C023【PAP】<br/>C223【CHAP】</td>
<td>...</td>
<td>...</td>
<td>7E</td>
</tr>
<tr class="even">
<td><strong>字节数（十进制）</strong></td>
<td>3</td>
<td>2</td>
<td>&lt;=MTU(1500)</td>
<td>2</td>
<td>1</td>
</tr>
</tbody>
</table>
<h2 id="异步传输时的字节填充">异步传输时的字节填充</h2>
<p>下面的都是十六进制</p>
<p>转义字符：7D</p>
<table>
<thead>
<tr class="header">
<th>转义前</th>
<th>转义后</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>7E</td>
<td>7D 5E（减了 20）</td>
</tr>
<tr class="even">
<td>7D</td>
<td>7D 5D（减了 20）</td>
</tr>
<tr class="odd">
<td>00 ~ 1F</td>
<td>7D 20 ~ 7D 3F （加了 20）</td>
</tr>
</tbody>
</table>
<p>上面都是对 <code>0x20</code>
做异或，或者说对从低到高第六位取反。<code>0x20</code> 是
<code>0010 0000</code>。</p>
<h2 id="同步传输时的零比特填充">同步传输时的零比特填充</h2>
<p>发现有五个连续 <code>1</code>，就填入一个
<code>0</code>。这样不会出现六个连续 <code>1</code>。</p>
<p>因为不是按字节传输的，是按比特传输的，为了规避定界符
<code>0x7E</code> 的 <code>0111 1110</code>。</p>
<h2 id="另外">另外</h2>
<p>HDLC 也是数据链路层的协议，是面向比特的协议，使用零比特填充。</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>CN08 - 数据链路层 - CSMA／CD 协议</title>
    <url>/blog//CN/08/</url>
    <content><![CDATA[<ul>
<li>CSMA/CD：Carrier Sense Multiple Access with Collision
Detection，载波监听多址接入/碰撞检测协议。以太网用的。
<ul>
<li>使用曼彻斯特编码（中心始终跳变，01
为跳变方向不同），频带宽度比基带信号增加一倍。</li>
<li>多点接入：多台计算机连在一根总线上：多个人在同一个房间。</li>
<li>载波（载体）监听：每个站都不停地检测信道：在说话前和说话中听别人有没有说话。</li>
<li>碰撞检测：检测信号电压：听到了自己和其他人同时说话的声音。</li>
<li>一个站不能同时发送和接收：人不能同时（并行）听懂和说明白。半双工（双向交替通信）。</li>
<li>是无连接的协议：一群人头脑风暴。</li>
<li>碰撞的过程。</li>
<li>计算碰撞后重传的等待时间：截断二进制指数退避。用 r 乘争用期。</li>
</ul></li>
<li><a href="/blog/CN/09">以太网</a>
<ul>
<li>以太网的信道利用率</li>
<li>争用期规定为 <span class="math inline">\(51.2 \mathrm{\mu
s}\)</span>，如果在这段时间内没有检测到碰撞，后续就不会碰撞。</li>
<li>帧间最小间隔为 <span class="math inline">\(9.6 \mathrm{\mu
s}\)</span></li>
<li>最短帧长 = 争用期 × 带宽。</li>
</ul></li>
</ul>
<span id="more"></span>
<h2 id="名词辨析csma-与-cdma">名词辨析：CSMA 与 CDMA</h2>
<p>CS 是载波监听（Carrier Sense），CD 是码分（Code Division），MA
都是多址接入（Multiple Access）。</p>
<p>后者是码分多址复用。</p>
<p>而 CSMA/CD 的 CD 是碰撞检测（Collision Detection）。</p>
<p>CSMA/CD 用于有线网，还有一个 CSMA/CA（Collision
Avoidance，碰撞避免），用于无线网。</p>
<h2 id="csmacd-协议工作流程">CSMA/CD 协议工作流程</h2>
<p>听到有别人正在说话时，自己不说话。</p>
<p>没人正在说话时，自己说话，说话过程中听到有别人说了就不说，等一段时间后再准备说。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">准备发送 -&gt; 载波监听&lt;------</span><br><span class="line">   ^           |         ^</span><br><span class="line">   |           v         |</span><br><span class="line">   |       监听到了 -&gt; 准备发送</span><br><span class="line">   |       没监听到 -&gt; 发送，同时开始碰撞检测</span><br><span class="line">   |                           |</span><br><span class="line">等待随机时间（截二退）           |</span><br><span class="line">   ^                           |</span><br><span class="line">   |                           |</span><br><span class="line">发送人为干扰信号                |</span><br><span class="line">   ^                           |</span><br><span class="line">   |                           v</span><br><span class="line">停止发送&lt;-------------------检测到了</span><br><span class="line">                           没检测到就发送直到完成</span><br></pre></td></tr></table></figure>
<h2 id="碰撞">碰撞</h2>
<p>单程端到端传播时延（从【说出口】到【被人听到】经历的时间）记为 <span
class="math inline">\(\tau\)</span>。为方便看，这里 <span
class="math inline">\(\tau = 20\)</span>。</p>
<p>B 在 <span class="math inline">\(\tau - \delta\)</span> 时刻向 A
发送，过程中检测到了碰撞。这里 <span class="math inline">\(\delta =
5\)</span>。</p>
<p>这里碰撞的时刻是 <span class="math inline">\(17.25\)</span>，即 <span
class="math inline">\(\tau - \delta / 2\)</span>。</p>
<pre class="mermaid">gantt
    title 碰撞（甘特图）
    dateFormat s
    axisFormat %S

    section 传播过程
    A发送后，从A到B传播          :0,20s
    B发送后，从B到A传播          :15,20s
    B检测到了碰撞，然后……          :20,36s
    A检测到了碰撞，然后……          :35,21s</pre>
<p>A 或 B 发送之后，至多需要 <span class="math inline">\(2 \tau\)</span>
的时间，即端到端往返时延，才能检测到与对方发生了碰撞。</p>
<p><span class="math inline">\(2 \tau\)</span>
叫【争用期】或【碰撞窗口】。</p>
<p><span class="math inline">\(2 \tau\)</span> 规定为 <span
class="math inline">\(51.2 \mathrm{\mu s}\)</span>。</p>
<h2 id="强化碰撞">强化碰撞</h2>
<p>碰撞之后，除了停止发送数据，还要发送 32 比特或 48
比特的人为干扰信号，告诉所有用户已经发送了碰撞。</p>
<h2 id="截断二进制指数退避">截断二进制指数退避</h2>
<p>计算碰撞后重传的等待时间。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">tau = <span class="number">25.6</span>  <span class="comment"># 单程时延</span></span><br><span class="line">basic_backoff_time = <span class="number">2</span> * tau  <span class="comment"># 往返时延，基本退避时间</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> retransmit_count <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">17</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;第<span class="subst">&#123;retransmit_count&#125;</span>次重传&quot;</span>)</span><br><span class="line">    k = <span class="built_in">min</span>(retransmit_count, <span class="number">10</span>)</span><br><span class="line">    r = random.randint(<span class="number">0</span>, <span class="number">2</span>**k - <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;退避时间：<span class="subst">&#123;r*basic_backoff_time&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>重传 16 次仍不成功就丢弃，并向高层报告。</p>
<h2 id="以太网的信道利用率">以太网的信道利用率</h2>
<p>帧的发送时间 <span class="math inline">\(T_0\)</span>：</p>
<p><span class="math display">\[
\mathrm{s = \frac{bit}{bit/s} = } \frac{L}{C} =
\frac{帧长}{数据发送速率}
\]</span></p>
<p>拖一会。</p>
<h2 id="例题">例题</h2>
<h3 id="section">【3-24】</h3>
<blockquote>
<p>假定站点 A 和 B 在同一个 10 Mbit/s
以太网网段上。这两个站点之间的传播时延为 225 比特时间。现假定 A
开始发送一帧，并且在 A 发送结束之前 B 也发送一帧。如果 A
发送的是以太网所容许的最短的帧，那么 <strong>A 在检测到和 B
发生碰撞之前能否把自己的数据发送完毕？</strong> 换言之，如果 A
在发送完毕之前并没有检测到碰撞，那么能否肯定 A 所发送的帧不会和 B
发送的帧发生碰撞？（提示：在计算时应当考虑到每一个以太网帧在发送到信道上时，在
MAC 帧前面还要增加若干字节（8 字节，64
比特）的前同步码和帧定界符。）</p>
</blockquote>
<p>即比较【假定 A 发送完】的时刻与【A 检测到碰撞】的时刻谁在前。</p>
<p>这里【A 检测到碰撞】的时刻要取最晚的情况，即 B “即将” 接收到 A
发送的时刻。传播时延是 225 比特时间，如果在 225 时刻 B 还没发送，B
就会接收到 A 发送的，这时 B 就不会发送，进而不会发生碰撞。</p>
<p>所以要取 B 在 224 时刻开始发送。经过一个传播时延，A 在 224 + 225 =
449 时刻检测到碰撞。</p>
<p>假定 A 会发送完：</p>
<p>51.2 μs × 10 Mbit/s = 512 bit</p>
<p>512 + 64 = 576 bit</p>
<p>假定不会发生碰撞，A 将在 576 比特时刻发送完。但是 A 已经在 449
时刻检测到碰撞了，所以 A 不会发送完。</p>
<h3 id="section-1">【3-25】</h3>
<blockquote>
<p>上题中的站点 A 和 B 在 t = 0 时同时发送了数据帧。当 t = 225
比特时间，A 和 B 同时检测到发生了碰撞，并且在 t = 225 + 48 = 273
比特时间完成了干扰信号的传输。A 和 B 在 CSMA/CD 算法中选择不同的 r
值退避。假定 A 和 B 选择的随机数分别是 rA = 0 和 rB = 1。试问 A 和 B
各在什么时间开始重传其数据帧？ A 重传的数据帧在什么时间到达 B？ A
重传的数据会不会和 B 重传的数据再次发生碰撞？B
会不会在预定的重传时间停止发送数据？</p>
</blockquote>
<p>A 或 B 在检测到碰撞之后，需要做以下几件事：</p>
<ol type="1">
<li>发送 48 比特的干扰信号</li>
<li>退避等待一段时间（r × 争用期 51.2 μs）</li>
<li>开始检测信道</li>
<li>检测到空闲后，再等待一个帧最小间隔 9.6 μs</li>
<li>期间没有接收到信号，则重传</li>
</ol>
<p>下面的单位都是比特时间：</p>
<ul>
<li>0 ~ 225：A 和 B 发送的数据在信道上传播</li>
<li>225：A 和 B 同时检测到碰撞</li>
<li>225 ~ 273：A 和 B 都发送干扰信号</li>
<li>273：A 和 B 都发送完了干扰信号，开始退避等待
<ul>
<li>273：A 退避时间为 0，开始检测信道</li>
<li>273 ~ 785：B 退避时间为 512</li>
</ul></li>
<li>225|273 ~ 450|498：干扰信号在信道上传播</li>
<li>450：A 和 B 都接收到了干扰信号</li>
<li>498：A 和 B 都接收完了干扰信号，B 仍然在退避
<ul>
<li>498 ~ 594：A 检测到空闲，等待 96</li>
<li>594：A 开始重传</li>
<li>594 ~ 819：A 重传的数据在信道上传播</li>
</ul></li>
<li>785：B 开始检测信道
<ul>
<li>785 ~ 881：B 等待 96</li>
<li>但是在 819 时间 B 接收到了 A 重传的，所以 B 暂时不重传</li>
</ul></li>
</ul>
<blockquote>
<p>试问 A 和 B 各在什么时间开始重传其数据帧？</p>
</blockquote>
<p>A 在 594，B 不知道</p>
<blockquote>
<p>A 重传的数据帧在什么时间到达 B？</p>
</blockquote>
<p>819</p>
<blockquote>
<p>A 重传的数据会不会和 B 重传的数据再次发生碰撞？</p>
</blockquote>
<p>不会</p>
<blockquote>
<p>B 会不会在预定的重传时间停止发送数据？</p>
</blockquote>
<p>会</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>CN09 - 数据链路层 - 以太网</title>
    <url>/blog//CN/09/</url>
    <content><![CDATA[<ul>
<li>以太网：Ethernet，是一种局域网技术（可以作为局域网的同义词），使用
CSMA/CD 协议。
<ul>
<li>DIX Ethernet V2：第一个局域网标准。现在主要用这个。</li>
<li>IEEE 802.3：第一个 IEEE 的局域网标准。</li>
</ul></li>
<li>局域网共享信道，为避免冲突，可采用静态划分信道（复用）或动态媒体接入控制（多点接入：随机接入/受控接入-轮询）</li>
<li>局域网数据链路层的两个子层：
<ul>
<li>逻辑链路控制 LLC (Logical Link Control)
子层：与传输媒体无关。已经很少用了。</li>
<li>媒体接入控制 MAC (Medium Access Control) 子层：与传输媒体有关。</li>
</ul></li>
<li>MAC 帧的格式
<ul>
<li>（带宽为 <span class="math inline">\(\mathrm{10Mbit/s}\)</span>
的）以太网 V2： <span class="math display">\[
6 + 6 + 2 + (46 \sim 1500) + 4 = (64 \sim 1518) 字节
\]</span> 其中 <span class="math inline">\(\mathrm{64Byte = \dfrac{51.2
\mu s \times 10Mbit/s}{8bit/Byte}}\)</span>，减去 18
字节的首部和尾部后，得到数据部分的最小长度 46 字节。</li>
</ul></li>
<li>集线器（Hub）与交换机（Switch）
<ul>
<li>某某带宽的集线器：分摊带宽。总线型。</li>
<li>某某带宽的交换机：每个接口独占带宽。并行。</li>
</ul></li>
<li>以太网交换机的自学习功能</li>
<li>适配器的作用：
<ul>
<li>与 CPU/存储器并行通信</li>
<li>与局域网串行通信</li>
<li>接收并缓存 MAC
帧，帧的目标地址不是它自己时，或者不符合格式、校验失败时就丢弃</li>
<li>安装驱动到操作系统</li>
<li>实现以太网协议</li>
</ul></li>
</ul>
<span id="more"></span>
<h2 id="windows-下用-cmd-查看网络适配器的-mac-地址">Windows 下用 cmd
查看网络适配器的 MAC 地址</h2>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ipconfig</span> /all</span><br></pre></td></tr></table></figure>
<p>适配器的 MAC
地址又叫硬件地址/物理地址。一台计算机可以有多个适配器。</p>
<h2 id="mac-地址">MAC 地址</h2>
<p><a
href="https://standards.ieee.org/wp-content/uploads/import/documents/tutorials/eui.pdf">EUI</a>-48：</p>
<ul>
<li>前三个字节是 IEEE 的注册管理机构分配的</li>
<li>后三个字节是厂家自行分配的</li>
<li>第一个字节最低位：0 为单播，1 为多播</li>
<li>全 1 的地址（FF:FF:FF:FF:FF:FF）是广播地址</li>
</ul>
<h2 id="以太网-v2-的-mac-帧格式">以太网 V2 的 MAC 帧格式</h2>
<table>
<colgroup>
<col style="width: 9%" />
<col style="width: 16%" />
<col style="width: 16%" />
<col style="width: 47%" />
<col style="width: 6%" />
<col style="width: 2%" />
</colgroup>
<thead>
<tr class="header">
<th><strong>字段名</strong></th>
<th>目标地址</th>
<th>源地址</th>
<th>类型（上一层用的什么协议）</th>
<th>数据</th>
<th>FCS</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>字节数</strong></td>
<td>6</td>
<td>6</td>
<td>2</td>
<td>46~1500</td>
<td>4</td>
</tr>
<tr class="even">
<td><strong>值</strong></td>
<td>xx:xx:xx:xx:xx:xx</td>
<td>xx:xx:xx:xx:xx:xx</td>
<td>0800【IPv4 数据报】<br/>80DD【IPv6 数据报】<br/></td>
<td>……</td>
<td>……</td>
</tr>
</tbody>
</table>
<p>数据部分不足 46 字节时，补到 46 字节。</p>
<p>MAC 子层 -&gt; 物理层：在 MAC 帧前面插入 7 字节的前同步码和 1
字节的帧定界符：</p>
<p>就是 <code>10101010 10101010 ... 10101010 10101011</code>。交替的 10
用于时钟同步，最后一个字节的最后一个比特变了，告诉接收端，后面的就是 MAC
帧。</p>
<p>不用标记帧结束，因为是曼彻斯特编码，一直在跳变，脱离原本的规律了就是帧结束了。</p>
<h2 id="集线器与交换机">集线器与交换机</h2>
<p>集线器工作在物理层</p>
<p>交换机工作在数据链路层，全双工。并且不使用 CSMA/CD
协议，但仍然使用以太网的帧结构。</p>
<p>交换机的每一个接口都是一个冲突域。</p>
<p>交换机分为直通交换和存储转发。直通交换不校验 FCS，直接读 6
字节的目标地址（有时包含前导码）。</p>
<h2 id="以太网交换机的自学习功能">以太网交换机的自学习功能</h2>
<p>一些机器连在交换机的不同端口上。</p>
<p>源机器发送帧到目标机器，通过交换机。</p>
<p>如果交换机的交换表里没有记录【源机器】的信息（MAC 地址 +
端口），就记录下来。</p>
<p>如果交换机的交换表里没有记录【目标机器】的信息（MAC 地址 +
端口），就向所有机器广播。但是广播后是不记录目标机器的信息的。</p>
<p>记录一个新信息时，同时加上了有效时间，过期的信息会被删除。每查到一次目标地址，会更新有效时间。</p>
<p>广播过程中可能会兜圈子。IEEE 802.1D
标准指定了一个生成树协议（STP），在逻辑上切断一些回路，避免了兜圈子的问题。</p>
<h2 id="base-t-以太网">100BASE-T 以太网</h2>
<ul>
<li>使用双绞线（T），带宽为 100Mbit/s。</li>
<li>标准是 IEEE 802.3u，半双工时使用 CSMA/CD 协议，全双工时不使用。</li>
<li>争用期为 5.12 μs，帧最小间隔 0.96 μs，是 10 Mbit/s
以太网的十分之一。</li>
</ul>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>CN0A - 网络层 - 杂项概念</title>
    <url>/blog//CN/0A/</url>
    <content><![CDATA[<p>杂项概念</p>
<span id="more"></span>
<h2 id="两种服务">两种服务</h2>
<p>网络层应该向运输层提供怎样的服务？面向连接的还是无连接的？</p>
<p>可靠交付应该由谁来完成？是网络还是端系统？</p>
<ul>
<li>虚电路服务：面向连接的，可靠通信由网络来保证</li>
<li>数据报服务：无连接的，可靠通信由用户主机保证</li>
</ul>
<p>现在用数据报服务。</p>
<h2 id="两个层面">两个层面</h2>
<p>在路由器之间有两类传送的信息：分组数据和路由数据。</p>
<p>于是把网络层抽象地划分为“数据层面”和“控制层面”。</p>
<p>在数据层面（或者说转发层面），每个路由器独立地通过本机的转发表转发分组。在控制层面，多个路由器协同动作创建路由表。</p>
<h2 id="路由表和转发表">路由表和转发表</h2>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>CN0B - 网络层 - IP 地址</title>
    <url>/blog//CN/0B/</url>
    <content><![CDATA[<p>IP 地址</p>
<span id="more"></span>
<h2 id="ipv4">IPv4</h2>
<p>4 个字节，32 个二进制位。</p>
<p>快速计算单字节：</p>
<ul>
<li>从高到低：128 64 32 16 8 4 2 1</li>
<li>高一位/两位/三位/四位一：128 192 224 240</li>
<li>高五位/六位/七位一：248 252 254</li>
<li>全一：255</li>
</ul>
<h3 id="分类编址">分类编址</h3>
<ul>
<li>A 类：网络号 1 个字节，主机号 3 个字节，<code>0</code> 开头</li>
<li>B 类：网络号 2 个字节，主机号 2 个字节，<code>10</code> 开头</li>
<li>C 类：网络号 3 个字节，主机号 1 个字节，<code>110</code> 开头</li>
<li>D 类：多播地址，<code>1110</code> 开头</li>
<li>E 类：保留使用，<code>1111</code> 开头</li>
</ul>
<p>点分十进制表示最高字节的范围：</p>
<ul>
<li>A 类：0 - 127</li>
<li>B 类：128 - 191</li>
<li>C 类：192 - 223</li>
<li>D 类：224 - 239</li>
<li>E 类：240 - 255</li>
</ul>
<p>主机号全零为网络地址。网络号和主机号都全零为默认路由。</p>
<h3 id="无分类编址-cidr">无分类编址 CIDR</h3>
<p>IP 地址与子网掩码做按位与运算。</p>
<p>子网掩码类似 <code>255.248.0.0</code>
（<code>11111111 11111000 00000000 00000000</code>）</p>
<p>与 IP 地址长度相同。前面全是 <code>1</code> 后面全是
<code>0</code>，用于标记 IP 地址用前面的几位表示网络地址。</p>
<p>此例子有 13 个 <code>1</code>，即网络前缀长度是 13，用前面 13
位表示网络地址，后面的位表示主机地址。记作 <code>IP地址/13</code>。</p>
<p>CIDR 编址又叫【构造超网】（相对于子网来说）</p>
<h2 id="ip-地址和-mac-地址">IP 地址和 MAC 地址</h2>
<p>IP 地址相当于工作单位的地址，MAC 地址相当于身份证号。</p>
<ul>
<li>运输层：TCP 报文的首部为端口号。再加一个首部信息，传给网络层</li>
<li>网络层：IP 数据报的首部为 IP
地址。再加一个首部信息、一个尾部信息，传给数据链路层</li>
<li>数据链路层：MAC 帧的首部为 MAC
地址（源和目标）+协议类型【6+6+2】，尾部为
FCS【4】，数据部分【46~1500】</li>
</ul>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
</search>
