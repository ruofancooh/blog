<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MongoDB - 00 - 准备</title>
    <url>/blog/2023/MongoDB-00-%E5%87%86%E5%A4%87/</url>
    <content><![CDATA[<ul>
<li>Windows 10 环境配置</li>
<li>启动脚本</li>
</ul>
<span id="more"></span>
<h2 id="windows-10-环境配置">Windows 10 环境配置</h2>
<ol type="1">
<li><a href="https://www.mongodb.com/try/download/community">下载
MongoDB</a>，我下载的是<code>7.0.0 (current)</code>的<code>zip</code>格式。</li>
<li>解压，右键用 PowerShell 运行<code>Install-Compass.ps1</code>，安装
GUI。 默认会安装到 C 盘，安装完后手动移到 D 盘。</li>
<li>建数据库文件夹，建一个空日志<code>test.log</code>。</li>
<li>```sh mongod --dbpath [数据库文件夹路径] --logpath [日志文件路径]
--logappend <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5. 用 MongoDBCompass 连接。</span><br><span class="line"></span><br><span class="line">## 启动脚本</span><br><span class="line"></span><br><span class="line">`mo.bat`</span><br><span class="line"></span><br><span class="line">```bat</span><br><span class="line">cd /d D:\ProgramData\MongoDBCompass</span><br><span class="line">MongoDBCompass</span><br><span class="line">cd /d D:\ProgramData\mongodb-win32-x86_64-windows-7.0.0\bin</span><br><span class="line">call mongod --dbpath D:\ProgramData\mongodb-win32-x86_64-windows-7.0.0\db --logpath D:\ProgramData\mongodb-win32-x86_64-windows-7.0.0\test.log --logappend</span><br></pre></td></tr></table></figure></li>
</ol>
<p>脚本会 <code>call mongod</code>，停止则断开连接。</p>
]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
  </entry>
  <entry>
    <title>MongoDB - 01 - 基本操作</title>
    <url>/blog/2023/MongoDB-01-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>装好软件后的基本操作。</p>
<span id="more"></span>
<h2 id="展示所有数据库名">展示所有数据库名</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">show dbs</span><br></pre></td></tr></table></figure>
<h2 id="创建切换数据库">创建/切换数据库</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">use dbname</span><br></pre></td></tr></table></figure>
<h2 id="删除某个数据库">删除某个数据库</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">use dbname</span><br><span class="line">db.<span class="title function_">dropDatabase</span>()</span><br></pre></td></tr></table></figure>
<h2 id="向数据库里加集合">向数据库里加集合</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="title function_">createCollection</span>(<span class="string">&quot;c1&quot;</span>);</span><br><span class="line">db.<span class="title function_">createCollection</span>(<span class="string">&quot;c2&quot;</span>);</span><br><span class="line">db.<span class="title function_">createCollection</span>(<span class="string">&quot;c3&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="删除数据库的某个集合">删除数据库的某个集合</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">c1</span>.<span class="title function_">drop</span>();</span><br></pre></td></tr></table></figure>
<h2 id="展示数据库里的所有集合名">展示数据库里的所有集合名</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">show collections</span><br></pre></td></tr></table></figure>
<h2 id="向集合里加文档">向集合里加文档</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">c1</span>.<span class="title function_">insertOne</span>(&#123; <span class="attr">aaa</span>: <span class="number">123</span> &#125;);</span><br><span class="line">db.<span class="property">c1</span>.<span class="title function_">insertMany</span>([</span><br><span class="line">  &#123; <span class="attr">aaa</span>: <span class="number">123</span>, <span class="attr">bbb</span>: <span class="number">456</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">aaa</span>: <span class="number">123</span>, <span class="attr">ccc</span>: <span class="number">789</span> &#125;,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>
<h2 id="查询集合里的所有文档">查询集合里的所有文档</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">c1</span>.<span class="title function_">find</span>();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
  </entry>
  <entry>
    <title>MongoDB - 02 - 按条件查询文档</title>
    <url>/blog/2023/MongoDB-02-%E6%8C%89%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<p>查询某数据库某集合中的文档。</p>
<p>我这里键加不加引号效果一样。</p>
<span id="more"></span>
<h2 id="查询包含一个多个键值对的文档">查询包含一个/多个键值对的文档</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">c1</span>.<span class="title function_">find</span>(&#123; <span class="attr">aaa</span>: <span class="number">123</span> &#125;);</span><br><span class="line">db.<span class="property">c1</span>.<span class="title function_">find</span>(&#123; <span class="attr">aaa</span>: <span class="number">123</span>, <span class="attr">bbb</span>: <span class="number">456</span> &#125;);</span><br></pre></td></tr></table></figure>
<p>应该大概也许和与操作符的效果一样：</p>
<ul>
<li><code>$and: []</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">c1</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line">  <span class="attr">$and</span>: [&#123; <span class="attr">aaa</span>: <span class="number">123</span> &#125;, &#123; <span class="attr">bbb</span>: <span class="number">456</span> &#125;],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2
id="查询包含键值对列表中的一个的文档">查询包含键值对列表中的一个的文档</h2>
<ul>
<li><code>$or: []</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">c1</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line">  <span class="attr">$or</span>: [&#123; <span class="attr">aaa</span>: <span class="number">123</span> &#125;, &#123; <span class="attr">bbb</span>: <span class="number">456</span> &#125;],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2
id="查询某个键的值大于小于某个值的文档">查询某个键的值大于/小于某个值的文档</h2>
<ul>
<li><code>$gt:</code> 大于（greater than）</li>
<li><code>$lt:</code> 小于（less than）</li>
<li><code>$gte:</code> 大于等于（greater than or equal to）</li>
<li><code>$lte:</code> 小于等于（less than or equal to）</li>
<li><code>$ne:</code> 不等于（not equal to）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">c1</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line">  <span class="attr">aaa</span>: &#123; <span class="attr">$gt</span>: <span class="number">100</span> &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>可以和前面的套娃：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">c1</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line">  <span class="attr">$and</span>: [&#123; <span class="attr">aaa</span>: &#123; <span class="attr">$gt</span>: <span class="number">100</span> &#125; &#125;, &#123; <span class="attr">bbb</span>: &#123; <span class="attr">$lt</span>: <span class="number">500</span> &#125; &#125;],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2
id="查询某个键的值在不在某个值列表内的文档">查询某个键的值在/不在某个值列表内的文档</h2>
<ul>
<li><code>$in: []</code> 在</li>
<li><code>$nin: []</code> 不在</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">c1</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line">  <span class="attr">aaa</span>: &#123; <span class="attr">$in</span>: [<span class="number">123</span>, <span class="number">456</span>] &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
  </entry>
  <entry>
    <title>Hadoop - 00 - 搭建环境</title>
    <url>/blog/2023/Hadoop-00-%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>Hadoop 完全分布式模式环境配置：</p>
<table>
<colgroup>
<col style="width: 47%" />
<col style="width: 52%" />
</colgroup>
<thead>
<tr class="header">
<th>用</th>
<th>名</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>物理机系统</strong></td>
<td>Windows 10</td>
</tr>
<tr class="even">
<td><strong>虚拟机容器</strong></td>
<td>VMware Workstation 17.0.2
Player（免费的，但是不支持克隆虚拟机，需要手动装另外两台）</td>
</tr>
<tr class="odd">
<td><strong>虚拟机系统</strong></td>
<td>Ubuntu 22.04.3 server</td>
</tr>
<tr class="even">
<td><strong>主角</strong></td>
<td>Hadoop 3.3.6</td>
</tr>
<tr class="odd">
<td><strong>SSH
连接虚拟机用的，不装直接操作也可以，装了比较方便可以复制粘贴</strong></td>
<td>Xshell 7</td>
</tr>
<tr class="even">
<td><strong>虚拟机与物理机互传文件用的</strong></td>
<td>Xftp 7</td>
</tr>
</tbody>
</table>
<p>装了三台机器，名：master、worker1、worker2。</p>
<span id="more"></span>
<h2 id="在-windows-中安装-linux-虚拟机">在 Windows 中安装 Linux
虚拟机</h2>
<p><a href="/blog/2023/在Windows中安装Linux虚拟机">教程</a></p>
<ul>
<li>其中，【安装 Ubuntu】的第 4 步，我选的还是默认的
DHCP，装好之后再改成静态 IP。</li>
<li>第 11 步，要安装 OpenSSH server。</li>
<li>不用设置共享文件夹，因为我们有 Xftp。</li>
</ul>
<h2 id="安装-xshell-和-xftp">安装 Xshell 和 Xftp</h2>
<p><a
href="https://www.xshell.com/zh/free-for-home-school/">下载地址</a></p>
<h2 id="用-xftp-连接虚拟机">用 Xftp 连接虚拟机</h2>
<p>查看虚拟机的 IP 地址：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install net-tools</span><br><span class="line">ifconfig</span><br></pre></td></tr></table></figure>
<p>然后用 Xftp 连接。</p>
<h2 id="下载-hadoop">下载 Hadoop</h2>
<p><a
href="https://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/">下载页面（清华源）</a></p>
<p>我这里下载的是<code>hadoop-3.3.6.tar.gz</code>。</p>
<p>用 Xftp 把压缩包传到虚拟机的家目录下，然后：</p>
<h2
id="安装软件及配置环境变量写脚本避免重复工作">安装软件及配置环境变量，写脚本避免重复工作</h2>
<p>把脚本也传到家目录，然后执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">bash ha.sh</span><br></pre></td></tr></table></figure>
<p>其中，安装 OpenJDK 是按照 <a
href="https://cwiki.apache.org/confluence/display/HADOOP/Hadoop+Java+Versions">https://cwiki.apache.org/confluence/display/HADOOP/Hadoop+Java+Versions</a>
里的说明，指向 <a
href="https://github.com/apache/hadoop/blob/rel/release-3.2.1/dev-support/docker/Dockerfile#L92">https://github.com/apache/hadoop/blob/rel/release-3.2.1/dev-support/docker/Dockerfile#L92</a>
里的命令。</p>
<p><code>ha.sh</code>：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 JDK</span></span><br><span class="line">sudo apt-get update;</span><br><span class="line">sudo apt-get install openjdk-8-jdk libbcprov-java;</span><br><span class="line">sudo apt-get clean;</span><br><span class="line"><span class="comment"># 存放 Hadoop 压缩包的位置</span></span><br><span class="line"><span class="built_in">cd</span>;</span><br><span class="line"><span class="comment"># 解压，删除（这两句我执行的时候没执行上，重启后手动执行）</span></span><br><span class="line">sudo tar -zxvf hadoop-3.3.6.tar.gz -C /usr/local;</span><br><span class="line">sudo <span class="built_in">rm</span> hadoop-3.3.6.tar.gz;</span><br><span class="line"><span class="comment"># 写环境变量</span></span><br><span class="line"><span class="comment"># env 查看所有环境变量</span></span><br><span class="line"><span class="comment"># echo $NAME 查看某个</span></span><br><span class="line">JAVA_HOME=<span class="string">&quot;/lib/jvm/java-1.8.0-openjdk-amd64&quot;</span>;</span><br><span class="line">HADOOP_HOME=<span class="string">&quot;/usr/local/hadoop-3.3.6&quot;</span>;</span><br><span class="line">text=<span class="string">&quot;export JAVA_HOME=<span class="variable">$JAVA_HOME</span></span></span><br><span class="line"><span class="string">export HADOOP_HOME=<span class="variable">$HADOOP_HOME</span></span></span><br><span class="line"><span class="string">export PATH=<span class="variable">$PATH</span>:<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/sbin:<span class="variable">$JAVA_HOME</span>/bin</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$text</span>&quot;</span> &gt;&gt; .bashrc;</span><br><span class="line"><span class="comment"># 应用，重启</span></span><br><span class="line"><span class="built_in">source</span> .bashrc;</span><br><span class="line">reboot;</span><br></pre></td></tr></table></figure>
<h2 id="改虚拟机内的文件">改虚拟机内的文件</h2>
<p><a href="https://www.runoob.com/linux/linux-vim.html">Vim
教程</a></p>
<p>不用
Vim，传到真机上修改也可，这样还方便传到其他机器上。注意行尾序列是<strong>LF</strong>，小心操作不当变成
CRLF。</p>
<p>（还可以写一个集群分发脚本，不过暂时没必要）</p>
<p>（<a href="/blog/2023/Hadoop-01-Linux-集群分发脚本配置">Hadoop - 01 -
Linux - 集群分发脚本配置</a>）</p>
<p>把改好的文件存真机上一份，直接用 Xftp
传（如果传输失败，就修改文件权限）。</p>
<p>注意传之前把静态 IP 改了，不同机器设成不同静态 IP。</p>
<h3
id="改00-installer-config.yaml改成静态-ip">改<code>00-installer-config.yaml</code>，改成静态
IP</h3>
<p>编辑<code>/etc/netplan</code>下的<code>.yaml</code>文件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/netplan</span><br><span class="line">ll</span><br><span class="line">sudo vi 00-installer-config.yaml</span><br></pre></td></tr></table></figure>
<p>原来的文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This is the network config written by &#x27;subiquity&#x27;</span></span><br><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">ethernets:</span></span><br><span class="line">    <span class="attr">ens33:</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>修改后的文件：</p>
<p>参考 <a
href="https://netplan.readthedocs.io/en/stable/netplan-tutorial/">https://netplan.readthedocs.io/en/stable/netplan-tutorial/</a></p>
<p>选择<code>192.168.78</code>的依据是：</p>
<ul>
<li>在真机使用<code>ipconfig</code>命令得到的【VMnet8】的 IPv4
地址<code>192.168.78.1</code></li>
<li>查看 <code>C:\ProgramData\VMware\vmnetnat.conf</code> 里的 NAT
网关地址<code>192.168.78.2</code></li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">ethernets:</span></span><br><span class="line">    <span class="attr">ens33:</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">dhcp6:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">addresses:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.78</span><span class="number">.101</span><span class="string">/24</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">to:</span> <span class="string">default</span></span><br><span class="line">          <span class="attr">via:</span> <span class="number">192.168</span><span class="number">.78</span><span class="number">.2</span></span><br><span class="line">      <span class="attr">nameservers:</span></span><br><span class="line">        <span class="attr">addresses:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.78</span><span class="number">.2</span></span><br></pre></td></tr></table></figure>
<p>每台机器的<code>ens33.addresses</code>要设置成不同的。</p>
<p>测试：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo netplan try</span><br></pre></td></tr></table></figure>
<p>回车以应用。</p>
<h3 id="改-hosts">改 <code>hosts</code></h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/hosts</span><br></pre></td></tr></table></figure>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">192.168.78.101 master</span><br><span class="line">192.168.78.102 worker1</span><br><span class="line">192.168.78.103 worker2</span><br></pre></td></tr></table></figure>
<p>注意，如果有：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">127.0.1.1 [主机名]</span><br></pre></td></tr></table></figure>
<p>要把这一行删了，否则绑定不到<code>192.168.78.x</code>。暂时不知道有没有不良影响。</p>
<h3
id="改hadoop_homeetchadoophadoop-env.sh">改<code>$HADOOP_HOME/etc/hadoop/hadoop-env.sh</code></h3>
<ul>
<li><code>JAVA_HOME</code>：JAVA 主目录</li>
<li><code>HDFS_NAMENODE_USER</code>：启动集群 NameNode 服务的用户</li>
<li><code>HDFS_DATANODE_USER</code>：启动集群 DataNode 服务的用户</li>
<li><code>HDFS_SECONDARYNAMENODE_USER</code>：启动集群 SecondaryNamenode
服务的用户</li>
<li><code>YARN_RESOURCEMANAGER_USER</code>：启动集群 ResourceManager
服务的用户</li>
<li><code>YARN_NODEMANAGER_USER</code>：启动集群 NodeManager
服务的用户</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/lib/jvm/java-1.8.0-openjdk-amd64</span><br><span class="line"><span class="built_in">export</span> HDFS_NAMENODE_USER=rc</span><br><span class="line"><span class="built_in">export</span> HDFS_DATANODE_USER=rc</span><br><span class="line"><span class="built_in">export</span> HDFS_SECONDARYNAMENODE_USER=rc</span><br><span class="line"><span class="built_in">export</span> YARN_RESOURCEMANAGER_USER=rc</span><br><span class="line"><span class="built_in">export</span> YARN_NODEMANAGER_USER=rc</span><br></pre></td></tr></table></figure>
<p>rc 是我每台机器的用户名。</p>
<p><strong>下面的文件都是在<code>$HADOOP_HOME/etc/hadoop</code>目录里。</strong></p>
<h3 id="改core-site.xml">改<code>core-site.xml</code></h3>
<ul>
<li><code>fs.defaultFS</code>：NameNode 的地址</li>
<li><code>haoodp.tmp.dir</code>：HDFS 数据保存的临时目录</li>
<li><code>hadoop.http.staticuser.user</code>：HDFS
网页登录使用的静态用户</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master:9820<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/hadoop-3.3.6/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.http.staticuser.user<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>rc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="改hdfs-site.xml">改<code>hdfs-site.xml</code></h3>
<ul>
<li><code>dfs.namenode.http-address</code>：Web 方式访问 NameNode
的主机和端口号</li>
<li><code>dfs.namenode.secondary.http-address</code>：SecondaryNamenode
部署的主机</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:9870<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>worker2:9868<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="改mapred-site.xml">改<code>mapred-site.xml</code></h3>
<ul>
<li><code>mapreduce.framework.name</code>：配置为 yarn 进行 MapReduce
作业的调度</li>
<li><code>mapreduce.jobhistory.address</code>：历史服务器端地址</li>
<li><code>mapreduce.jobhistory.webapp.address</code>：历史服务器 web
地址</li>
<li>下面三个环境变量是 Hadoop 的目录。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>worker1:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>worker1:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.app.mapreduce.am.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=/usr/local/hadoop-3.3.6/<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.map.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=/usr/local/hadoop-3.3.6/<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.reduce.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=/usr/local/hadoop-3.3.6/<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="改yarn-site.xml">改<code>yarn-site.xml</code></h3>
<ul>
<li><code>yarn.resourcemanager.hostname</code>： ResourceManager
的主机名</li>
<li><code>yarn.nodemanager.aux-services</code>：NodeManager
获取数据的方式</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>worker1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 环境变量的继承 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.env-whitelist<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HAD</span><br><span class="line">      OOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,</span><br><span class="line">      HADOOP_MAPRED_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 开启日志聚集功能 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 设置日志聚集服务器地址 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log.server.url<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>http://worker1:19888/jobhistory/logs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 设置日志保留时间 7 天 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>604800<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="改workers">改<code>workers</code></h3>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">worker1</span><br><span class="line">worker2</span><br></pre></td></tr></table></figure>
<h2
id="再建两个虚拟机-worker1-和-worker2配置好之后互相复制-ssh-key">再建两个虚拟机
worker1 和 worker2，配置好之后，互相复制 SSH KEY</h2>
<p>三台机器上都执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>
<p>三台机器上都执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-copy-id master</span><br><span class="line">ssh-copy-id worker1</span><br><span class="line">ssh-copy-id worker2</span><br></pre></td></tr></table></figure>
<h2 id="格式化-hdfs">格式化 HDFS</h2>
<p>只用在 master 执行一次：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure>
<p>如果以后遇到问题，需要重新格式化时，需停止进程，然后删除每台机器的
<code>$HADOOP_HOME/data/</code> 和 <code>$HADOOP_HOME/logs/</code>。</p>
<h2 id="启动-hadoop">启动 Hadoop</h2>
<p>在 master 执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">start-all.sh</span><br></pre></td></tr></table></figure>
<h2 id="启动历史服务器">启动历史服务器</h2>
<p>在 worker1 执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mapred --daemon start historyserver</span><br></pre></td></tr></table></figure>
<h2 id="检查环境">检查环境</h2>
<h3 id="查看相关进程">查看相关进程</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">jps</span><br></pre></td></tr></table></figure>
<p>master 应该有：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">[PID] NameNode</span><br><span class="line">[PID] Jps</span><br></pre></td></tr></table></figure>
<p>worker1 应该有：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">[PID] Jps</span><br><span class="line">[PID] JobHistoryServer</span><br><span class="line">[PID] DataNode</span><br><span class="line">[PID] NodeManager</span><br></pre></td></tr></table></figure>
<p>worker2 应该有：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">[PID] NodeManager</span><br><span class="line">[PID] SecondaryNameNode</span><br><span class="line">[PID] Jps</span><br><span class="line">[PID] DataNode</span><br></pre></td></tr></table></figure>
<h3 id="查看进程的-web-端口">查看进程的 Web 端口</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">netstat -tunlp</span><br></pre></td></tr></table></figure>
<ul>
<li>-t：显示 TCP 连接信息</li>
<li>-u：显示 UDP 连接信息</li>
<li>-n：以数字形式显示 IP 地址和端口号</li>
<li>-l：仅显示监听状态的连接</li>
<li>-p：显示与连接关联的进程信息</li>
</ul>
<h2
id="改真机的hosts方便用浏览器访问">改真机的<code>hosts</code>，方便用浏览器访问</h2>
<p><code>C:\Windows\System32\drivers\etc\hosts</code>：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">192.168.78.101 master</span><br><span class="line">192.168.78.102 worker1</span><br><span class="line">192.168.78.103 worker2</span><br></pre></td></tr></table></figure>
<h2 id="用浏览器访问-namenode">用浏览器访问 Namenode</h2>
<p>master:9870</p>
<h2 id="测试进行-wordcount">测试进行 wordcount</h2>
<h3 id="创建文件夹在-ubuntu">创建文件夹在 Ubuntu</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$HADOOP_HOME</span></span><br><span class="line"><span class="built_in">mkdir</span> wcinput</span><br></pre></td></tr></table></figure>
<h3 id="创建文本文档在-ubuntu">创建文本文档在 Ubuntu</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> wcinput</span><br><span class="line">vi word.txt</span><br></pre></td></tr></table></figure>
<p><code>word.txt</code>：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">ss ss</span><br><span class="line">cls cls</span><br><span class="line">aaabbbccc</span><br><span class="line">rf rf rfr</span><br></pre></td></tr></table></figure>
<h3 id="创建文件夹到-hdfs">创建文件夹到 HDFS</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hadoop fs -<span class="built_in">mkdir</span> /wcinput</span><br></pre></td></tr></table></figure>
<h3 id="上传文件到-hdfs">上传文件到 HDFS</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hadoop fs -put word.txt /wcinput</span><br></pre></td></tr></table></figure>
<h3 id="测试进行-wordcount-1">测试进行 wordcount</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$HADOOP_HOME</span></span><br><span class="line">hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.3.6.jar wordcount /wcinput /wcoutput</span><br></pre></td></tr></table></figure>
<p>如果成功，HDFS
的<code>/wcoutput</code>目录里会有一个<code>_SUCCESS</code>文件和输出文件，可以通过浏览器查看：</p>
<p>master:9870 -&gt; 菜单 -&gt; Utilities -&gt; Browse the file system
-&gt; <code>/wcoutput/part-r-00000</code>：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">aaabbbccc	1</span><br><span class="line">cls	2</span><br><span class="line">rf	2</span><br><span class="line">rfr	1</span><br><span class="line">ss	2</span><br></pre></td></tr></table></figure>
<h2 id="用浏览器访问-jobhistory">用浏览器访问 JobHistory</h2>
<p>worker1:19888</p>
<h2 id="停止-hadoop">停止 Hadoop</h2>
<p>在 master 执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">stop-all.sh</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
  </entry>
  <entry>
    <title>Hadoop - 01 - Linux - 集群分发脚本配置</title>
    <url>/blog/2023/Hadoop-01-Linux-%E9%9B%86%E7%BE%A4%E5%88%86%E5%8F%91%E8%84%9A%E6%9C%AC%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>改配置文件后，用 Xftp
一个一个传还是很麻烦的，于是写一个脚本用来同步文件。</p>
<p>不管那么多，先能跑起来就行。毕竟连前置课程《Linux
操作系统》都没上，因为教学计划改变了。</p>
<span id="more"></span>
<h2 id="rsync">rsync</h2>
<p>远程同步文件用的。<a
href="https://www.ruanyifeng.com/blog/2020/08/rsync.html">rsync
用法教程</a></p>
<p>我使用的 Ubuntu 默认已经安装了
rsync。直接在根目录建一个文件夹<code>test</code>，里面再套几个文件夹和文件，然后执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo rsync -av /test worker1:/</span><br></pre></td></tr></table></figure>
<p>把<code>/test</code>文件夹整个复制到 worker1 的根目录。</p>
<p>显示权限拒绝，说明我的 SSH 还没有配置好。<a
href="https://wangdoc.com/ssh/key#ssh-copy-id-%E5%91%BD%E4%BB%A4%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%85%AC%E9%92%A5">SSH
教程</a></p>
<h2 id="改-sshd-配置文件">改 SSHD 配置文件</h2>
<p>三台机器上都修改：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>
<p>在文件里加上 <code>PermitRootLogin yes</code>，然后重启服务：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart sshd</span><br></pre></td></tr></table></figure>
<h2 id="改三台机器的-root-用户密码">改三台机器的 root 用户密码</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure>
<h2 id="复制-master-的公钥给其他机器的-root-用户">复制 master
的公钥给其他机器的 root 用户</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub root@worker1</span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub root@worker2</span><br></pre></td></tr></table></figure>
<p>然后再尝试用 rsync 同步，成功了。</p>
<h2 id="写usrbinxsync.sh">写<code>/usr/bin/xsync.sh</code></h2>
<p>复制自老师给的配置文档，把主机名改了：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#1.-------判断参数个数</span></span><br><span class="line"><span class="comment">#判断参数个数是否小于 1,如果小于 1 表示没有向脚本传递参数</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -lt 1 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> Not Enough Argument!</span><br><span class="line">    <span class="built_in">exit</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment">#2. 遍历集群所有机器</span></span><br><span class="line"><span class="keyword">for</span> host <span class="keyword">in</span> master worker1 worker2</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> ==================== <span class="variable">$host</span> ====================</span><br><span class="line">    <span class="comment">#3. 遍历所有目录,挨个发送</span></span><br><span class="line">    <span class="comment">#先遍历更新的文本文件</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> <span class="variable">$@</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="comment">#4. 判断文件是否存在</span></span><br><span class="line">        <span class="keyword">if</span> [ -e <span class="variable">$file</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            <span class="comment">#5. 获取父目录</span></span><br><span class="line">            pdir=$(<span class="built_in">cd</span> -P $(<span class="built_in">dirname</span> <span class="variable">$file</span>); <span class="built_in">pwd</span>)</span><br><span class="line">            <span class="comment">#6. 获取当期文件的名称</span></span><br><span class="line">            fname=$(<span class="built_in">basename</span> <span class="variable">$file</span>)</span><br><span class="line">            ssh <span class="variable">$host</span> <span class="string">&quot;mkdir -p <span class="variable">$pdir</span>&quot;</span></span><br><span class="line">            rsync -av <span class="variable">$pdir</span>/<span class="variable">$fname</span> <span class="variable">$host</span>:<span class="variable">$pdir</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">$file</span> does not exists!</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<h3 id="问题">问题</h3>
<p>由于我前面没有完全跟着老师的文档配置，导致：</p>
<ul>
<li>master 连不上。</li>
<li>连 worker1 和 worker2 总共要输入 4 次 root 密码。</li>
</ul>
<p>还是 SSH 的问题，具体地说：</p>
<ul>
<li>rc@master 用 SSH 连接 root@master 时连不上。</li>
<li>rc@master 在命令行用 SSH 连接 root@worker1 和 root@worker2
时都不用输密码，但是用 xsync 脚本就要输密码了。</li>
</ul>
<h3 id="解决方法">解决方法</h3>
<ul>
<li>把脚本里的 master 主机名删了，只在 master
放一份脚本。弊端是后续只能从 master 同步到另外两台，修改配置时需要在
master 修改。</li>
</ul>
<p>但是输 4 次密码暂时不知道解决方法。</p>
<h2 id="运行分发脚本在-master">运行分发脚本在 master：</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo xsync.sh 指定路径</span><br></pre></td></tr></table></figure>
<p>这会把 master
指定路径下的文件或文件夹同步到另两台机器相同的路径下。</p>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
  </entry>
  <entry>
    <title>Hadoop - 02 - ZooKeeper - 安装和配置</title>
    <url>/blog/2023/Hadoop-02-ZooKeeper-%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>ZooKeeper，顾名思义，就是管动物园的。因为 Hadoop
的形象是大象，名字是它的兄弟起的（Hadoop 是其开发者儿子的玩具名），加上
Hadoop 许多周边项目的形象都是动物，ZooKeeper 就是协调它们工作的。</p>
<p>除了<a
href="https://zookeeper.apache.org/doc/r3.8.2/index.html">官方文档</a>之外，还有个网站：<a
href="https://www.hadoopdoc.com/">大象教程</a>。</p>
<span id="more"></span>
<h2 id="下载-zookeeper">下载 ZooKeeper</h2>
<p><a href="https://zookeeper.apache.org/releases.html">下载地址</a></p>
<p>最新稳定版是 3.8.2，于两个月之前发布。但是课堂和教材使用的是
3.5.7，于 2020 年情人节发布。</p>
<p>特别地：</p>
<ul>
<li>ZooKeeper 3.5 已经在 2022 年儿童节结束生命周期。</li>
<li>ZooKeeper 3.6 已经在 2022 年倒数第二天结束生命周期。</li>
</ul>
<p>结束生命周期不是不能用了，Windows XP
现在照样有人用。要考虑到实际情况，企业不可能那么快的换软件，有新的变化时所有人都需要花时间学习试错。但是要有点探索精神，还是选择下
Apache ZooKeeper 3.8.2(asc, sha512)，文件名带 bin
的那一个。因为我连能不能顺利毕业都不知道，更别谈找工作。有百分之一的概率真的干这行的话，软件可能都出到
4 了，被淘汰了都有可能。</p>
<p>ZooKeeper
特点是只要有半数以上的节点正常工作，整个集群就能正常工作，所以适合装到奇数台服务器上。</p>
<h2 id="安装-zookeeper">安装 ZooKeeper</h2>
<p>用 Xftp 把压缩包传到 master，然后：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">:: 解压</span><br><span class="line">sudo tar -zxvf apache-zookeeper-3.8.2-bin.tar.gz -C /usr/local;</span><br><span class="line">:: 重命名文件夹</span><br><span class="line"><span class="built_in">cd</span> /usr/local;</span><br><span class="line">sudo <span class="built_in">mv</span> apache-zookeeper-3.8.2-bin zookeeper-3.8.2;</span><br></pre></td></tr></table></figure>
<h2 id="配置-zookeeper">配置 ZooKeeper</h2>
<p>三台机器上都要配置。配好 master 后用 xsync
传到另外两台上，然后改。</p>
<h3 id="配置-zkdatamyid">配置 <code>zkData/myid</code></h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> zookeeper-3.8.2;</span><br><span class="line">sudo <span class="built_in">mkdir</span> zkData;</span><br><span class="line"><span class="built_in">cd</span> zkData;</span><br><span class="line">sudo vi myid;</span><br></pre></td></tr></table></figure>
<p>我填的是 <em>当前主机</em> 的 ip 后三位 <code>10x</code>。</p>
<h3 id="配置-confzoo.cfg">配置 <code>conf/zoo.cfg</code></h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ../conf;</span><br><span class="line">sudo <span class="built_in">mv</span> zoo_sample.cfg zoo.cfg;</span><br><span class="line">sudo vi zoo.cfg;</span><br></pre></td></tr></table></figure>
<p>改默认的 dataDir，并配置三台主机的端口：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dataDir=/usr/local/zookeeper-3.8.2/zkData</span><br><span class="line">server.101=master:2888:3888</span><br><span class="line">server.102=worker1:2888:3888</span><br><span class="line">server.103=worker2:2888:3888</span><br></pre></td></tr></table></figure>
<h2 id="zookeeper启动">ZooKeeper，启动！</h2>
<p>三台机器都执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/zookeeper-3.8.2;</span><br><span class="line">sudo bin/zkServer.sh start;</span><br></pre></td></tr></table></figure>
<h2 id="查看任意一台机器的服务状态">查看任意一台机器的服务状态</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">bin/zkServer.sh status;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/local/zookeeper-3.8.2/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost. Client SSL: false.</span><br><span class="line">Mode: follower</span><br></pre></td></tr></table></figure>
<p>会有一个 leader 和两个 follower。</p>
<h2 id="停止-zookeeper">停止 ZooKeeper</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">bin/zkServer.sh stop;</span><br></pre></td></tr></table></figure>
<p>获取这些命令，可以通过直接看脚本里有什么内容。</p>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
  </entry>
  <entry>
    <title>Hadoop - 03 - Zookeeper - 基本概念</title>
    <url>/blog/2023/Hadoop-03-Zookeeper-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<p>基本概念（草稿）</p>
<span id="more"></span>
<h2 id="leader">Leader</h2>
<p>领导者。接收客户端的写请求，并同步给各个 Follower。</p>
<p>后面简称 L。</p>
<h2 id="follower">Follower</h2>
<p>追随者，只能读不能写。</p>
<p>后面简称 F。</p>
<h2 id="znode">znode</h2>
<h2 id="ticktime">tickTime</h2>
<p>心跳时间，单位毫秒。</p>
<p>每隔一个心跳时间，节点之间互相发信息检测对方是否存活。</p>
<h2 id="initlimit">initLimit</h2>
<p>初始化时限。</p>
<p>L 与 F 初始连接时，如果等待时间超过了 <code>initLimit</code>
个心跳时间，判断连接失败。</p>
<h2 id="synclimit">syncLimit</h2>
<p>同步通信时限。</p>
<p>L 与 F 通信时，如果等待时间超过了 <code>syncLimit</code>
个心跳时间，L 会删 F。</p>
<h2 id="领导选举">领导选举</h2>
<p>第一台启动的服务器先投自己一票，如果票数没有超过服务器的半数，LOOKING。</p>
<p>第二、三、四……台启动的服务器，每加入一台，都是先投自己一票。之后把所有服务器的票转移到
<code>myid</code> 最大的服务器上。</p>
<p>每加入一台新的服务器时：如果票数没有超过服务器的半数，所有服务器都
LOOKING；如果票数超过半数了，<code>myid</code> 最大的服务器就被选为
L。后续加入的服务器全都是 F。</p>
<p>如果 L 挂了，会重新选举。</p>
<p>如何重新选举？</p>
<p>sid</p>
<p>zxid</p>
<p>Epoch 每个 Leader 任期的代号，秦始皇，唐太宗</p>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
  </entry>
  <entry>
    <title>Java - 00 - 准备</title>
    <url>/blog/2023/Java-00-%E5%87%86%E5%A4%87/</url>
    <content><![CDATA[<ul>
<li>Windows 10 + VSCode 环境配置</li>
<li><code>Hello.java</code></li>
</ul>
<span id="more"></span>
<h2 id="windows-10-vscode-环境配置">Windows 10 + VSCode 环境配置</h2>
<ol type="1">
<li>VSCode 里安装 <code>Extension Pack for Java</code> 扩展。
它会提示你下载安装 JDK。安。</li>
<li>设置环境变量
<ul>
<li><code>JAVA_HOME</code>：JDK 安装路径</li>
<li><code>PATH</code>：<code>%JAVA_HOME%\bin</code></li>
</ul></li>
<li>终端输入： <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure> 输出： <figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">openjdk version &quot;17.0.8.1&quot; 2023-08-24</span><br><span class="line">OpenJDK Runtime Environment Temurin-17.0.8.1+1 (build 17.0.8.1+1)</span><br><span class="line">OpenJDK 64-Bit Server VM Temurin-17.0.8.1+1 (build 17.0.8.1+1, mixed mode, sharing)</span><br></pre></td></tr></table></figure></li>
<li>VSCode
设置搜<code>java.jdt.ls.java.home</code>，在<code>settings.json</code>里改成
JDK 安装路径。</li>
</ol>
<h2 id="hello.java">Hello.java</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>按钮运行，或者终端：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">java Hello.java</span><br></pre></td></tr></table></figure>
<p>或者终端：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">javac Hello.java</span><br><span class="line">java Hello</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java - 03 - 调库侠入门</title>
    <url>/blog/2023/Java-03-%E8%B0%83%E5%BA%93%E4%BE%A0%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<ul>
<li>如何在 VSCode 里调 jar 包</li>
<li>FASTJSON2 库的下载和使用</li>
</ul>
<span id="more"></span>
<h2 id="如何在-vscode-里调-jar-包">如何在 VSCode 里调 jar 包</h2>
<ol type="1">
<li><code>Ctrl + Shift + P</code></li>
<li>进入 <code>java:Configure Classpath</code></li>
<li>找到 <code>Referenced Libraries</code></li>
<li>点击 <code>Add</code></li>
<li>选择下载的 jar 包</li>
</ol>
<h2 id="fastjson2">FASTJSON2</h2>
<blockquote>
<p><code>FASTJSON 2</code> 是一个性能极致并且简单易用的 Java JSON 库。——
alibaba/fastjson2</p>
</blockquote>
<p><a href="https://github.com/alibaba/fastjson2">Github 仓库</a> | <a
href="https://repo1.maven.org/maven2/com/alibaba/fastjson2/fastjson2/">下载地址</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson2.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">objText</span> <span class="operator">=</span> <span class="string">&quot;&#123;&#x27;a&#x27;:1,&#x27;b&#x27;:2&#125;&quot;</span>;</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">data0</span> <span class="operator">=</span> JSON.parseObject(objText);</span><br><span class="line">        <span class="type">String</span> <span class="variable">arrText</span> <span class="operator">=</span> <span class="string">&quot;[5,4,3,1,2]&quot;</span>;</span><br><span class="line">        <span class="type">JSONArray</span> <span class="variable">data1</span> <span class="operator">=</span> JSON.parseArray(arrText);</span><br><span class="line">        System.out.println(data0);</span><br><span class="line">        System.out.println(data1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a
href="/blog/2023/Java-01-Q&amp;A/#怎么读写文本文件">怎么读写文本文件？</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java - 01 - Q&amp;A</title>
    <url>/blog/2023/Java-01-Q&amp;A/</url>
    <content><![CDATA[<p>一些问题与回答</p>
<span id="more"></span>
<h2
id="main函数不加static可以吗"><code>main</code>函数不加<code>static</code>可以吗？</h2>
<p>不行。程序启动时实例还没有被创建，需要通过类名调用静态方法。</p>
<h2
id="当类名和文件名不一致时代码检查器会提示修改那么.java文件里只能写一个类吗">当类名和文件名不一致时，代码检查器会提示修改。那么<code>.java</code>文件里只能写一个类吗？</h2>
<p>只能写一个与文件名相同的公共类。其他的类不加<code>public</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test0</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;456&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Test0.fun();</span><br><span class="line">        <span class="type">Test1</span> <span class="variable">test1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test1</span>();</span><br><span class="line">        test1.fun();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="怎么获取键盘输入">怎么获取键盘输入？</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;<span class="comment">//注意要加分号</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Echo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个 String 对象</span></span><br><span class="line">        String str;</span><br><span class="line">        <span class="comment">// 创建一个 Scanner 对象，传参是标准输入流对象</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">// 读取一行，返回String</span></span><br><span class="line">        str = scan.nextLine();</span><br><span class="line">        <span class="comment">// println() 换行，print() 不换行</span></span><br><span class="line">        System.out.print(str);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        System.out.print(str);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        <span class="comment">// 别忘了关闭</span></span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="怎么读写文本文件">怎么读写文本文件？</h2>
<p>Java：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> Files.readString(Path.of(<span class="string">&quot;input.txt&quot;</span>));</span><br><span class="line">        System.out.println(content);</span><br><span class="line">        Files.writeString(Path.of(<span class="string">&quot;output.txt&quot;</span>), <span class="string">&quot;啊啊啊&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对比 Python：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">input_file_name = <span class="string">&quot;input.txt&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(input_file_name, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> input_file:</span><br><span class="line">    content = input_file.readlines()</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">output_file_name = <span class="string">&quot;output.txt&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(output_file_name, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> output_file:</span><br><span class="line">    output_file.write(<span class="string">&quot;啊啊啊&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="和-cc的运算符有什么不同">和 C/C++的运算符有什么不同？</h2>
<p>先射箭后画靶：</p>
<ul>
<li><p>C/C++/Java 在对整型变量右移 <code>&gt;&gt;</code> 时：</p>
<ul>
<li>正整数前面全补 <code>0</code></li>
<li>负整数前面全补 <code>1</code></li>
<li>无符号整数前面全补 <code>0</code>（Java 没有无符号整数）</li>
<li>作用相当于除以 2</li>
</ul></li>
<li><p>Java 多了一个无符号右移
<code>&gt;&gt;&gt;</code>，不管你整型变量是正是负，前面都直接补零。</p></li>
</ul>
<p>在 Java 中，没有<code>unsigned</code>关键字。</p>
<p>进一步：</p>
<h2 id="java-中的基本数据类型">Java 中的基本数据类型？</h2>
<h3 id="布尔-boolean">布尔 <code>boolean</code></h3>
<p>值为 <code>true</code> 或者
<code>false</code>。可以直接用，占一个字节。</p>
<p>写 <code>if(3 == true)</code>
时会报错，数据类型不同，不能直接比较。</p>
<ul>
<li>在 C 的 <code>&lt;stdbool.h&gt;</code> 中被 <code>#define</code>
了为 <code>1</code> 和 <code>0</code>。
<ul>
<li>写 <code>if(3 == true)</code> 时会跳过分支。</li>
</ul></li>
<li>C++ 同 C，但是不用引头文件，可以直接用。</li>
<li>在 Python 中是首字母大写的，也相当于 <code>0</code> 和
<code>1</code>，但是数据类型不同。
<ul>
<li>写 <code>if(3 == True)</code> 时会按 <code>1</code> 比较。</li>
<li>写 <code>if(3 is True)</code> 时会报错。</li>
</ul></li>
<li>在 JS 中也相当于 <code>0</code> 和
<code>1</code>，但是数据类型不同。
<ul>
<li>写 <code>if(1 == true)</code> 时会执行分支。</li>
<li>写 <code>if(1 === true)</code> 时会跳过分支。</li>
</ul></li>
</ul>
<h3 id="字符-char">字符 <code>char</code></h3>
<p>无符号的两个字节。在 C/C++ 里是一个字节。</p>
<h3 id="整型都是有符号的">整型（都是有符号的）</h3>
<ul>
<li><code>byte</code>：一个字节</li>
<li><code>short</code>：两个字节</li>
<li><code>int</code>：四个字节</li>
<li><code>long</code>：八个字节</li>
</ul>
<h3 id="浮点都是有符号的">浮点（都是有符号的）</h3>
<p>和 C/C++ 一样。</p>
<ul>
<li><code>float</code>：四个字节</li>
<li><code>double</code>：八个字节</li>
</ul>
<h2 id="茴字有几种写法">茴字有几种写法？</h2>
<p>Java 和 Python、JS
等一样，都可以在输出函数里直接写表达式（不用格式字符串的情况下）。以及
Java 也可以格式化输出。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>);<span class="comment">// 98</span></span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span> + <span class="number">1</span>);<span class="comment">// a1</span></span><br><span class="line">        <span class="type">byte</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>, j = <span class="number">3</span>;</span><br><span class="line">        <span class="comment">// 没人会这么写</span></span><br><span class="line">        System.out.println(++i + i++);<span class="comment">// 8</span></span><br><span class="line">        System.out.println(j++ + ++j);<span class="comment">// 8</span></span><br><span class="line">        <span class="comment">// Java 也有 printf()</span></span><br><span class="line">        System.out.printf(<span class="string">&quot;%d, %d&quot;</span>, i, j);<span class="comment">// 5, 5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java - 02 - 数组Q&amp;A</title>
    <url>/blog/2023/Java-02-%E6%95%B0%E7%BB%84Q&amp;A/</url>
    <content><![CDATA[<p>一些问题与回答</p>
<span id="more"></span>
<h2 id="java-数组怎么定义">Java 数组怎么定义？</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> arr1[];</span><br><span class="line"><span class="type">int</span>[] arr2;<span class="comment">// 效果一样</span></span><br></pre></td></tr></table></figure>
<p>注意在定义时，<code>[]</code> 里不能加数字。</p>
<p>使用 <code>new</code> 时则必须加。</p>
<h2 id="怎么向数组里加元素">怎么向数组里加元素？</h2>
<p>Array 不能动态加元素，ArrayList 可以。</p>
<p>对于 Array，可以先初始化，再赋值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">arrayLength</span> <span class="operator">=</span> arr.length;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrayLength; i++) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">randomNum</span> <span class="operator">=</span> (<span class="type">int</span>) (<span class="number">100</span> * Math.random());</span><br><span class="line">    arr[i] = randomNum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意，如果用 <code>for-each</code> 循环是给数组元素赋不了值的。</p>
<h2 id="怎么打印数组">怎么打印数组？</h2>
<p>除了 <code>for</code> 循环之外：</p>
<h3 id="for-each-循环"><code>for-each</code> 循环</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> element : arr) &#123;</span><br><span class="line">    System.out.print(element + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="arrays.tostring">Arrays.toString()</h3>
<p>需要 <code>import java.util.Arrays;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(Arrays.toString(arr));</span><br></pre></td></tr></table></figure>
<h2 id="怎么复制数组">怎么复制数组？</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] arr1 = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line"><span class="type">int</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">System.arraycopy(arr1, <span class="number">0</span>, arr2, <span class="number">0</span>, arr1.length);</span><br></pre></td></tr></table></figure>
<p><code>System.arraycopy()</code>
五个参数分别为：源数组、源数组的起始位置、目标数组、目标数组的起始位置、要复制的元素数量。</p>
<p>（VSCode 扩展商店 的 <code>intellsmi.comment-translate</code>
可以把函数文档翻成中文）</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>JSON</title>
    <url>/blog/2023/JSON/</url>
    <content><![CDATA[<p>JSON（JavaScript Object Notation，JavaScript
对象表示法）是一种轻量级的数据交换格式，可以看成是字符串。</p>
<p>和 JavaScript 没什么关系，就像 JavaScript 和 Java
没什么关系一样。</p>
<span id="more"></span>
<h2 id="json-字符串-与-js-对象互转">JSON 字符串 与 JS 对象互转</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> jsonStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> jsObj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// JS 对象转 JSON 字符串</span></span><br><span class="line">jsonStr = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(jsObj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON 字符串转 JS 对象</span></span><br><span class="line">jsObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonStr);</span><br></pre></td></tr></table></figure>
<h2 id="json-字符串与-python-字典互转">JSON 字符串与 Python
字典互转</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">py_dic = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python 字典转 JSON 字符串</span></span><br><span class="line">json_str = json.dumps(py_dic)</span><br><span class="line"></span><br><span class="line"><span class="comment"># JSON 字符串转 Python 字典</span></span><br><span class="line">py_dic = json.loads(json_str)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>无分类</category>
      </categories>
  </entry>
  <entry>
    <title>在Windows中安装Linux虚拟机</title>
    <url>/blog/2023/%E5%9C%A8Windows%E4%B8%AD%E5%AE%89%E8%A3%85Linux%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    <content><![CDATA[<ul>
<li>真机系统：Windows 10</li>
<li>使用软件：VMware Workstation 17.0.2 Player</li>
<li>虚拟机系统：Ubuntu 22.04.3 server</li>
</ul>
<span id="more"></span>
<p>也可以给硬盘分一个新的区，单独安装 Linux。不过没有必要。</p>
<h2 id="下载安装-vmware-workstation-player">下载安装 VMware Workstation
Player</h2>
<blockquote>
<p>使用 VMware Workstation Player 在 Windows 或 Linux PC
上轻松地将多个操作系统作为虚拟机运行。——网站介绍</p>
</blockquote>
<p><a
href="https://customerconnect.vmware.com/cn/downloads/info/slug/desktop_end_user_computing/vmware_workstation_player/">下载页面</a></p>
<p>这里下载的是当前最新版
<code>VMware Workstation 17.0.2 Player for Windows 64-bit Operating Systems</code>。</p>
<p>安装过程略（“增强型键盘驱动程序”不知道有什么用，先勾上）。</p>
<h2 id="下载-ubuntu-镜像">下载 Ubuntu 镜像</h2>
<p>是一种 Linux 发行版操作系统。</p>
<p><a
href="https://launchpad.net/ubuntu/+cdmirrors">下载页面（仓库集合）</a>，找到
China。</p>
<p>这里下载的是<code>ubuntu-22.04.3-live-server-amd64.iso</code>。</p>
<h2 id="在-vm-player-中新建虚拟机">在 VM Player 中新建虚拟机</h2>
<ol type="1">
<li><code>创建新虚拟机(N)</code></li>
<li><code>安装程序光盘文件(iso)(M)</code></li>
<li><code>浏览(R)</code>，选择下载的镜像文件，下一步。</li>
<li>设置虚拟机名称和位置，下一步。（我这里设置的是<code>Ubuntu100</code>和<code>D:\VMachines\Ubuntu100</code>）</li>
<li>指定磁盘容量，下一步。</li>
<li>自定义硬件（我这里把 CPU 改成了 4 核）。完成。</li>
</ol>
<p>你会看到：</p>
<p><img src="/blog/images/vm.png"></p>
<p>按回车开始安装 Ubuntu。</p>
<h2 id="安装-ubuntu">安装 Ubuntu</h2>
<ol type="1">
<li><p>语言选择，默认回车。</p></li>
<li><p>键盘布局选择，默认回车。</p></li>
<li><p>安装类型，默认回车。</p></li>
<li><p>网络，默认回车。</p></li>
<li><p>代理，默认回车。</p></li>
<li><p>配置镜像源，如果网络不好，改成</p>
<ul>
<li><p>清华源：<code>https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</code></p></li>
<li><p>南京源：<code>https://mirror.nju.edu.cn/ubuntu/</code></p></li>
<li><p>北邮源：<code>https://mirrors.bupt.edu.cn/ubuntu/</code></p>
<p>等均可。</p></li>
</ul></li>
<li><p>配置存储布局，默认选择<code>Done</code>，回车。</p></li>
<li><p>文件系统，<code>Done</code>，<code>Continue</code>。</p></li>
<li><p>设置用户名密码等。</p></li>
<li><p>是否升级到 Pro 版，默认不升级，<code>Continue</code>。</p></li>
<li><p>是否安装 OpenSSH server，先不安装。</p></li>
<li><p>是否安装其他东西，先都不选。</p></li>
<li><p>等待安装系统。</p></li>
<li><p>安装完成后，点击 VM Player
下方的“我已完成安装”，然后<code>Reboot Now</code>。</p></li>
</ol>
<p>报错不要紧，回车。</p>
<p>输入用户名和密码登录 Ubuntu。注意输入密码默认是不回显的。</p>
<h2 id="设置虚拟机与真机的共享文件夹">设置虚拟机与真机的共享文件夹</h2>
<p>VM
的虚拟磁盘文件不好直接打开。有时候需要在虚拟机和真机之间互传文件，可以通过共享文件夹。</p>
<p>（还可以通过<a href="https://wangdoc.com/ssh/">SSH</a>和<a
href="https://www.xshell.com/zh/free-for-home-school/">Xftp</a>）</p>
<p>在 VM Player 里打开虚拟机设置-&gt;选项-&gt;共享文件夹。</p>
<p>我这里设置在<code>D:\VMachines\Shared</code>。</p>
<p>在虚拟机里的位置是<code>/mnt/hgfs/Shared</code>。</p>
]]></content>
      <categories>
        <category>无分类</category>
      </categories>
  </entry>
  <entry>
    <title>十进制与K进制小数互转</title>
    <url>/blog/2023/%E5%8D%81%E8%BF%9B%E5%88%B6%E4%B8%8EK%E8%BF%9B%E5%88%B6%E5%B0%8F%E6%95%B0%E4%BA%92%E8%BD%AC/</url>
    <content><![CDATA[<ul>
<li>K 转 10：和整数进制转换的方法一样</li>
<li>10 转 K：乘 K 取整</li>
</ul>
<span id="more"></span>
<h2 id="k-转-10和整数进制转换的方法一样">K 转
10：和整数进制转换的方法一样</h2>
<p>每一位分别乘上 K 的次方，再相加。</p>
<h3 id="转-10">2 转 10</h3>
<h4 id="有限小数">有限小数</h4>
<p><span class="math inline">\(11.1011_{2} = 3.6875_{10}\)</span></p>
<table>
<thead>
<tr class="header">
<th>项</th>
<th>值</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><span class="math inline">\(1\times2^{1}\)</span></td>
<td><span class="math inline">\(2\)</span></td>
</tr>
<tr class="even">
<td><span class="math inline">\(1\times2^{0}\)</span></td>
<td><span class="math inline">\(1\)</span></td>
</tr>
<tr class="odd">
<td><span class="math inline">\(1\times2^{-1}\)</span></td>
<td><span class="math inline">\(0.5\)</span></td>
</tr>
<tr class="even">
<td><span class="math inline">\(0\times2^{-2}\)</span></td>
<td><span class="math inline">\(0\)</span></td>
</tr>
<tr class="odd">
<td><span class="math inline">\(1\times2^{-3}\)</span></td>
<td><span class="math inline">\(0.125\)</span></td>
</tr>
<tr class="even">
<td><span class="math inline">\(1\times2^{-4}\)</span></td>
<td><span class="math inline">\(0.0625\)</span></td>
</tr>
<tr class="odd">
<td><strong>总和</strong></td>
<td><span class="math inline">\(3.6875\)</span></td>
</tr>
</tbody>
</table>
<h4 id="无限循环小数">无限循环小数</h4>
<p><span class="math inline">\(1.1 \dot{0} 11 \dot{0} ... _{2} =
1.7_{10}\)</span></p>
<p>可以转换成分数计算：</p>
<p><span class="math display">\[
\begin{aligned}
1.1 \dot{0} 11 \dot{0} ... _{2} &amp; = x \\
11.\dot{0} 11 \dot{0} ... _{2} &amp; = 2_{10}x \\
110110. \dot{0} 11 \dot{0} ... _{2} &amp; = 32_{10}x \\
两式相减，110011_{2} &amp; = 30_{10}x \\
x &amp; = \frac{110011_{2}}{30_{10}} = \frac{51_{10}}{30_{10}} =
1.7_{10}
\end{aligned}
\]</span></p>
<h3 id="转-10-1">16 转 10</h3>
<p>同上略。</p>
<h2 id="转-k乘-k-取整">10 转 K：乘 K 取整</h2>
<p>整数部分仍然除 K 取余，小数部分乘 K 取整，然后相加。</p>
<h3 id="转-2">10 转 2</h3>
<p><span class="math inline">\(0.7 _{10} = 0.1 \dot{0} 11 \dot{0} ...
_{2}\)</span></p>
<table>
<thead>
<tr class="header">
<th>小数部分乘 2</th>
<th>取整数部分</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><span class="math inline">\(0.7 \times 2 = 1.4\)</span></td>
<td><span class="math inline">\(1\)</span></td>
</tr>
<tr class="even">
<td><span class="math inline">\(0.4 \times 2 = 0.8\)</span></td>
<td><span class="math inline">\(0\)</span></td>
</tr>
<tr class="odd">
<td><span class="math inline">\(0.8 \times 2 = 1.6\)</span></td>
<td><span class="math inline">\(1\)</span></td>
</tr>
<tr class="even">
<td><span class="math inline">\(0.6 \times 2 = 1.2\)</span></td>
<td><span class="math inline">\(1\)</span></td>
</tr>
<tr class="odd">
<td><span class="math inline">\(0.2 \times 2 = 0.4\)</span></td>
<td><span class="math inline">\(0\)</span></td>
</tr>
<tr class="even">
<td>...</td>
<td>...</td>
</tr>
</tbody>
</table>
<h3 id="转-16">10 转 16</h3>
<p><span class="math inline">\(0.7 _{10} = 0.\mathrm{B} \dot{3} ...
_{16}\)</span></p>
<table>
<thead>
<tr class="header">
<th>小数部分乘 16</th>
<th>取整数部分</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><span class="math inline">\(0.7 \times 16 = 11.2\)</span></td>
<td><span class="math inline">\(\mathrm{B}\)</span></td>
</tr>
<tr class="even">
<td><span class="math inline">\(0.2 \times 16 = 3.2\)</span></td>
<td><span class="math inline">\(3\)</span></td>
</tr>
<tr class="odd">
<td>...</td>
<td>...</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>无分类</category>
      </categories>
  </entry>
  <entry>
    <title>root手机教程（使用Magisk）</title>
    <url>/blog/2023/root%E6%89%8B%E6%9C%BA%E6%95%99%E7%A8%8B%EF%BC%88%E4%BD%BF%E7%94%A8Magisk%EF%BC%89/</url>
    <content><![CDATA[<p>你需要：</p>
<ul>
<li>一台系统为 Android 6.0 以上的手机</li>
<li>一台能够正常使用 <a
href="https://developer.android.google.cn/studio/releases/platform-tools?hl=zh-cn">Android
SDK Platform-Tools</a> 的电脑</li>
</ul>
<span id="more"></span>
<p>另外，如果你手机的 Android kernel 版本在 5.10 以上，你也可以使用<a
href="https://kernelsu.org/zh_CN/">KernelSU</a>——这不属于此教程的范围。</p>
<h2 id="背景知识">背景知识</h2>
<h3 id="linux-与-android">Linux 与 Android</h3>
<p>Linux 是一种操作系统内核，由 Linus Torvalds 开发。<strong>基于 Linux
内核</strong>，Android Inc.公司开发出了 Android 操作系统。</p>
<p>2005 年，Google 收购 Android Inc.。2007 年，Google 将 Android
的源代码公开，并创建了<a
href="https://source.android.google.cn/?hl=zh-cn">AOSP</a>（Android Open
Source Project）项目。</p>
<p>许多手机厂商的定制系统，如 MIUI、Flyme、HarmonyOS 等都是<strong>基于
AOSP 源码</strong>开发的。和 AOSP 对标的<a
href="https://gitee.com/openharmony">OpenHarmony</a>也有用到 Linux
内核。所以，如果你的手机不是苹果，它里面大概率就会有一个修改过的 Linux
内核。</p>
<h3 id="linux-与-android-中的用户权限">Linux 与 Android
中的用户权限</h3>
<p>Linux
操作系统是多用户操作系统，用户<code>root</code>拥有最高权限——对系统的完全控制权。拥有
root 权限的用户可以把其他用户添加到 root 用户组。在 root
用户组里，每个用户都有 root 权限。</p>
<p>在 Android
操作系统中，<strong>每个应用（APP）都是一个独立的用户</strong>。如果没有<code>root</code>用户把
APP 添加到 root 用户组，就没有 APP 能够获得 root 权限。</p>
<p>而在正常情况下，你在手机上见到的所有画面都是 APP
的进程（比如系统界面是<code>com.android.systemui</code>）。这时想要获得
root 权限，就需要修改更底层的东西。</p>
<h3 id="bootloader-锁">Bootloader 锁</h3>
<p>Bootloader，即启动引导加载程序。它负责在计算机启动时，引导操作系统加载。</p>
<p>在 bootloader
执行的过程中，如果签名验证未通过，说明系统底层文件被修改。这时
bootloader 会停止执行，<strong>无法进入系统</strong>。这被称为
bootloader（BL）锁。</p>
<h3 id="magisk">Magisk</h3>
<p>The <strong>Magic Mask</strong> for Android，是一套用于定制 Android
的开源软件。它可以为应用程序提供 root
访问权限。后文简称<strong>面具</strong>。</p>
<p>面具获取 root 权限的原理是通过修改 boot 分区，代理 linux
内核的第一个进程 init。<a href="#fn1" class="footnote-ref" id="fnref1"
role="doc-noteref"><sup>1</sup></a></p>
<p>面具修改了系统分区。因此，使用面具的前提是解除 BL 锁。</p>
<h2 id="准备工作">准备工作</h2>
<h3 id="解除-bl-锁">解除 BL 锁</h3>
<blockquote>
<p>解锁 BootLoader 实际上就是让 BootLoader
启动链上某些阶段的签名验证不生效。<a href="#fn2" class="footnote-ref"
id="fnref2" role="doc-noteref"><sup>2</sup></a></p>
</blockquote>
<p>你需要在你手机厂商的网站上申请解锁码，然后用他们提供的工具解锁。有一些厂商（华为等）已经不提供解锁码。</p>
<p>注意：解锁 BL
后会<strong>清除所有用户数据，恢复出厂设置</strong>。请提前做好你重要文件的备份。</p>
<h3 id="提取-boot.img">提取 boot.img</h3>
<p>在网上搜索，找到你手机的安装包。</p>
<p>通常是一个<code>.zip</code>或.<code>tgz</code>格式的压缩包。确保手机型号一致、操作系统版本一致。</p>
<p>解压后找到<code>boot.img</code>或者<code>init_boot.img（如果有）</code>。复制两份，分别保存到手机和电脑，备用。</p>
<ul>
<li>如果你找不到<code>boot.img</code>，而找到了<code>payload.bin</code>：参考<a
href="https://magiskcn.com/payload-dumper-go-boot">这篇教程</a>。或者使用<a
href="https://mt2.cn/">MT 管理器</a>提取。</li>
<li>如果你的手机<em><strong>已经 root
了</strong></em>：可以在<code>adb shell</code>下使用<code>ls -l /dev/block/by-name/</code>查看分区表。找到
boot
分区，比如<code>/dev/block/sdc41</code>。使用<code>dd if=/dev/block/sdc41 of=/sdcard/boot.img</code>提取
boot 分区。</li>
</ul>
<h3 id="通过-usb-调试手机">通过 USB 调试手机</h3>
<p>在手机设置里找到系统版本（比如 MIUI，是在“全部参数”里的“MIUI
版本”）。连续点击，直到手机出现提示框“您现在处于开发者模式”。</p>
<p>在手机设置里找到开发者选项，进入。找到<strong>USB
调试</strong>选项并开启。</p>
<p>下载<a
href="https://developer.android.google.cn/studio/releases/platform-tools?hl=zh-cn">Android
SDK
Platform-Tools</a>，解压到你喜欢的目录。比如<code>D:\platform-tools</code>。你会看到目录里有<code>adb.exe</code>和<code>fastboot.exe</code>等一些文件。</p>
<p>打开命令行（Windows 下 win+R 输入 cmd，回车），你会看到：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">C:\Users\你的用户名\&gt;</span><br></pre></td></tr></table></figure>
<p>这是你当前所在的目录。当你要执行一个<code>.exe</code>文件时，系统先从当前目录里寻找。如果找不到，就从环境变量里寻找。再找不到就打印错误信息。</p>
<p>你刚才解压出来的<code>.exe</code>文件只能在它们所在的目录下运行。如果不想切换目录，想让它们在任意目录下都可以运行，需要把它们<strong>所在的目录</strong>添加到<strong>环境变量</strong>。</p>
<p>Windows 10
下，<code>Win + I</code>打开设置。系统-&gt;关于-&gt;高级系统设置-&gt;环境变量，双击系统变量<code>Path</code>，新建，把<code>D:\platform-tools</code>复制到列表，确定确定确定。这样环境变量就设置好了。</p>
<p>用数据线连接手机和电脑。你可以尝试在<code>cmd</code>里使用命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure>
<p>这时手机会弹出授权窗口。点击确定，你会在电脑上看到：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">List of devices attached</span><br><span class="line">你手机的序列号        device</span><br></pre></td></tr></table></figure>
<p>说明 adb 连接成功。</p>
<h2 id="戴上面具">戴上面具</h2>
<p><a
href="https://github.com/topjohnwu/Magisk/releases">下载面具</a>并安装打开，你将看到：</p>
<p><img src="/blog/images/magisk.webp"></p>
<p>如果 Ramdisk
为<strong>否</strong>，或者你的手机品牌是<strong>华为</strong>或<strong>三星</strong>：参考
<a
href="https://jesse205.github.io/MagiskChineseDocument/install.html">Magisk
中文文档</a>。</p>
<p>点击“安装”按钮。如果你手机的安装包中有<code>vbmeta.img</code>，选中“修补
boot 映像中的 vbmeta”选项。否则不选中。</p>
<p>在方式中选择“选择并修补一个文件”。然后选择你提取出来的<code>boot.img</code>或<code>init_boot.img</code>。点击“安装”。</p>
<p>面具会把修补后的文件<code>magisk_patched-[版本号_随机字符].img</code>存放到
SD 卡的<code>Download</code>目录下。</p>
<p>把修补后的文件复制到电脑：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb pull /sdcard/Download/magisk_patched-[版本号_随机字符].img 电脑上的一个文件夹路径</span><br></pre></td></tr></table></figure>
<p>重启手机到<code>fastboot</code>模式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb reboot bootloader</span><br></pre></td></tr></table></figure>
<p>刷写新的<code>boot</code>分区：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fastboot flash boot（或者init_boot） 电脑上的一个文件夹路径\magisk_patched-[版本号_随机字符].img</span><br></pre></td></tr></table></figure>
<p>重启手机：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fastboot reboot</span><br></pre></td></tr></table></figure>
<p>打开面具。如果看到了 Magisk-&gt;当前的版本号，说明成功。</p>
<ul>
<li>如果你的手机打不开了：说明面具不适合你的手机，或者你有地方做错了。
你需要长按【电源】键重启，然后马上同时按住【电源】键和【音量+】键（也有手机是【电源】键和【音量-】键）。这会把手机重启到<code>fastboot</code>模式。
然后使用以下命令恢复 boot 分区： <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fastboot flash boot（或者init_boot） 电脑上的一个文件夹路径\你修补前的boot.img</span><br></pre></td></tr></table></figure></li>
<li>在安装面具后：需要禁用系统自动更新。<a
href="#后续处理更新系统时">后续处理——更新系统时</a></li>
</ul>
<h2 id="隐藏面具">隐藏面具</h2>
<p>为了用户安全，一些银行类的 app 在检测到 root
后会禁止用户使用。需要对这一类 app 隐藏 root。</p>
<h3 id="使用-shamiko-隐藏-root">使用 Shamiko 隐藏 root</h3>
<p>Shamiko 是一个面具模块，用于隐藏 root。</p>
<ul>
<li>如果使用的是<a
href="https://github.com/magojohnji/Magisk-delta/blob/main/intro.md">Magisk
Delta</a>，则不能安装此模块。可用其内置的 MagiskHide。</li>
</ul>
<p>在面具设置里：</p>
<ul>
<li><p>找到“Zygisk”，<strong>开启</strong>。</p></li>
<li><p>找到“遵守排除列表”，<strong>关闭</strong>。</p></li>
<li><p>找到“配置排除列表”，选择要对其隐藏 root
的应用。点击，在展开的列表里全部打上勾，直到上方进度条满。</p></li>
</ul>
<p><a href="https://github.com/LSPosed/LSPosed.github.io/releases/">下载
Shamiko</a>
。打开面具-&gt;模块-&gt;从本地安装-&gt;选择下载的<code>shamiko-[版本号]-release.zip</code>-&gt;确定-&gt;重启手机。</p>
<p>如果看到模块-&gt;Shamiko 的简介里露出了 😋，说明 Shamiko
正常运行。</p>
<h3 id="使用随机包名隐藏面具应用">使用随机包名隐藏面具应用</h3>
<p>面具设置-&gt;隐藏 Magisk 应用</p>
<h2 id="后续处理更新系统时">后续处理——更新系统时</h2>
<p>系统更新前：先打开面具，选择“卸载
Magisk”-&gt;<strong>还原原厂映像</strong>。然后更新系统。</p>
<p>系统更新后：仍然使用提取 boot-&gt;修补 boot-&gt;刷入 boot
的方式安装面具。</p>
<ul>
<li>如果希望在更新系统时保留面具：参考<a
href="https://jesse205.github.io/MagiskChineseDocument/ota.html">这篇文档</a>。</li>
</ul>
<aside id="footnotes" class="footnotes footnotes-end-of-document"
role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p><a
href="https://mp.weixin.qq.com/s/eF9izvazeSZ1bVxOcxamQg">何为
root？维术：https://mp.weixin.qq.com/s/eF9izvazeSZ1bVxOcxamQg</a><a
href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p><a
href="https://mp.weixin.qq.com/s/-9VKyraHq5Qt2PTzqVqZOg">当我们谈论解锁
BootLoader
时，我们在谈论什么？维术：https://mp.weixin.qq.com/s/-9VKyraHq5Qt2PTzqVqZOg</a><a
href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</aside>
]]></content>
      <categories>
        <category>无分类</category>
      </categories>
  </entry>
  <entry>
    <title>在手机上搭建Web服务器</title>
    <url>/blog/2023/%E5%9C%A8%E6%89%8B%E6%9C%BA%E4%B8%8A%E6%90%AD%E5%BB%BAWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<p>使用的主要工具：</p>
<ul>
<li>Termux——模拟 Linux 环境</li>
<li>Flask——作为后端框架</li>
<li>Ngrok——内网穿透</li>
</ul>
<p>你需要：</p>
<ul>
<li>能够正常运行以上软件的安卓手机</li>
<li>最好有一台电脑</li>
</ul>
<span id="more"></span>
<p>在模拟的 Linux 环境下运行 Ngrok <strong>需要手机有 root
权限，仅用于解决<a
href="#在开始之前解决-dns-问题">这个问题</a></strong>。如果没有更好的，不使用
root 权限的方法的话，可以尝试<a href="#另外">在 Termux 上安装 Linux
发行版</a>。</p>
<p><a
href="/blog/2023/root%E6%89%8B%E6%9C%BA%E6%95%99%E7%A8%8B%EF%BC%88%E4%BD%BF%E7%94%A8Magisk%EF%BC%89/">root
手机教程（使用 Magisk）</a></p>
<h2 id="termux模拟-linux-环境">Termux——模拟 Linux 环境</h2>
<p><a href="https://termux.dev/cn/index.html">Termux</a>
是一个在安卓手机上模拟 Linux 环境的 app。</p>
<p>适用于 Android &gt;= 7，无需手机 root。可以在 github 上<a
href="https://github.com/termux/termux-app/releases/">下载</a>。</p>
<p>Termux 模拟 Linux
环境的根目录在手机的<code>/data/data/com.termux/files/</code>。</p>
<h3 id="如果手机没有-root">如果手机没有 root：</h3>
<ul>
<li><p>在 termux 内，最多访问到上一级目录
<code>com.termux/</code>，无法访问<code>/data/</code>。</p></li>
<li><p>在 termux
外，使用文件管理器无法访问<code>/data/</code>。</p></li>
<li><p>在 termux 内访问手机 SD 卡，需使用命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">termux-setup-storage</span><br></pre></td></tr></table></figure>
<p>这会把 SD 卡目录<code>/storage/emulated/0/</code>链接到
<code>/data/data/com.termux/files/home/storage/shared/</code>。</p></li>
</ul>
<h3 id="如果手机已-root">如果手机已 root：</h3>
<p>可以直接使用<a href="https://mt2.cn/">MT
管理器</a>访问各个目录。这样转移文件比较方便。</p>
<h3 id="另外">另外</h3>
<p>上面针对的是 Termux 模拟的 Linux 环境。<strong>你可以使用 <a
href="https://wiki.termux.com/wiki/PRoot">PRoot</a> 或者 <a
href="https://github.com/2moe/tmoe">TMOE</a> 安装 Linux
发行版。</strong></p>
<h2 id="flask后端框架">Flask——后端框架</h2>
<p>Flask 是一个用 Python 编写的 Web 框架。<a
href="https://flask.palletsprojects.com/">官网</a> | <a
href="https://dormousehole.readthedocs.io/">中文文档</a></p>
<h3 id="安装-flask">安装 Flask</h3>
<p>首先在 Termux 上安装 Python：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pkg install python</span><br></pre></td></tr></table></figure>
<p>然后用 Python 的包管理工具 pip 安装 Flask：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install flask</span><br></pre></td></tr></table></figure>
<h3 id="在本地使用-flask">在本地使用 Flask</h3>
<ol type="1">
<li>在家目录下新建一个文件夹。名字随便取，用于存放代码：</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/flask-app</span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li><p>在文件夹里新建<code>app.py</code>文件——你可以在电脑上写好了传到手机，也可以用
MT 管理器写，还可以用 Vim 写。</p></li>
<li><p>编写代码：</p></li>
</ol>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, make_response</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="comment">#处理根路由的视图函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line"></span><br><span class="line">    <span class="comment">#创建 html 字符串</span></span><br><span class="line">    html_content = <span class="string">&quot;&lt;h1&gt;Hello, Flask!&lt;/h1&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#创建响应对象</span></span><br><span class="line">    response = make_response(html_content)</span><br><span class="line">    response.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;text/html&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#返回响应</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>
<ol start="4" type="1">
<li>在<code>flask-app</code>目录下运行：</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python app.py &amp;</span><br></pre></td></tr></table></figure>
<p><code>&amp;</code>表示把程序放在后台运行。</p>
<p>你会看到：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line"> * Serving Flask app &#x27;app&#x27;</span><br><span class="line"> * Debug mode: off</span><br><span class="line">WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.</span><br><span class="line"> * Running on http://127.0.0.1:5000</span><br><span class="line">Press CTRL+C to quit</span><br></pre></td></tr></table></figure>
<p>用浏览器访问<code>http://127.0.0.1:5000</code>，看到<code>Hello, Flask!</code>即为成功。</p>
<h3 id="在局域网内使用-flask">在局域网内使用 Flask</h3>
<p>指定<code>app.run()</code>里面的<code>host</code>和<code>port</code>参数，即可在
Wi-Fi 局域网内访问手机。</p>
<ol type="1">
<li><p>在手机设置里搜索（或者使用<code>ifconfig</code>命令），找到你手机的
ip 地址。比如是<code>192.168.1.2</code>。</p></li>
<li><p>把代码里的<code>app.run()</code>改为</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">app.run(host=<span class="string">&#x27;192.168.1.2&#x27;</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure>
<p>端口号任意填不冲突就行，默认是<code>5000</code>。</p></li>
<li><p>如上文，运行。</p></li>
</ol>
<p>你可以在本机，或在局域网内任意设备的浏览器上访问<code>http://192.168.1.2:5000</code>。</p>
<h2 id="ngrok内网穿透">Ngrok——内网穿透</h2>
<p>我们搭建了“服务器”。但是没有公网 ip，无法接受来自局域网外的访问。</p>
<p>Ngrok
是一个用于创建安全隧道的工具，它可以将本地的服务器或应用程序暴露到公共互联网。</p>
<h3 id="安装-ngrok">安装 Ngrok</h3>
<ol type="1">
<li><p>查看 Termux 模拟 Linux 环境的 CPU 架构（跟随你手机的架构）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">uname</span> -m</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">getprop ro.product.cpu.abi</span><br></pre></td></tr></table></figure></li>
<li><p><a href="https://ngrok.com/download">下载</a>对应架构的 Ngrok
到手机。（最新版 Ngrok
没有开源，使用<code>pkg install ngrok</code>找不到包，因此在官网上下载）</p></li>
<li><p>解压文件，并移动到<code>~/../usr/bin</code>目录。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar xvzf ~/storage/shared/[你下载的.tgz文件路径] -C ~/../usr/bin</span><br></pre></td></tr></table></figure>
<p>这里用家目录的上一级<code>~/../</code>表示 linux
环境根目录，也可以使用<code>$PREFIX</code>。如果直接使用<code>/</code>，Termux
会认为是手机的根目录。</p></li>
</ol>
<h3 id="在开始之前解决-dns-问题">在开始之前，解决 DNS 问题</h3>
<p>官网上的包，没有适配<a href="#fn1" class="footnote-ref" id="fnref1"
role="doc-noteref"><sup>1</sup></a>
Termux。因此在我首次连接时，发生了连接错误。</p>
<p>在运行的同时打印日志：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ngrok http 5000 --log-level debug --<span class="built_in">log</span> stdout</span><br></pre></td></tr></table></figure>
<p>大部分内容略。关键在这里：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">read udp [::1]:43938-&gt;[::1]:53: read: connection refused</span><br></pre></td></tr></table></figure>
<p>在本地主机<code>[::1]</code>的<code>43938</code>端口和<code>53</code>端口之间，建立连接失败。<code>53</code>是
DNS 服务的端口，说明 DNS 查询出了问题。</p>
<p>Ngrok 是用 Go 语言写的，</p>
<blockquote>
<p>根据 src/net/dnsclient_unix.go，如果 /etc/resolv.conf 不存在，则选择
localhost:53 作为名称服务器。<a href="#fn2" class="footnote-ref"
id="fnref2" role="doc-noteref"><sup>2</sup></a></p>
</blockquote>
<p>它想找<code>/etc/resolv.conf</code>查询
DNS，而在手机里找不到这个文件。进而向<code>localhost:53</code>发送 udp
数据包。手机的<code>53</code>端口没有开放，开启<code>1024</code>以下的端口需要
root 权限。</p>
<p>在 Termux
里有<code>resolv.conf</code>文件，在<code>$PREFIX/usr/etc/resolv.conf</code>。但是官方的包没有改路径，源码也没有开放。</p>
<p>我尝试修改 Ngrok 配置文件里的
<code>dns_resolver_ips</code>，但是没有用。</p>
<h4 id="解决方法">解决方法：</h4>
<p>把 Termux
的<code>resolv.conf</code>文件复制到手机<code>/etc/</code>目录下就行了。</p>
<ul>
<li><p>这需要 root 权限。</p></li>
<li><p><strong>这会修改<code>system</code>分区</strong>。如果手机升级，卸载面具前还要刷回原来的<code>system</code>；如果空间不够，可以删一些没用的系统预装软件数据，通常在<code>/system/app/</code>。</p></li>
<li><p>如果没有 root 权限，可以尝试<a href="#另外">在 Termux 上安装
Linux 发行版</a>。</p></li>
</ul>
<h3 id="使用-ngrok">使用 Ngrok</h3>
<p>先<a href="https://dashboard.ngrok.com/signup">注册账号</a>，然后<a
href="https://dashboard.ngrok.com">进入仪表板</a>。</p>
<h4 id="添加-authtoken-到配置文件">添加 Authtoken 到配置文件</h4>
<p>在本地服务器连接 Ngrok 服务器时，Authtoken 用于认证你的身份。</p>
<p>点击 <em>Your Authtoken</em>，你会看到你的 Authtoken。使用命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ngrok config add-authtoken [你的authtoken]</span><br></pre></td></tr></table></figure>
<p>这会向配置文件<code>~/.config/ngrok/ngrok.yml</code>里写入：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">authtoken:</span> [<span class="string">你的authtoken</span>]</span><br></pre></td></tr></table></figure>
<h4 id="添加-domain-和-edge">添加 Domain 和 Edge</h4>
<p>点击 <em>Domains</em>。Ngrok
应该会提醒你领取一个域名，像<code>[几个英文单词].ngrok-free.app</code>。这是在前端发送请求时的目标域名。</p>
<p>点击 <em>Edges</em>。点击 <em>+ New Edge</em> 按钮创建一个 Edge。</p>
<p>点击新建的
Edge，找到<code>edge=edghts_[一串字符]</code>，复制到手机备用。</p>
<h4 id="允许跨域请求">允许跨域请求</h4>
<p>Flask
可以根据用户的请求，动态生成前端代码。而如果前端代码单独放在另一台服务器上，比如
Github Pages——</p>
<p>从<code>github.io</code>向<code>ngrok-free.app</code>发送 HTTP
请求。由于两者不在同一域名下，浏览器为了用户安全，会拦截跨源请求。</p>
<p>解决方法是，在后端的响应里加上<a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS">跨域资源共享（CORS）</a>头。</p>
<p>flask-cors 库可以给 Flask 的响应自动加上 CORS 头。<a
href="https://flask-cors.readthedocs.io/">flask-cors 文档</a></p>
<p>安装 flask-cors：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install flask-cors</span><br></pre></td></tr></table></figure>
<p>然后在<code>app.py</code>里加两行：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, make_response</span><br><span class="line"><span class="keyword">from</span> flask_cors <span class="keyword">import</span> CORS    <span class="comment">#&lt;----------</span></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">CORS(app)                      <span class="comment">#&lt;----------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="comment">#处理根路由的视图函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line"></span><br><span class="line">    <span class="comment">#创建 html 字符串</span></span><br><span class="line">    html_content = <span class="string">&quot;&lt;h1&gt;Hello, Flask!&lt;/h1&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#创建响应对象</span></span><br><span class="line">    response = make_response(html_content)</span><br><span class="line">    response.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;text/html&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#返回响应</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>
<h4 id="运行-ngrok">运行 Ngrok</h4>
<p>找到前面复制到手机上的<code>edge=edghts_[一串字符]</code>。</p>
<p>先启动 Flask 到后台，再运行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ngrok tunnel --label edge=[一串字符] http://localhost:5000</span><br></pre></td></tr></table></figure>
<h4 id="测试发送-http-请求">测试发送 HTTP 请求</h4>
<ul>
<li><p>用 <a
href="https://www.ruanyifeng.com/blog/2019/09/curl-reference.html">curl</a>
发送<code>GET</code>请求</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -v [你的Ngrok域名]</span><br></pre></td></tr></table></figure></li>
<li><p>在本地<code>file://</code>协议或其他域名下，用 <a
href="https://www.axios-http.cn/">axios</a> 发送跨域请求</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      axios</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">get</span>(<span class="string">&quot;https://你的Ngrok域名&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="后续处理">后续处理</h2>
<h3 id="保活">保活</h3>
<p>如果你想让服务器一直运行，在保持手机开机之外，还要：</p>
<ul>
<li><p>始终把 Termux 挂在后台，锁定，并忽略电池优化</p></li>
<li><p>使用<code>nohup</code>命令让程序不挂起（往下看）↓</p></li>
</ul>
<h3 id="启动服务器">启动服务器</h3>
<p>先启动 Termux，再依次启动 Flask 和 Ngrok。</p>
<p>可以向<code>$PREFIX/usr/etc/profile</code>文件中添加以下几行命令， 让
Termux 启动的同时自执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/flask-app</span><br><span class="line"><span class="built_in">nohup</span> python app.py &amp;</span><br><span class="line"><span class="built_in">nohup</span> ngrok tunnel --label edge=[一串字符] http://localhost:5000 &amp;</span><br></pre></td></tr></table></figure>
<h3 id="关闭服务器">关闭服务器</h3>
<p>使用<code>jobs</code>查看进程列表，<code>kill %[进程序号]</code>杀死进程。</p>
<p>当然，你也可以直接杀掉 Termux 的后台。</p>
<aside id="footnotes" class="footnotes footnotes-end-of-document"
role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p><a
href="https://wiki.termux.com/wiki/Differences_from_Linux">Termux 与
Linux 的区别：https://wiki.termux.com/wiki/Differences_from_Linux</a><a
href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p><a href="https://stackoverflow.com/a/49315513">woohaha
的回答：https://stackoverflow.com/a/49315513</a><a href="#fnref2"
class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</aside>
]]></content>
      <categories>
        <category>无分类</category>
      </categories>
  </entry>
  <entry>
    <title>普通十进制数转单精度浮点数</title>
    <url>/blog/2023/%E6%99%AE%E9%80%9A%E5%8D%81%E8%BF%9B%E5%88%B6%E6%95%B0%E8%BD%AC%E5%8D%95%E7%B2%BE%E5%BA%A6%E6%B5%AE%E7%82%B9%E6%95%B0/</url>
    <content><![CDATA[<ul>
<li>在 IEEE 754 标准下</li>
</ul>
<span id="more"></span>
<p>单精度浮点数，即 32 位二进制浮点数，包含：</p>
<p>一位符号位 + 八位指数位 + 二十三位尾数位</p>
<h2 id="例一">例一</h2>
<p>以 <span class="math inline">\(0.1_{10}\)</span> 为例：</p>
<ol type="1">
<li><p>把十进制转换为二进制</p>
<p><span class="math inline">\(0.1 _{10} = 0.0\dot{0}01\dot{1}...
_{2}\)</span></p></li>
<li><p>用以 <span class="math inline">\(2_{10}\)</span>
为基数的科学计数法表示，并保证【尾数的小数点前是 <span
class="math inline">\(1_{2}\)</span>】</p>
<p><span class="math inline">\(= 1.\dot{1}00\dot{1}..._{2} \times
(2^{-4})_{10}\)</span></p>
<p>可以看到指数是 <span class="math inline">\(-4_{10}\)</span></p></li>
<li><p>计算指数位（又叫阶码），用指数加上偏移量 <span
class="math inline">\((2^{e-1}-1)_{10}\)</span></p>
<p>这里 <span class="math inline">\(e\)</span>
等于【用于表示指数位的位数】 <span
class="math inline">\(8_{10}\)</span>，所以偏移量为 <span
class="math inline">\(127_{10}\)</span></p>
<p>则阶码为 <span class="math inline">\(-4_{10} + 127_{10} =
123_{10}\)</span></p>
<p>阶码的二进制为 <code>0111 1011</code>，注意
<em>阶码始终为无符号整数</em></p></li>
<li><p>取科学计数法的【小数点后二十三位】作为【尾数位】，因为是无限的，所以要舍去一部分</p>
<p>它的前二十位是：<code>1001 1001 1001 1001 1001</code></p>
<p>二十一至二十八位是：<code>1001 1001</code></p>
<p>所以二十一至二十三位，要么取 <code>100</code>，要么取
<code>101</code>。</p>
<p>通常是舍入到最接近的，一样接近则偶数（末尾为
<code>0</code>）优先，这里 <code>101</code> 更接近。</p></li>
<li><p>把符号位连同阶码、尾数位缝合起来</p>
<p><code>0 | 0111 1011 | 1001 1001 1001 1001 1001 101</code></p></li>
</ol>
<h2 id="例二">例二</h2>
<p>以 <span class="math inline">\(12_{10} = 1.5_{10} \times
(2^{3})_{10}\)</span> 为例，和上面的步骤一样：</p>
<ol type="1">
<li><p>把十进制转换为二进制</p>
<p><span class="math inline">\(12 _{10} = 1100 _{2}\)</span></p></li>
<li><p>用以 <span class="math inline">\(2\)</span>
为基数的科学计数法表示，并保证【尾数的小数点前是 <span
class="math inline">\(1\)</span>】</p>
<p><span class="math inline">\(= 1.1_{2} \times (2^3)_{10}\)</span></p>
<p>可以看到指数是 <span class="math inline">\(3_{10}\)</span></p></li>
<li><p>计算指数位（又叫阶码），用指数加上偏移量 <span
class="math inline">\((2^{e-1}-1)_{10}\)</span></p>
<p>这里 <span class="math inline">\(e\)</span>
等于【用于表示指数位的位数】 <span
class="math inline">\(8_{10}\)</span>，所以偏移量为 <span
class="math inline">\(127_{10}\)</span></p>
<p>则阶码为 <span class="math inline">\(3_{10} + 127_{10} =
130_{10}\)</span></p>
<p>阶码的二进制为 <code>1000 0010</code>，注意
<em>阶码始终为无符号整数</em></p></li>
<li><p>取科学计数法的【小数点后二十三位】作为【尾数位】，因为是有限的，所以后面直接补零</p>
<p>小数点后二十三位是：<code>1000 0000 0000 0000 000</code></p></li>
<li><p>把符号位连同阶码、尾数位缝合起来</p>
<p><code>0 | 1000 0010 | 1000 0000 0000 0000 000</code></p></li>
</ol>
<h2 id="特殊情况">特殊情况</h2>
<p><a
href="/blog/2023/单精度浮点数的五种形式/">单精度浮点数的五种形式</a></p>
<p>对呀对呀……单精度浮点数有五种形式，你知道么？</p>
<h2 id="如何验证">如何验证</h2>
<ul>
<li><p><a
href="https://baseconvert.com/ieee-754-floating-point">在线转换</a></p></li>
<li><p><a href="/blog/2023/用GDB查看变量内存/">用 GDB
查看变量内存</a></p></li>
<li><p><a href="https://en.wikipedia.org/wiki/IEEE_754">Wikipedia</a> |
<a href="https://zh.wikipedia.org/wiki/IEEE_754">维基百科</a></p></li>
<li><p>获取国际标准文件</p>
<p>IEEE 754 标准是电气与电子工程师协会（Institute of Electrical and
Electronics Engineers）制定的关于浮点数表示和运算的标准。最新标准是 <a
href="https://standards.ieee.org/ieee/754/6210/">IEEE
754-2019</a>，对应国际标准 <a
href="https://www.iso.org/cms/%20render/live/en/sites/isoorg/contents/data/standard/08/09/80985.html">ISO/IEC
60559:2020</a>，预计下一次在 2028 年修订。 http://snti.ru/
这个网站分享了各种国际标准文件的磁力链接，但是可以免费下载的不全，IEC
的只有 61xxx。据说可以给站长发邮件要
<code>popov_al@perm.ru</code>，每个文件一刀乐。在 ISO 官网上下载需要 187
瑞士法郎，合 1000 多人民币。</p></li>
</ul>
]]></content>
      <categories>
        <category>无分类</category>
      </categories>
  </entry>
  <entry>
    <title>用browser-sync实现在文件内容改变后立即刷新页面</title>
    <url>/blog/2023/%E7%94%A8browser-sync%E5%AE%9E%E7%8E%B0%E5%9C%A8%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E6%94%B9%E5%8F%98%E5%90%8E%E7%AB%8B%E5%8D%B3%E5%88%B7%E6%96%B0%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<p>起因是：</p>
<p>不管是直接打开 html
文件，还是用<code>python -m http.server 8000 --bind 127.0.0.1</code>，在修改保存
html 文件后浏览器都不能立马刷新。</p>
<span id="more"></span>
<ol type="1">
<li><p>安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install browser-sync</span><br></pre></td></tr></table></figure>
<p>安装到想作为服务器根目录的文件夹。以前觉得全局安装好，现在暂时觉得本地安装好。（据说用
Flask 也能实现立即刷新，用搜到的方法结果版本不匹配）</p></li>
<li><p>运行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npx browser-sync start --server --files <span class="string">&quot;.&quot;</span></span><br></pre></td></tr></table></figure>
<p><code>--files</code> 后指定要监视的文件。</p>
<p><code>.</code> 表示监视当前目录以及子目录下的所有文件。</p>
<p>可以改成 <code>*.html</code>，<code>public/*.*</code> 等。</p></li>
</ol>
<p>html
文件里至少得有一对<code>&lt;body&gt;</code>标签，要么没法自动刷新。</p>
<p>在没有修改文件内容，只 <code>Ctrl + S</code>
保存时也会刷新，在命令行会输出
<code>File event [change]</code>，只不过看不出来。</p>
<p>好像和直接通过浏览器来刷新不一样，因为我在选项卡上没看到加载动画。</p>
]]></content>
      <categories>
        <category>无分类</category>
      </categories>
  </entry>
  <entry>
    <title>用GDB查看变量内存</title>
    <url>/blog/2023/%E7%94%A8GDB%E6%9F%A5%E7%9C%8B%E5%8F%98%E9%87%8F%E5%86%85%E5%AD%98/</url>
    <content><![CDATA[<p>起因是想验证浮点数的存储方式。</p>
<p><a
href="https://baseconvert.com/ieee-754-floating-point">这个网站</a>可以实现普通十进制数与
IEEE 754 浮点数的相互转换。</p>
<span id="more"></span>
<p>示例程序：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> num = <span class="number">1.7</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在第六行打上断点，VSCode 开调试，在调试控制台里：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-<span class="built_in">exec</span> x/4tb &amp;num</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-exec</code> 执行命令</li>
<li><code>x</code> 查看内存</li>
<li><code>4</code> 输出 4 个单元
<ul>
<li>不写默认为 <code>1</code></li>
</ul></li>
<li><code>t</code> 以二进制形式输出
<ul>
<li><code>x</code> 十六进制</li>
</ul></li>
<li><code>b</code> 以【一个字节】为一个单元
<ul>
<li><code>h</code> 两个字节</li>
<li><code>w</code> 四个字节</li>
<li><code>g</code> 八个字节</li>
</ul></li>
<li><code>&amp;</code>取变量地址</li>
</ul>
<p>输出结果：</p>
<p><code>0x61fe1c: 10011010 10011001 11011001 00111111</code></p>
<p>从右往左排列后：</p>
<p><code>00111111 11011001 10011001 10011010</code></p>
<p>才是<code>float 1.7</code>的二进制表示。</p>
<p>还可以直接用</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-<span class="built_in">exec</span> x/tw &amp;num</span><br></pre></td></tr></table></figure>
<p>输出四个字节，结果：</p>
<p><code>0x61fe1c: 00111111110110011001100110011010</code></p>
]]></content>
      <categories>
        <category>无分类</category>
      </categories>
  </entry>
  <entry>
    <title>社保</title>
    <url>/blog/2023/%E7%A4%BE%E4%BF%9D/</url>
    <content><![CDATA[<ul>
<li>社保是什么</li>
<li>城镇职工社保和城乡居民社保
<ul>
<li>城镇职工社保-&gt;五险</li>
<li>城乡居民社保-&gt;两险</li>
</ul></li>
<li>法律依据是什么</li>
</ul>
<span id="more"></span>
<h2 id="社保是什么">社保是什么</h2>
<p>社保是社会保险。再往前问一步，保险是什么？</p>
<p>你交钱给一个<strong>组织</strong>，并和他们签订<strong>契约</strong>。当你出事且符合<strong>出事的条件</strong>时，这个组织会根据契约的条文返还你对应比例的钱。</p>
<table>
<thead>
<tr class="header">
<th>保险类型</th>
<th>组织</th>
<th>契约</th>
<th>出事的条件</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>商业保险</td>
<td>保险公司</td>
<td>保险合同、法律、法规</td>
<td>由契约规定</td>
</tr>
<tr class="even">
<td>社会保险</td>
<td>国家</td>
<td>法律、法规</td>
<td>由契约规定</td>
</tr>
</tbody>
</table>
<p>保险是一种投资，当然可以选择不交——如果你不担心：</p>
<ul>
<li>老了，没钱用</li>
<li>看病，没钱用</li>
<li>工作受伤，没钱用</li>
<li>工作没了，没钱用</li>
<li>生孩子，没钱用</li>
</ul>
<p>这五大问题的话。它们分别对应社保的：</p>
<ul>
<li>基本养老保险</li>
<li>基本医疗保险</li>
<li>工伤保险</li>
<li>失业保险</li>
<li>生育保险</li>
</ul>
<h2 id="城镇职工社保和城乡居民社保">城镇职工社保和城乡居民社保</h2>
<p>它们都属于社会保险。</p>
<ul>
<li>城镇职工社保，包括上面的五险。</li>
<li>城乡居民社保，只包括医疗保险和养老保险。</li>
</ul>
<table>
<colgroup>
<col style="width: 18%" />
<col style="width: 25%" />
<col style="width: 43%" />
<col style="width: 12%" />
</colgroup>
<thead>
<tr class="header">
<th>社会保险类型</th>
<th>谁交</th>
<th>交的前提</th>
<th>交的时间</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>职工社保</td>
<td>职工和雇佣者分担</td>
<td>职工与雇佣者签订<strong>劳动合同</strong></td>
<td>按月</td>
</tr>
</tbody>
</table>
<p>待补充</p>
<h2 id="法律依据">法律依据</h2>
<ul>
<li><p>《中华人民共和国宪法》（<a
href="https://flk.npc.gov.cn/detail2.html?MmM5MDlmZGQ2NzhiZjE3OTAxNjc4YmY1YTQ4MzAwNGI%3D">2018-03-11
施行版</a>）第二章第四十五条</p></li>
<li><p>《中华人民共和国劳动法》（<a
href="https://flk.npc.gov.cn/detail2.html?ZmY4MDgwODE2ZjEzNWY0NjAxNmYyMGYxNmVlMTE3Mzc%3D">2018-12-29
施行版</a>）第九章</p></li>
<li><p>《中华人民共和国社会保险法》（<a
href="https://flk.npc.gov.cn/detail2.html?ZmY4MDgwODE2ZjEzNWY0NjAxNmYyMTA5ODliOTE3OWE%3D">2018-12-29
施行版</a>）全文</p></li>
</ul>
]]></content>
      <categories>
        <category>无分类</category>
      </categories>
  </entry>
  <entry>
    <title>让提交的照片作业更清晰</title>
    <url>/blog/2023/%E8%AE%A9%E6%8F%90%E4%BA%A4%E7%9A%84%E7%85%A7%E7%89%87%E4%BD%9C%E4%B8%9A%E6%9B%B4%E6%B8%85%E6%99%B0/</url>
    <content><![CDATA[<p>这里的【照片作业】指的是用手机拍摄写在纸上的字。具体步骤：</p>
<ol type="1">
<li>拍摄</li>
<li>裁剪</li>
<li><strong>彩色转黑白</strong></li>
<li><strong>白平衡</strong></li>
<li>导出图片</li>
<li>（可选）导入 Word，导出 PDF</li>
</ol>
<span id="more"></span>
<ol type="1">
<li>首先要拍清晰，手不抖。 <img src="/blog/images/hwimg-source.jpg">
（不太清晰）</li>
<li>照片中有用的部分是什么？是作业内容（文字），和反衬内容的背景（纸）。在拍完之后适当裁剪。</li>
<li>同上，老师只需要分辨字和背景，所以照片完全可以转成黑白的。我使用的是<a
href="https://www.gimp.org/downloads/">GIMP</a>，是开源免费的。用手机自带的修改也可。
<ul>
<li>GIMP -&gt; 文件 -&gt; 打开 -&gt; 选择图片</li>
<li>GIMP -&gt; 颜色 -&gt; 去色 -&gt; 彩色到灰度
<img src="/blog/images/hwimg-c2g.jpg"></li>
</ul></li>
</ol>
<p>看起来雾蒙蒙的，而且太白了。</p>
<ol start="4" type="1">
<li><p>白平衡</p>
<ul>
<li>GIMP -&gt; 颜色 -&gt; 自动 -&gt; 白平衡
<img src="/blog/images/hwimg-wb.jpg"> 看起来好多了。</li>
</ul></li>
<li><p>导出图片</p>
<ul>
<li>GIMP -&gt; 文件 -&gt; 导出为 -&gt; 文件名.jpg -&gt; 导出</li>
<li>其中，【保存 Exif 数据】、【保存 XMP 数据】、【保存 IPTC
数据】、【保存缩略图】、【保存色彩配置文件】都不用选。【高级选项】调了没看出明显区别，所以不用调。</li>
<li>导出质量设成 <code>10</code>
就行，质量越低文件越小，只要还能分辨出字就行。</li>
<li>我用 <code>10</code> 导出看起来和导出前没啥区别，但是用
<code>0</code> 导出就： <img src="/blog/images/hwimg-0.jpg">
有点恐怖。<del>但是更清楚了</del></li>
</ul></li>
<li><p>导入 Word，转成 PDF</p>
<ul>
<li>前提是老师允许交文档。好处是上下滑动查看连续的，比左右滑动查看单张的更人性化。</li>
<li>Word -&gt; 布局 -&gt; 页边距 -&gt; 四个边距都设成
<code>0</code>。</li>
<li>Word -&gt; 插入 -&gt; 图片 -&gt; 此设备 -&gt; 按住 <code>Ctrl</code>
点选多张图片。注意第一个选的会被插在最后，是反着来的。</li>
<li>把图片拉伸到与页面等宽，尽可能每一页不留太多空白。</li>
<li>Word -&gt; 文件 -&gt; 导出 -&gt; 创建 PDF/XPS 文档。</li>
<li>导出选项有【标准】和【最小文件大小】。先选最小的，看清不清楚，能看就行。就是用有损压缩牺牲了部分清晰度，换取了比原图和
Word 文档都小的体积。四五张照片原图有上十
MB，用<code>10</code>质量导出有 2MB 左右，再转成 PDF 能在 1MB
之内。</li>
<li>PDF 还有个好处就是跨平台兼容，各个平台版式显示一致。</li>
<li>不允许交文档时，或许可以交拼图。但是太长了不好看，宽度也不好调，不像文档有分页。</li>
</ul></li>
</ol>
]]></content>
      <categories>
        <category>无分类</category>
      </categories>
  </entry>
  <entry>
    <title>能指和所指</title>
    <url>/blog/2023/%E8%83%BD%E6%8C%87%E5%92%8C%E6%89%80%E6%8C%87/</url>
    <content><![CDATA[<ul>
<li>能指和所指</li>
<li>C 语言中的指针</li>
</ul>
<span id="more"></span>
<h2 id="能指和所指">能指和所指</h2>
<p>能指就是符号，所指就是符号所指向的意义。</p>
<p>能指是【生】，所指是【诞生、生物、生活、不成熟、不熟悉、从业者<code>-ist</code>……】。</p>
<p>能指是变量名，所指是变量值。</p>
<p>变量名可以被重新赋值，就是老子说的“非常名”。</p>
<h2 id="c-语言中的指针">C 语言中的指针</h2>
<h3 id="普通变量">普通变量</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> num = <span class="number">100</span>;</span><br></pre></td></tr></table></figure>
<p>变量类型<code>int</code>，变量名<code>num</code>-&gt;变量值<code>100</code>。</p>
<p>普通变量名已经有一层指向了。</p>
<h3 id="指针变量">指针变量</h3>
<p>用于专门存放内存地址（值的位置）的变量，叫指针。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>* ptr = &amp;num;</span><br></pre></td></tr></table></figure>
<p>变量类型<code>int*</code>，变量名<code>ptr</code>-&gt;变量值<code>num-&gt;100的内存地址</code></p>
<p><code>&amp;num</code>，就是获取<code>num</code>值的位置。</p>
<ul>
<li><p><code>&amp;</code>一个变量名，就是获取变量名的值的地址。简称取地址。</p></li>
<li><p><code>*</code>一个变量名，就是获取变量名的值（只对指针有效）。简称访问地址。</p></li>
<li><p><code>*&amp;</code>一个变量名就是先<code>&amp;</code>后<code>*</code>（两个运算符优先级相同，且都是右结合）。</p>
<p>先取地址，后访问地址，和单独使用变量名效果一样。</p></li>
<li><p><code>&amp;</code>一个指针变量名，就是获取指针变量值本身的位置（存放<code>num</code>地址值的地址）。</p></li>
</ul>
<p>还可以创建二级指针，就是指向指针的指针：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>** pptr = &amp;ptr;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>pptr</code>变量名指向某一个地址，这个地址处记录着<code>ptr</code>的地址</li>
<li><code>ptr</code>变量名指向某一个地址，这个地址处记录着<code>num</code>的地址</li>
<li><code>num</code>变量名指向某一个地址，这个地址处记录着<code>num</code>的值<code>100</code></li>
</ul>
]]></content>
      <categories>
        <category>无分类</category>
      </categories>
  </entry>
  <entry>
    <title>让博客commit前的工作更简单</title>
    <url>/blog/2023/%E8%AE%A9%E5%8D%9A%E5%AE%A2commit%E5%89%8D%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%9B%B4%E7%AE%80%E5%8D%95/</url>
    <content><![CDATA[<p>起因是，我是把博客代码分两个仓库存的。需要做很多重复的工作。</p>
<p>于是我写了两个 bat 文件。</p>
<span id="more"></span>
<p>起因是，我是把博客代码分两个仓库存的：</p>
<ul>
<li><p><code>blog-source</code>存 Hexo 框架源码，NexT
主题源码和自己的部分（更改后的配置文件、md 文档、图片等）</p></li>
<li><p><code>blog</code>存渲染之后的网页，分支是<code>gh-pages</code></p></li>
</ul>
<p>这就造成在 commit 前，我需要做以下工作：</p>
<ol type="1">
<li><p>在<code>blog-source</code>文件夹里先打开本地预览服务器。</p></li>
<li><p>点击链接，在浏览器里打开。</p></li>
<li><p>预览没问题，渲染网页。</p></li>
<li><p>删除<code>blog</code>文件夹里除了<code>.git</code>外的所有文件和文件夹。</p></li>
<li><p>把渲染的网页从<code>blog-source/public/</code>转移到<code>blog</code>文件夹里。</p></li>
<li><p>清除<code>blog-source</code>文件夹里渲染的网页。</p></li>
</ol>
<p>手动操作了十几天后很烦，于是我写了两个 bat 文件：</p>
<p><code>bs.bat</code> 做第 1-2 步</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /d d:\repo\blog-source</span><br><span class="line"><span class="built_in">start</span> http://localhost:<span class="number">4000</span>/blog/</span><br><span class="line"><span class="keyword">call</span> npx hexo s</span><br></pre></td></tr></table></figure>
<p><code>bg.bat</code> 做第 3-6 步</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">:: 删除旧文件</span><br><span class="line"><span class="built_in">cd</span> /d d:\repo\blog</span><br><span class="line">git rm -r *</span><br><span class="line">:: 渲染新文件</span><br><span class="line"><span class="built_in">cd</span> ..\blog-source</span><br><span class="line"><span class="keyword">call</span> npx hexo g</span><br><span class="line">:: 转移新文件</span><br><span class="line"><span class="built_in">xcopy</span> public ..\blog /s /e</span><br><span class="line"><span class="keyword">call</span> npx hexo clean</span><br></pre></td></tr></table></figure>
<p>再建一个专门存 bat 的文件夹，把它添加到环境变量
PATH。这样在任一文件夹下都可以做第 1-6 步了。</p>
<p>commit 我用的是 GitHub Desktop，暂时没有换的必要。</p>
]]></content>
      <categories>
        <category>无分类</category>
      </categories>
  </entry>
  <entry>
    <title>算法-00-总纲</title>
    <url>/blog/2023/%E7%AE%97%E6%B3%95-00-%E6%80%BB%E7%BA%B2/</url>
    <content><![CDATA[<p>总纲就是学别人的写法，给别人的代码加注释。</p>
<span id="more"></span>
<p>参考项目：</p>
<ul>
<li><a href="https://github.com/zhaosaisai/sort.js">sort.js</a></li>
<li><a
href="https://github.com/hustcc/JS-Sorting-Algorithm">JS-Sorting-Algorithm</a></li>
</ul>
<h2 id="用于测试算法的代码">用于测试算法的代码</h2>
<p>从文件读取数据集，输出运行时间和运行结果。</p>
<h3 id="排序算法的测试">排序算法的测试</h3>
<h4 id="数据集">数据集</h4>
<p><code>dataSet.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">[</span><span class="number">-1</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">[</span><span class="number">3</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">,</span> <span class="number">1</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">[</span><span class="number">-3</span><span class="punctuation">,</span> <span class="number">9999991247561</span><span class="punctuation">,</span> <span class="number">3456</span><span class="punctuation">,</span> <span class="number">-111</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">7</span><span class="punctuation">,</span> <span class="number">9</span><span class="punctuation">,</span> <span class="number">23</span><span class="punctuation">,</span> <span class="number">6</span><span class="punctuation">,</span> <span class="number">0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">[</span><span class="number">-1.23</span><span class="punctuation">,</span> <span class="number">3.14</span><span class="punctuation">,</span> <span class="number">3.14</span><span class="punctuation">,</span> <span class="number">2.71</span><span class="punctuation">,</span> <span class="number">0</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">-4</span><span class="punctuation">,</span> <span class="number">-2</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>
<h4 id="测试代码">测试代码</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">readDataSet</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;dataSet.json&quot;</span>));</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;读取数据集时出错：&quot;</span>, error);</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printResult</span>(<span class="params">algorithmName, dataSet</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;algorithmName&#125;</span> 后的结果：`</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(dataSet);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">testAlgorithm</span>(<span class="params">algorithm, dataSet</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> dataSetCopy = dataSet.<span class="title function_">slice</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&quot;executionTime&quot;</span>);</span><br><span class="line">  dataSetCopy.<span class="title function_">forEach</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">algorithm</span>(data);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&quot;executionTime&quot;</span>);</span><br><span class="line">  <span class="title function_">printResult</span>(algorithm.<span class="property">name</span>, dataSetCopy);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mySort</span>(<span class="params">data</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dataSet = <span class="title function_">readDataSet</span>();</span><br><span class="line"><span class="title function_">testAlgorithm</span>(mySort, dataSet);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>计网-01-概述-性能指标</title>
    <url>/blog/2023/%E8%AE%A1%E7%BD%91-01-%E6%A6%82%E8%BF%B0-%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/</url>
    <content><![CDATA[<ul>
<li><span class="math inline">\(\mathrm{K,M,G...}\)</span>
的不同含义</li>
<li>速率、带宽、吞吐量</li>
<li>发送时延、传播时延、处理时延、排队时延</li>
<li>时延带宽积</li>
<li>每比特宽度</li>
<li>RTT 和有效数据（速）率</li>
<li>（网络）利用率</li>
</ul>
<p>对应谢希仁《计算机网络》第八版 1.6.1</p>
<span id="more"></span>
<h2 id="mathrmkmg...-的不同含义"><span
class="math inline">\(\mathrm{K,M,G...}\)</span> 的不同含义</h2>
<p>基数不同：</p>
<ul>
<li><p>在计算机领域，<span class="math inline">\(\mathrm{K =
2^{10}}\)</span>，<span class="math inline">\(\mathrm{M =
2^{10}K}\)</span>……</p></li>
<li><p>在通信的领域，<span class="math inline">\(\mathrm{K =
10^{3}}\)</span>，<span class="math inline">\(\mathrm{M =
10^{3}K}\)</span>……</p></li>
</ul>
<p>数据通过网线或空气传播时，是在通信的领域。</p>
<p>一般 <span class="math inline">\(\mathrm{MB}\)</span> 指 <span
class="math inline">\(\mathrm{2^{10} \times 2^{10} \times 8
bit}\)</span>，</p>
<p><span class="math inline">\(\mathrm{Mbit}\)</span> 指 <span
class="math inline">\(\mathrm{10^{3} \times 10^{3} bit}\)</span>，</p>
<p>具体问题具体分析。如果追求准确的话，<span
class="math inline">\(\mathrm{2^{10} \times 2^{10} \times 8
bit}\)</span> 用 <span class="math inline">\(\mathrm{MiB}\)</span>
表示。</p>
<h2 id="速率">速率</h2>
<p><span class="math inline">\(\mathrm{bit/s}\)</span></p>
<p><strong>通常</strong>指额定速率。</p>
<h2 id="带宽">带宽</h2>
<h3 id="频域上的mathrmhz">频域上的：<span
class="math inline">\(\mathrm{Hz}\)</span></h3>
<p>信号频率范围 <span class="math inline">\(\mathrm{200Hz \sim
300Hz}\)</span>，</p>
<p>带宽为 <span class="math inline">\(\mathrm{300Hz - 200Hz =
100Hz}\)</span>。</p>
<h3 id="时域上的mathrmbits">时域上的：<span
class="math inline">\(\mathrm{bit/s}\)</span></h3>
<p><strong>通常</strong>指某信道的最高速率。</p>
<h2 id="吞吐量">吞吐量</h2>
<p>指实际速率 <span class="math inline">\(\mathrm{bit/s}\)</span>，进量
+ 出量。</p>
<p>有多条链路时，吞吐量由瓶颈链路决定。</p>
<h2 id="时延">时延</h2>
<p>单位都是时间单位。</p>
<h3 id="发送时延">发送时延</h3>
<p>网卡发送数据的时间。<strong>与信道长度无关</strong>。不要使用【传输时延】这个词。</p>
<p><span class="math inline">\(\mathrm{s = \dfrac{bit}{bit/s}} =
\dfrac{数据长度}{发送速率}\)</span></p>
<h3 id="传播时延">传播时延</h3>
<p>电磁波在网线或空气中传播的时间。<strong>与信道长度有关</strong>。</p>
<p><span class="math inline">\(\mathrm{s = \dfrac{m}{m/s} =
\dfrac{信道长度}{信号传播速率}}\)</span></p>
<ul>
<li>光速：<span class="math inline">\(\mathrm{3.0 \times 10^5
km/s}\)</span></li>
<li>铜线：<span class="math inline">\(\mathrm{2.3 \times 10^5
km/s}\)</span></li>
<li>光纤：<span class="math inline">\(\mathrm{2.0 \times 10^5
km/s}\)</span></li>
</ul>
<p>发送时延和传播时延没啥关系。</p>
<h3 id="处理时延">处理时延</h3>
<p>主机或路由器收到分组后，对分组进行处理的时间。</p>
<h3 id="排队时延">排队时延</h3>
<p>分组在路由器输入队列和输出队列里排队的时间。</p>
<h3 id="过程">过程</h3>
<p>……-&gt;输出排队-&gt;发送-&gt;传播-&gt;输入排队-&gt;处理-&gt;输出排队……</p>
<h2 id="时延带宽积">时延带宽积</h2>
<p><span class="math inline">\(\mathrm{bit = s \times bit/s = 传播时延
\times 带宽}\)</span></p>
<p>已经从发送端发出，但尚未到达接收端的比特数。又叫<strong>以比特为单位的链路长度</strong>。</p>
<h2 id="每比特宽度">每比特宽度</h2>
<p>（两行式子都存疑）</p>
<p><span class="math display">\[
\begin{aligned}
&amp;\mathrm{m/bit = \dfrac{m}{bit} = \dfrac{信道长}{比特数}} \\
&amp;\mathrm{m/bit = \dfrac{m/s}{bit/s} =
\dfrac{信道传播速率}{信道当前带宽（或者网卡发送速率？）}}
\end{aligned}
\]</span></p>
<h2 id="rtt">RTT</h2>
<p>往返时间（Round-Trip Time）</p>
<pre class="mermaid">gantt
    title RTT（甘特图）
    dateFormat s
    axisFormat %S

    section RTT
    RTT :3,17s

    section A
    发送           :0,3s
    接收    :17,3s
    ……    :20,4s

    section 传播
    从A到B传播    :1,8s
    从B到A传播    :11,8s

    section B
    接收      :7,3s
    发送    :10,3s</pre>
<p>其中排队时间和处理时间在接收和发送之间，这里忽略了。</p>
<h2 id="有效数据率">有效数据率</h2>
<p><span class="math inline">\(\mathrm{bit/s = \dfrac{bit}{s} =
\dfrac{数据长度}{发送时间+RTT}}\)</span></p>
<p>是有效的数据<strong>速率</strong>。</p>
<h2 id="利用率">利用率</h2>
<p><span class="math inline">\(网络利用率 = 1 -
\dfrac{空闲时延}{当前时延}\)</span></p>
<p>利用率越高，当前时延越大（堵车）。</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>计网-00-概述-杂项概念</title>
    <url>/blog/2023/%E8%AE%A1%E7%BD%91-00-%E6%A6%82%E8%BF%B0-%E6%9D%82%E9%A1%B9%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<ul>
<li>概述：计算机网络、互 Lian 网、ISP、IXP、RFC 文档</li>
<li>组成及通信
<ul>
<li>边缘部分的通信：C/S、P2P</li>
<li>核心部分的通信：电路交换、分组交换、报文交换</li>
</ul></li>
<li>类别</li>
</ul>
<p>对应谢希仁《计算机网络》第八版 1.2~1.5</p>
<span id="more"></span>
<h2 id="概述">概述</h2>
<p>什么叫计算机网络？</p>
<p>一些通用的、可编程的（含
CPU）硬件连接起来，可以传输多种不同类型的数据。</p>
<ul>
<li>互连网 internet：通用名词，一群计算机连起来。</li>
<li>互联网 Internet：专用名词，全球计算机连起来。</li>
</ul>
<p>世界上第一个网页：<a
href="http://info.cern.ch">http://info.cern.ch</a></p>
<p><strong>ISP</strong></p>
<p>互联网服务提供者（Internet Service
Provider），可以是移动联通电信公司，也可以是非营利组织。</p>
<ul>
<li>主干 ISP：国</li>
<li>地区 ISP：省</li>
<li>本地 ISP：省以下</li>
</ul>
<p>内容提供者可以连接各级 ISP 和 IXP。</p>
<p><strong>IXP</strong></p>
<p>互联网交换点（Internet eXchange Point），让两个 ISP 直接相连。</p>
<p>比如两个同级 ISP 交换信息时，可以通过 IXP，而不必通过上级 ISP。</p>
<p><strong>RFC 文档</strong></p>
<p>“请求评论”（Request For
Comments）的文档，公开发布的互联网建议标准，请求公众评论。</p>
<p>最后制定互联网标准 STD。</p>
<h2 id="组成及通信">组成及通信</h2>
<ul>
<li>边缘部分：所有用户直接使用的主机。又叫端系统。</li>
<li>核心部分：大量网络和连接网络的路由器。</li>
</ul>
<h3 id="边缘部分的通信">边缘部分的通信</h3>
<p>计算机通信，实际上是进程间通过端口号通信。</p>
<h4 id="cs">C/S</h4>
<p>客户-服务器</p>
<p>客户和服务器都是指进程。</p>
<h4 id="p2p">P2P</h4>
<p>peer to peer，peer：平等的。</p>
<p>本质是 C/S，每台主机既是 C 又是 S。</p>
<h3 id="核心部分的通信">核心部分的通信</h3>
<h4 id="电路交换">电路交换</h4>
<p>三步走：建立连接-&gt;占线通信-&gt;释放连接</p>
<ul>
<li>占线，两台机器间通信完了才能接受与其他机器通信</li>
<li>效率低（时间利用密度低，占线过程中会有不收发信息的时候）</li>
</ul>
<h4 id="分组交换">分组交换</h4>
<p>存储转发，类比快递收寄</p>
<ol type="1">
<li><p>把报文分组，每组写上头部信息。（包裹大包分成小包，写上序号、寄出地和目的地等）</p></li>
<li><p>通过路由器一级一级地转发到目的地。</p>
<pre class="mermaid">   gantt
    title 分组交换（甘特图）
    dateFormat s
    axisFormat %S

    section 1号包
    从A到B    :0, 5s
    从B到C    :5, 5s
    从C到D    :10, 5s

    section 2号包
    从A到B    :5, 5s
    从B到C    :10, 5s
    从C到D    :15, 5s

    section 3号包
    从A到B    :10, 5s
    从B到C    :15, 5s
    从C到D    :20, 5s</pre>
<ul>
<li>0-5 时间 1 号包裹从 A 站到 B 站</li>
<li>5-10 时间 1 号包裹从 B 站到 C 站、2 号包裹从 A 站到 B 站</li>
<li>10-15 时间 1 号包裹从 C 站到 D 站、2 号包裹从 B 站到 C 站、3
号包裹从 A 站到 B 站</li>
<li>……</li>
<li>（书上的图是以空间为横轴，以时间为纵轴）</li>
</ul></li>
<li><p>把各个包裹合并。</p></li>
</ol>
<ul>
<li>不会占线，速度比报文交换快</li>
<li>排队等路由器转发</li>
<li>动态分配线路，不保证带宽</li>
<li>增加开销（合并的时候）</li>
</ul>
<h4 id="报文交换">报文交换</h4>
<p>也是存储转发，但是不分组，直接发完整的。</p>
<h2 id="类别">类别</h2>
<h3 id="按作用范围">按作用范围</h3>
<ul>
<li>WAN：广域网，几十到几千公里</li>
<li>MAN：城域网，5~50km</li>
<li>LAN：局域网，1km</li>
<li>PAN：个人局域网，10m</li>
</ul>
<h3 id="按使用者">按使用者</h3>
<ul>
<li>公用网</li>
<li>专用网</li>
</ul>
<h3 id="接入网-an">接入网 AN</h3>
<p>不是核心部分，也不是边缘部分。</p>
<p><a href="">宽带接入技术</a></p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>算法-01-插入排序</title>
    <url>/blog/2023/%E7%AE%97%E6%B3%95-01-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p>插入排序就是接扑克牌。</p>
<span id="more"></span>
<p>插入排序就像一张一张地接扑克牌，接到第一张扑克牌时什么也不做，接到第二张扑克牌时要与第一张作比较，看插入到第一张的前面还是后面，……，接到第
n 张扑克牌时要与前 n - 1 张比较，看插入到手牌的哪个位置。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">insertionSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="comment">// 插入排序（从小到大）</span></span><br><span class="line">  <span class="keyword">const</span> len = arr.<span class="property">length</span>; <span class="comment">// 数组长度</span></span><br><span class="line">  <span class="keyword">let</span> preIndex, current; <span class="comment">// 当前元素的前一个元素的索引，和当前元素的值</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="comment">// i 相当于是一个指针，指向当前新接的牌</span></span><br><span class="line">    <span class="comment">// 只有一张或零张牌时不用排序，此时 len == 1 || len == 0，不满足循环条件，直接退出</span></span><br><span class="line">    preIndex = i - <span class="number">1</span>; <span class="comment">// 刚开始是新接的牌的前一张牌的索引，后来向左扫描</span></span><br><span class="line">    current = arr[i]; <span class="comment">// 新接的牌牌面</span></span><br><span class="line">    <span class="keyword">while</span> (preIndex &gt;= <span class="number">0</span> &amp;&amp; arr[preIndex] &gt; current) &#123;</span><br><span class="line">      <span class="comment">// 游标 preIndex 向左扫描，当每找到一张比当前新接的牌大的牌时，把游标当前指向的值覆盖给它右面的元素</span></span><br><span class="line">      <span class="comment">// 能进到这层循环，说明牌有两张或以上</span></span><br><span class="line">      <span class="comment">// 如果 preIndex 当前指向的牌比 current 大，把 preIndex 右边的值用 arr[preIndex] 覆盖</span></span><br><span class="line">      <span class="comment">// 由于 preIndex 是从新接的牌的左边一张牌开始取的，所以会把“插入位置”之后的牌都覆盖了，相当于整体向右挪了一位</span></span><br><span class="line">      <span class="comment">// 包括新接的牌也被覆盖了，所以前面才要单独用一个 current 变量保存新接的牌</span></span><br><span class="line">      <span class="comment">// 当 preIndex 指向的牌比 current 小，说明 preIndex 和 preIndex + 1 “之间” 就是应插入的位置</span></span><br><span class="line">      <span class="comment">// 由于是用覆盖的形式，所以真正的插入位置是 preIndex，在 preIndex 原来位置的牌覆盖给右面了</span></span><br><span class="line">      <span class="comment">// 又由于每次循环 preIndex 都要自减，退出循环之后往插入位置的左边偏了一位，所以退出之后插入位置变成了 preIndex + 1</span></span><br><span class="line">      <span class="comment">// 结束条件是 preIndex 指向的牌比 current 小，找到“插入位置”了</span></span><br><span class="line">      <span class="comment">// 结束条件或者是已经把第 0 张牌覆盖给了第 1 张牌，preIndex 自减之后变成了 -1</span></span><br><span class="line">      <span class="comment">// 所以反过来说，循环继续的条件是 preIndex &gt;= 0 &amp;&amp; arr[preIndex] &gt; current</span></span><br><span class="line">      <span class="comment">// 当 preIndex &lt; 0 时，arr[preIndex] 会越界，所以把 preIndex &gt;= 0 的条件写在前面，短路退出</span></span><br><span class="line">      arr[preIndex + <span class="number">1</span>] = arr[preIndex]; <span class="comment">// 把游标当前指向的值覆盖给它右面的元素</span></span><br><span class="line">      preIndex--; <span class="comment">//向左扫描</span></span><br><span class="line">    &#125;</span><br><span class="line">    arr[preIndex + <span class="number">1</span>] = current; <span class="comment">// “插入”牌</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>计网-02-概述-体系结构</title>
    <url>/blog/2023/%E8%AE%A1%E7%BD%91-02-%E6%A6%82%E8%BF%B0-%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<ul>
<li>OSI 七层协议</li>
<li>TCP/IP 四层协议</li>
<li>讲述原理的五层协议</li>
</ul>
<p>对应谢希仁《计算机网络》第八版 1.7.3</p>
<span id="more"></span>
<ul>
<li>七层协议：参考模型</li>
<li>四层协议：实际用到的</li>
<li>五层协议：上课用到的</li>
</ul>
<table>
<tr>
<td>
应用层
</td>
<td rowspan="3">
应用层
</td>
<td rowspan="3">
应用层
</td>
<td rowspan="3">
HTTP、DNS……
</td>
</tr>
<tr>
<td>
表示层
</td>
</tr>
<tr>
<td>
会话层
</td>
</tr>
<tr>
<td>
运输层
</td>
<td>
运输层
</td>
<td>
运输层
</td>
<td>
TCP、UDP……
</td>
</tr>
<tr>
<td>
网络层
</td>
<td>
网际层
</td>
<td>
网络层
</td>
<td>
IP……
</td>
</tr>
<tr>
<td>
数据链路层
</td>
<td rowspan="2">
链路层
</td>
<td>
数据链路层
</td>
<td rowspan="2">
……
</td>
</tr>
<tr>
<td>
物理层
</td>
<td>
物理层
</td>
</tr>
<tr>
<th>
七层
</th>
<th>
四层
</th>
<th>
五层
</th>
<th>
协议
</th>
</tr>
</table>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>《草蛇惊一》歌词解读</title>
    <url>/blog//holy-shit-grass-snake.html</url>
    <content><![CDATA[<p>《草蛇惊一》收录于初音未来 V4C 专辑《初梦》，作词是<a
href="https://space.bilibili.com/396967">麦当叔劳劳</a>。</p>
<span id="more"></span>
<p><a href="https://www.bilibili.com/video/BV1Px41177ht/">去 B
站观看</a> | 在线听：</p>
<iframe frameborder="no" width="100%" height="86" src="//music.163.com/outchain/player?type=2&amp;id=515455714&amp;auto=1&amp;height=66">
</iframe>
<p>歌词使用了“意识流”的写作手法，解读需要把自己代入主人公的视角。</p>
<p>一千个读者心中有一千个哈姆雷特，我认为歌词写的是主人公内心的矛盾。</p>
<p>还可以参考歌词的<a
href="https://coolmikehatsune22.wordpress.com/2020/11/13/snake-in-the-grass/">英文翻译</a>，译者是
coolmikehatsune22。里面有一些和我想的不一样，或者没想到的东西，会在下文说明。</p>
<h2 id="歌名">歌名</h2>
<p>很容易从歌名联想到“打草惊蛇”。</p>
<p>我认为【草蛇惊一】的【一】是指打草的人。</p>
<p>在这里，草、蛇和打草的人都是主人公自己——主人公自己惊动了自己。</p>
<p>非得拆开的话，【草】是身，【蛇】是心，【惊】是内，【一】是外。</p>
<h2 id="主歌一">主歌一</h2>
<h3 id="羡慕风车">羡慕风车</h3>
<blockquote>
<p><em>羡慕风车 不必去四海漂泊 只要能在原地旋转便能体会风的快乐</em></p>
</blockquote>
<p>第一句最重要，是起因。</p>
<p>主人公的内心独白。我们把主人公此时的视角记作“视角 A”。</p>
<p>【风车】有三层意思：</p>
<ol type="1">
<li>指被【风】驱动的人或物。</li>
<li>指<a
href="https://book.douban.com/subject/34908576/">《堂吉诃德》</a>里的风车所指，即假想敌。</li>
<li>指主人公自己。</li>
</ol>
<p>如果你对【风】这个字的想法和我一样，那你就能明白我在说什么。在网页底部列举了一些关于【风】的其他歌曲。</p>
<p>【原地旋转】就是不作出改变，变成石头，最后变成流浪的风。</p>
<h3 id="及时行乐">及时行乐</h3>
<blockquote>
<p><em>及时行乐 外婆的故事里说因果报应乃白日见鬼</em></p>
</blockquote>
<p>视角 A 想要把自己的人生观向【风车】靠拢。</p>
<p>英文翻译是：“毕竟，奶奶在她的故事里总是在说，你不应该指望报应会降临到坏人身上”。</p>
<h3 id="说书">说书</h3>
<blockquote>
<p><em>转折 没曾想单木不林一丝不线如我 孤单的说书者也能偷乐</em></p>
</blockquote>
<p>主人公突然转换为上帝视角，把自己代入说书者。这样就像<a
href="https://movie.douban.com/subject/1292064/">看电影</a>一样，不用再担心各种现实问题了。</p>
<h3 id="相忘于江湖">相忘于江湖</h3>
<blockquote>
<p><em>相濡以沫不如相忘于江湖 外公总说这是他孤单的借口</em></p>
</blockquote>
<p>进一步妄想自己是【相忘于江湖】的鱼，逃避现实。</p>
<blockquote>
<p>《庄子·内篇·大宗师》：</p>
<ul>
<li>泉涸，鱼相与处于陆，相呴以湿，相濡以沫，不如相忘于江湖。与其誉尧而非桀也，不如两忘而化其道。</li>
</ul>
<p>泉水干了，鱼聚集在陆地。与其用唾沫互相润湿对方，不如各自去往大江大湖，互相忘记。说尧好，说桀不好，和我有什么关系？</p>
<p>《庄子·外篇·天运》：</p>
<ul>
<li>孔子见老聃而语仁义。老聃曰：“夫………………夫鹄不日浴而白，乌不日黔而黑。黑白之朴，不足以为辩，名誉之观，不足以为广。泉涸，鱼相与处于陆，相呴以湿，相濡以沫，不若相忘于江湖。”</li>
</ul>
<p>白天鹅不用每天沐浴，毛自然就是白的；黑乌鸦不用每天染色；毛自然就是黑的。乌鸦的黑和天鹅的白都是出于本然，不足以分辨谁优谁劣；名声和荣誉，更不用去散播张扬。</p>
</blockquote>
<p>英文翻译则非常直白：“与其帮助挽救我们能挽救的东西，不如完全忘记它，这是爷爷总是说的（他孤身一人的）借口”。</p>
<h2 id="主歌二">主歌二</h2>
<h3 id="放轻松">放轻松</h3>
<blockquote>
<p><em>放轻松 压力别弄得太大 飘飘欲仙欲死不知是不是自己的风格</em></p>
</blockquote>
<p>主人公认为自己逃避现实是不对的，此时视角转换回了视角 A。</p>
<p>前半部分是视角 A 对自己说的：没事，放轻松一点。</p>
<p>后半部分是视角 A 对说书者说的：这已经成为你的风格了吗？</p>
<h3 id="除根">除根</h3>
<blockquote>
<p><em>一语道破 下手斩草除根哭吧哭吧 无聊卑微笑话</em></p>
</blockquote>
<p>视角 A【一语道破】了说书者的伪装，并否定掉了风车的人生观。</p>
<p>认为有这种想法的自己是【无聊卑微笑话】，要把这种想法【斩草除根】。</p>
<p>【风车】你就尽情去哭吧。</p>
<h3 id="暴躁">暴躁</h3>
<blockquote>
<p><em>音色也在不知不觉中变得低沉 就像患了名为暴躁的病一样</em></p>
</blockquote>
<p>主人公在否定自己之后，【风车】的一面并没有消失，而是在反噬视角
A。</p>
<p>主人公的【音色】逐渐【低沉】，内心逐渐暴躁。</p>
<h3 id="不回念">不回念</h3>
<blockquote>
<p><em>快停止吧 那张顽固蠢蛋的终身证明我不想再去想念</em></p>
</blockquote>
<p>风车和视角 A
在脑海里互相争斗。主人公希望自己不要再胡思乱想了，给自己开了【顽固蠢蛋的终身证明】。</p>
<p>有马原“否定之否定”规律的影子。<del>所以我说马克思是潜 ↘
伏在西方的一个纯 ↗ 正的中国人。</del></p>
<h2 id="导歌">导歌</h2>
<h3 id="子龙我就不走">子龙我就不走</h3>
<blockquote>
<p><em>一不做二不休自在风流 乐不思蜀子龙我就不走</em></p>
</blockquote>
<p>对于一件事，我要么不做，要么就做到最好，我觉得这样太酷啦；</p>
<p>赵子龙救了刘禅最终导致乐不思蜀，这让我怎么做接下来每一步的决定呢？干脆不做了。</p>
<p>不管怎么断句都可以：</p>
<ul>
<li>乐不思蜀/子龙我/就不走</li>
<li>乐不思蜀子龙/我就不走</li>
</ul>
<p>都是讲主人公不想去走赵云的【乐不思蜀】这一条路，然而这两件事隔了好几十年。</p>
<p>英文注释【子龙】：‘child dragon’, the eponymous snake。</p>
<p>正好呼应歌名，不管是【赵子龙】还是【蛇】都能代指主人公。</p>
<h3 id="金蝉脱壳">金蝉脱壳</h3>
<blockquote>
<p><em>过五关杀六将公子献头 金蝉脱壳孙老头八十二变我有</em></p>
</blockquote>
<p>主人公一会儿代入关羽，一会儿代入荆轲/太子丹。并预想了像他们一样做事之后的结果。</p>
<p>（但是在荆轲刺秦的故事中，是荆轲带着樊於期的头，公子不是带的，也不是被带的。也可能不是这个典故，百度搜【公子献头】出自漫画《火凤燎原》。也可能压根没有典故，只是一种代指）</p>
<p>【金蝉脱壳】指主人公抽离自己为说书者。</p>
<p>【孙老头】就是孙猴子，【八十二变】指思想转换的复杂性。</p>
<p>不管怎么断句都可以：</p>
<ul>
<li>金蝉脱壳/孙老头八十二变我有</li>
<li>金蝉脱壳孙老头/八十二变我有</li>
<li>金蝉脱壳孙老头八十二变/我有</li>
</ul>
<p>我认为是第一种，【金蝉脱壳】和前半句【过五关杀六将公子献头】是连在一起的，用【孙老头八十二变】来修饰主人公想法的混乱程度。</p>
<p>歌手断句是第二种——当然不是初音未来现场发挥的，是作者设计的，可能会听起来更舒服。另外，选择【八十二变】的原因还可能有，【头——八】两个字的连接处确实比【头——七】不管是唱起来还是听起来都更舒服。以及【我】比【孙老头】还多十变。</p>
<p>英文翻译则是第三种，用【孙老头八十二变】来修饰【我有】很多种【金蝉脱壳】的行动。</p>
<h3 id="翻筋斗">翻筋斗</h3>
<blockquote>
<p><em>百闻不如一见来翻筋斗 福星高照五湖四海都随我漫步遨游 山雨欲来风满楼</em></p>
</blockquote>
<p>终于要作决定了！但是在做出决定之前的继续妄想，构成了主人公脑海里的狂风。</p>
<p>【百闻不如一见】【翻筋斗】指【孙老头】想要做出决定。</p>
<p>至于是决定行动，还是决定继续妄想，不得而知。</p>
<h2 id="副歌">副歌</h2>
<h3 id="再见">再见</h3>
<blockquote>
<p><em>再见吧 提线的傀儡师 耻笑咚咚跳的心脏和那不实际的憧憬</em></p>
</blockquote>
<p>傀儡是身体，傀儡师是幻想。主人公向对自己造成心惊肉跳的幻想作别。</p>
<p>英文翻译【不实际的憧憬】为 lofty ideals（远大的理想）。</p>
<h3 id="暴露">暴露</h3>
<blockquote>
<p><em>玩笑吧 我不想听假话 暴露皆大欢喜不攻自破不成熟的笑话</em></p>
</blockquote>
<p>英文翻译：“你想开什么玩笑就开什么玩笑，但我不会再屈服于你的谎言，我会把你一直在快乐地兜售的所有那些毫无实质意义、脆弱的垃圾都吹出来。”</p>
<p>我对前半句的翻译有点不认同，但认为后半句翻译得非常好。</p>
<p>我认为这写的是主人公【不想听假话】的想法和【暴露笑话】的行为，是指主人公给自己的
EQ 开了低通滤波。</p>
<h3 id="再次不回念">再次不回念</h3>
<blockquote>
<p><em>怠慢吗 或许只是懈怠吧 嘁嘁咔咔咚咚咭咭再也不想它</em></p>
</blockquote>
<p>主人公认为，这都是由自己的【怠慢】或者【懈怠】造成的。在又一番思想斗争之后停止了思考——然后进入第二段主歌。</p>
<h2 id="报菜名时间">报菜名时间</h2>
<p>歌词里含有【风】的：</p>
<ul>
<li><del><em>“野马也，尘埃也，生物之以息相吹也”</em></del></li>
<li><a
href="https://www.bilibili.com/video/BV1WR4y147x4">《我没有歌能给你听》</a></li>
<li><a
href="https://www.bilibili.com/video/BV1YW411K7K2/?p=5">《酷瓜树》</a></li>
<li><a
href="https://music.163.com/#/song?id=411314657">《大风吹》</a></li>
<li><a href="https://music.163.com/#/song?id=381872">《时间》</a></li>
<li><a
href="https://music.163.com/#/program?id=2492186574">《风兮风兮》</a></li>
<li><a
href="https://www.bilibili.com/video/BV1wT4y1k7Pw">《白鸟过河滩》</a></li>
<li><a
href="https://www.bilibili.com/video/BV1Lw411d7vS">《斩草歌》</a></li>
<li><a
href="https://www.bilibili.com/video/BV1Rp4y1P7Qe">《四风判词》</a></li>
<li><a href="https://www.dizzylab.net/d/Conformity/">《大风歌
20XX》</a></li>
<li><a
href="https://www.bilibili.com/video/BV1nP4y1W7dr/">《石头歌》</a></li>
</ul>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
  </entry>
  <entry>
    <title>计网-04-物理层-信道的极限容量</title>
    <url>/blog/2023/%E8%AE%A1%E7%BD%91-04-%E7%89%A9%E7%90%86%E5%B1%82-%E4%BF%A1%E9%81%93%E7%9A%84%E6%9E%81%E9%99%90%E5%AE%B9%E9%87%8F/</url>
    <content><![CDATA[<ul>
<li>码元</li>
<li>奈氏准则：无噪声信道中码元传输最高速率
<ul>
<li><span class="math inline">\(W\)</span>：信道的频域带宽</li>
<li><span class="math inline">\(\mathrm{码元/s} = 码元单位 \times
两倍频域带宽\)</span></li>
</ul></li>
<li>信噪比
<ul>
<li>用 <span class="math inline">\(\dfrac{S}{N}\)</span> 表示</li>
<li>用 <span class="math inline">\(\mathrm{dB} = 10
\lg\dfrac{S}{N}\)</span> 表示</li>
</ul></li>
<li>香农公式：信道极限速率
<ul>
<li><span class="math inline">\(\mathrm{bit/s} = W \log_2 (1 +
\dfrac{S}{N})\)</span></li>
</ul></li>
<li>奈氏准则和香农公式的意义</li>
</ul>
<p>对应谢希仁《计算机网络》第八版 2.2.3</p>
<span id="more"></span>
<h2 id="码元">码元</h2>
<p>码元，就是用来表示【码】的单个【元】。</p>
<ul>
<li>【码】就是串 <code>010100...</code></li>
<li>【元】就是符号（x 元 x 次方程）。</li>
<li>【码元】就是用来表示长串的众多符号中的单个符号。</li>
</ul>
<p>比如串 <code>1001 1111</code>，可以分隔成前后两部分，记作
<code>9F</code>。</p>
<p><code>9</code> 和 <code>F</code>
都是码元，是不同的码元，它们分别一一对应（双射）了一个四位二进制数。</p>
<p>如果分隔成八个部分，那 <code>0</code> 和 <code>1</code>
也是码元。</p>
<p>类比信号，码就是波形，码元就是在发送和解读波形时，可以分辨的最小单位波形。</p>
<h2
id="奈氏准则奈奎斯特香农采样定理的一部分">奈氏准则（奈奎斯特—香农采样定理的一部分）</h2>
<p>奈奎斯特这个人推导出的准则：</p>
<p><span class="math display">\[
\begin{aligned}
&amp; 信道中码元传输的最高速率（码元/\mathrm{s}） \\
= \ &amp; 两倍频域带宽（\mathrm{Hz，即 s^{-1}}）\times 码元的单位
\end{aligned}
\]</span></p>
<p>是在理想的、信道内无噪声的情况下。这里的最高速率指的是，保证接收方接收符号（码元）不出错（码间串扰）时的速率上限。符号速率也叫波特（Baud）。</p>
<p>频域带宽用 <span class="math inline">\(W\)</span> 表示。</p>
<h2 id="信噪比">信噪比</h2>
<p>就是信比噪，两种表示方式：</p>
<ul>
<li><span class="math inline">\(\dfrac{S}{N} =
\dfrac{信号平均功率}{噪声平均功率}\)</span></li>
<li><span class="math inline">\(\mathrm{dB} = 10
\lg\dfrac{S}{N}\)</span></li>
</ul>
<p>前者没有单位，也可以看成是 <span
class="math inline">\(\dfrac{瓦特}{瓦特}\)</span>。后者是无量纲单位
<span class="math inline">\(\mathrm{dB}\)</span>。</p>
<h2 id="香农公式香农哈特莱容量定理">香农公式（香农—哈特莱容量定理）</h2>
<p>考虑到了信道有噪声：</p>
<p><span class="math display">\[
\begin{aligned}
信道极限速率 &amp; = \mathrm{bit/s = Hz \times bit} \\
&amp; = W \log_2(1 + \dfrac{S}{N}) \\
\end{aligned}
\]</span></p>
<p>后面那一坨为什么是 <span
class="math inline">\(\mathrm{bit}\)</span>，是通信专业要学的。<span
class="math inline">\(\mathrm{bit}\)</span> 也是无量纲单位（？）。</p>
<h2 id="奈氏准则和香农公式的意义">奈氏准则和香农公式的意义</h2>
<p>信噪比越大，接收方接收到的信息失真越少。</p>
<p>奈氏准则直接假定噪声为 <span
class="math inline">\(0\)</span>，信噪比无穷大，速率只取决于带宽。这鼓励了人们研究更好的编码技术，一次传更多的东西。</p>
<p>香农公式告诉我们：信噪比越大，极限速率越高，但是信噪比不可能无限大，所以速率也有极限。</p>
<p>计算传输速率时，取奈氏准则和香农公式的结果小的。</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>计网-03-物理层-通信基础概念</title>
    <url>/blog/2023/%E8%AE%A1%E7%BD%91-03-%E7%89%A9%E7%90%86%E5%B1%82-%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<ul>
<li>物理层</li>
<li>通信双方的交互方式：单向通信、双向交替通信、双向同时通信</li>
<li>编码和调制</li>
<li>编码方式：不归零制、归零制、曼彻斯特编码、差分曼彻斯特编码</li>
<li>基带调制、带通调制、正交振幅调制</li>
</ul>
<p>对应谢希仁《计算机网络》第八版 2.1~2.2.2</p>
<span id="more"></span>
<h2 id="物理层">物理层</h2>
<p>物理层讨论的是如何传比特的，用什么协议。</p>
<p>它尽量隔开了传输媒体（铜线、光纤等）和上一层（数据链路层）之间的关系。</p>
<p>物理层的协议也叫规程。</p>
<h2 id="通信双方的交互方式">通信双方的交互方式</h2>
<h3 id="单向通信单工">单向通信（单工）</h3>
<p>一段单行道。电视、广播。</p>
<h3 id="双向交替通信半双工">双向交替通信（半双工）</h3>
<p>一段有两个车道的马路，但是规定在一边的车道有车正在走时，另一边（相反方向）的车道不能有车走。对讲机。</p>
<h3 id="双向同时通信全双工">双向同时通信（全双工）</h3>
<p>一段正常的两个车道的马路。</p>
<h2 id="编码和调制">编码和调制</h2>
<ul>
<li><p>把信号（数或者模）转换为数字信号，叫编码。</p></li>
<li><p>把信号（数或者模）转换为模拟信号，叫调制。</p></li>
</ul>
<p>上面的抽象成了简单的情况，还是要根据语义判断。</p>
<h2 id="编码方式">编码方式</h2>
<h3 id="不归零制">不归零制</h3>
<ul>
<li>正电平，<code>‾</code>，<code>1</code></li>
<li>负电平，<code>_</code>，<code>0</code></li>
</ul>
<h3 id="归零制">归零制</h3>
<ul>
<li>正脉冲，凸（<code>-‾-</code>），<code>1</code></li>
<li>负脉冲，凹（<code>-_-</code>），<code>0</code></li>
</ul>
<h3 id="曼彻斯特编码">曼彻斯特编码</h3>
<ul>
<li>中心向下跳变，<code>‾_</code>，<code>1</code></li>
<li>中心向上跳变，<code>_‾</code>，<code>0</code></li>
<li>简记：下 1</li>
</ul>
<h3 id="差分曼彻斯特编码">差分曼彻斯特编码</h3>
<ul>
<li>中心始终跳变</li>
<li>左边界无跳变，<code>1</code>
<ul>
<li><code>_|_‾</code></li>
<li><code>‾|‾_</code></li>
</ul></li>
<li>左边界有跳变，<code>0</code>
<ul>
<li><code>_|‾_</code></li>
<li><code>‾|_‾</code></li>
</ul></li>
<li>简记：边界遇 0 跳变</li>
</ul>
<p>（忽略竖线，是用来当分隔符的）</p>
<h3 id="对比">对比</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 1  1  0  0  1</span><br><span class="line"></span><br><span class="line">‾‾‾‾‾‾______‾‾‾    #不归零制</span><br><span class="line"></span><br><span class="line">-‾--‾--_--_--‾-    #归零制</span><br><span class="line"></span><br><span class="line">‾_|‾_|_‾|_‾|‾_|    #曼彻斯特编码（忽略竖线，是用来当分隔符的）</span><br><span class="line"></span><br><span class="line">‾_|_‾|_‾|_‾|‾_|    #差分曼彻斯特编码（忽略竖线，是用来当分隔符的）</span><br></pre></td></tr></table></figure>
<h2 id="基带调制">基带调制</h2>
<p>基带信号就是原始的数字信号，把基带信号转换成另一种数字信号就叫基带调制。也叫编码。</p>
<h2 id="带通调制">带通调制</h2>
<p>使用载波的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">‾‾‾‾‾‾______‾‾‾    #基带信号</span><br><span class="line"></span><br><span class="line">MWMWMW------MWM    #调幅（AM）</span><br><span class="line"></span><br><span class="line">MWMWMWПUПUПUMWM    #调频（FM）</span><br><span class="line"></span><br><span class="line">MWMWMWWMWMWMMWM    #调相（PM）</span><br></pre></td></tr></table></figure>
<h2 id="正交振幅调制qam">正交振幅调制（QAM）</h2>
<p>简单地理解就是：</p>
<p><span class="math display">\[
\begin{aligned}
调制后的信号 &amp; = 振幅 \times 载波(相位) \\
y &amp; = A\sin(\omega x + \phi) \\
\end{aligned}
\]</span></p>
<p>用不同的<strong>振幅</strong>和<strong>相位</strong>排列组合，来表示（承载）不同的基带信号，比只调幅/只调频/只调相的信息密度高。</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>乐理-A0-频率与音程</title>
    <url>/blog/2023/%E4%B9%90%E7%90%86-A0-%E9%A2%91%E7%8E%87%E4%B8%8E%E9%9F%B3%E7%A8%8B/</url>
    <content><![CDATA[<ul>
<li>钢琴琴键的声音频率</li>
<li>音程与升降号</li>
<li>音程速查表</li>
</ul>
<span id="more"></span>
<h2 id="声音的频率">声音的频率</h2>
<p>声音是由声源振动产生的，通过机械波传递。</p>
<p>声音的频率就是机械波的频率，也是声源振动的频率。</p>
<p>比如声源振动 <span class="math inline">\(440\)</span>
次每秒，频率就是 <span
class="math inline">\(440\mathrm{Hz}\)</span>。“每秒”这个单位 <span
class="math inline">\(\mathrm{s^{-1}}\)</span> 也记作赫兹 <span
class="math inline">\(\mathrm{Hz}\)</span>，是国际单位制“秒”的导出单位。</p>
<p>暂时先不管“基频”、“泛频”等概念。</p>
<h2 id="钢琴琴键的声音频率">钢琴琴键的声音频率</h2>
<ol type="1">
<li><p>规定一个基准频率，比如 <span
class="math inline">\(440\mathrm{Hz}\)</span>，作为第一个音。</p></li>
<li><p>把第一个音的频率乘上 <span
class="math inline">\(\sqrt[12]{2}\)</span>，就得到第二个音。一直乘，乘了十二次之后，第十三个音的频率正好是第一个音频率的两倍。</p>
<p>这十三个音把一个 <span class="math inline">\(1:2\)</span>
的频率区间分成了十二个部分，每个音的频率都是对应部分的端点，相邻两音的频率比为
<span
class="math inline">\(1:\sqrt[12]{2}\)</span>。这就是十二平均律。</p></li>
<li><p>如果把第一个音（<span
class="math inline">\(440\mathrm{Hz}\)</span>）记作<code>A4</code>，往前乘十二次，得到
<span class="math inline">\(880\mathrm{Hz}\)</span>
的音，就记作<code>A5</code>。同理，再乘十二次，得到 <span
class="math inline">\(1760\mathrm{Hz}\)</span> 就是<code>A6</code>。</p>
<p>还可以往后除，<span class="math inline">\(220\mathrm{Hz}\)</span>
是<code>A3</code>，<span class="math inline">\(110\mathrm{Hz}\)</span>
是<code>A2</code>。</p>
<p>同理。<span class="math inline">\(27.5\mathrm{Hz}\)</span>
是<code>A0</code>，<span class="math inline">\(3520\mathrm{Hz}\)</span>
是<code>A7</code>。</p>
<p><code>A7</code>再往前乘三次，得到频率为 <span
class="math inline">\(3520 \times \sqrt[4]{2} \mathrm{Hz}\)</span>
的音，记作<code>C8</code>。</p></li>
<li><p>从<code>A0</code>到<code>C8</code>，有 88 个音，频率构成首项为
<span class="math inline">\(27.5\)</span>，公比为 <span
class="math inline">\(\sqrt[12]{2}\)</span> 的等比数列。这就是 88
键钢琴每个琴键的频率。</p></li>
</ol>
<p>上面是规定 <span class="math inline">\(\mathrm{A4=440Hz}\)</span>
时，还可以有其他规定。</p>
<h2 id="音程">音程</h2>
<p>两个音之间的频率比，称为音程。</p>
<p>频率比为 <span class="math inline">\(1:2\)</span>
的两个音之间，音程称为一个<strong>纯八度</strong>（简称八度）。</p>
<p>快速认识钢琴一个八度里的音：</p>
<p><img src="/blog/images/piano.webp"></p>
<p>为什么这么命名，先别管。</p>
<p>两个相邻琴键的频率比，比如<code>C4</code>和<code>C#4</code>之间，频率比为
<span
class="math inline">\(1:\sqrt[12]{2}\)</span>，称为一个<strong>半音</strong>。也叫小二度。</p>
<p>两个琴键相隔一个琴键的频率比，比如<code>C4</code>和<code>D4</code>之间，频率比为
<span
class="math inline">\(1:\sqrt[6]{2}\)</span>，称为两个半音。也叫一个<strong>全音</strong>或大二度。</p>
<h2 id="音程速查表">音程速查表</h2>
<table>
<colgroup>
<col style="width: 14%" />
<col style="width: 17%" />
<col style="width: 17%" />
<col style="width: 17%" />
<col style="width: 17%" />
<col style="width: 17%" />
</colgroup>
<thead>
<tr class="header">
<th>相隔半音数</th>
<th>音程名（纯）</th>
<th>音程名（大）</th>
<th>音程名（小）</th>
<th>音程名（增）</th>
<th>音程名（减）</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>纯一度</td>
<td></td>
<td></td>
<td></td>
<td>减二度</td>
</tr>
<tr class="even">
<td>1</td>
<td></td>
<td></td>
<td>小二度</td>
<td>增一度</td>
<td></td>
</tr>
<tr class="odd">
<td>2</td>
<td></td>
<td>大二度</td>
<td></td>
<td></td>
<td>减三度</td>
</tr>
<tr class="even">
<td>3</td>
<td></td>
<td></td>
<td>小三度</td>
<td>增二度</td>
<td></td>
</tr>
<tr class="odd">
<td>4</td>
<td></td>
<td>大三度</td>
<td></td>
<td></td>
<td>减四度</td>
</tr>
<tr class="even">
<td>5</td>
<td>纯四度</td>
<td></td>
<td></td>
<td>增三度</td>
<td></td>
</tr>
<tr class="odd">
<td>6</td>
<td></td>
<td></td>
<td></td>
<td>增四度</td>
<td>减五度</td>
</tr>
<tr class="even">
<td>7</td>
<td>纯五度</td>
<td></td>
<td></td>
<td></td>
<td>减六度</td>
</tr>
<tr class="odd">
<td>8</td>
<td></td>
<td></td>
<td>小六度</td>
<td>增五度</td>
<td></td>
</tr>
<tr class="even">
<td>9</td>
<td></td>
<td>大六度</td>
<td></td>
<td></td>
<td>减七度</td>
</tr>
<tr class="odd">
<td>10</td>
<td></td>
<td></td>
<td>小七度</td>
<td>增六度</td>
<td></td>
</tr>
<tr class="even">
<td>11</td>
<td></td>
<td>大七度</td>
<td></td>
<td></td>
<td>减八度</td>
</tr>
<tr class="odd">
<td>12</td>
<td>纯八度</td>
<td></td>
<td></td>
<td>增七度</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="升降号">升降号</h2>
<p><span class="math inline">\(\sharp\)</span>
为升号（sharp），用于把一个音升高半音。</p>
<p>比如 <span class="math inline">\(\mathrm{B \sharp 4 =
C5}\)</span>。<code>B#4 = C5</code></p>
<p><span class="math inline">\(\flat\)</span>
为降号（flat），用于把一个音降低半音。</p>
<p>比如 <span class="math inline">\(\mathrm{D \flat 4 = C \sharp
4}\)</span>。<code>Db4 = C#4</code></p>
<h2 id="作业">作业</h2>
<p>用 Python 写一个程序，输入 88
键钢琴的任一音名，输出对应的频率。当输入<code>all</code>时，输出所有音的频率。（<span
class="math inline">\(\mathrm{A4=440Hz}\)</span>，白键不加升降号，黑键始终为升号，保留三位小数）</p>
<p><strong>暂时能跑的答案：</strong></p>
<p><a
href="https://github.com/ruofancooh/utility-room/tree/main/learning/music">A0-main.py</a></p>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
  </entry>
  <entry>
    <title>乐理-A♯0-音名与唱名、音阶与音级</title>
    <url>/blog/2023/%E4%B9%90%E7%90%86-A%E2%99%AF0-%E9%9F%B3%E5%90%8D%E4%B8%8E%E5%94%B1%E5%90%8D%E3%80%81%E9%9F%B3%E9%98%B6%E4%B8%8E%E9%9F%B3%E7%BA%A7/</url>
    <content><![CDATA[<ul>
<li>音名与唱名</li>
<li>七声音阶及音级</li>
</ul>
<span id="more"></span>
<p><em>英文并不一定是正确的专业名词，只是用来作变量名。同时解释也不一定准确，只是为了方便程序编码时的应用。</em></p>
<h2 id="音名和唱名">音名和唱名</h2>
<ul>
<li><p>音名（pitch name，音高名称）</p>
<ul>
<li><p><code>C4</code>、<code>C#4</code>、<code>D4</code>等是音名，对应<strong>绝对音高</strong>。</p></li>
<li><p>比如 <span class="math inline">\(\mathrm{C4 = 220 \times
\sqrt[4]{2} Hz}\)</span>。</p></li>
</ul></li>
</ul>
<p><img src="/blog/images/piano.webp"></p>
<ul>
<li><p>唱名（sol-fa note，唱名表示法<a href="#fn1" class="footnote-ref"
id="fnref1" role="doc-noteref"><sup>1</sup></a>中的音符）</p>
<ul>
<li><p><code>do</code>、<code>re</code>、<code>mi</code>、<code>fa</code>、<code>sol</code>、<code>la</code>、<code>ti</code>
是唱名，对应<strong>相对音高</strong>。</p></li>
<li><p>在简谱里记作
<code>1</code>、<code>2</code>、<code>3</code>、<code>4</code>、<code>5</code>、<code>6</code>、<code>7</code>。</p></li>
<li><p>我们可以<strong>规定</strong> <code>1</code> 至 <code>7</code>
分别<strong>对应</strong>七个白键 <code>C4</code> 至
<code>B4</code>。这时简谱头部会有 <span class="math inline">\(\mathrm{1
= C}\)</span>。</p></li>
<li><p>在简谱里，如果用 <span class="math inline">\(1\)</span> 表示
<span class="math inline">\(\mathrm{C4}\)</span>，那么 <span
class="math inline">\(\mathrm{\dot{1}}\)</span> 就表示 <span
class="math inline">\(\mathrm{C5}\)</span>。<span
class="math inline">\(\mathrm{\dot{\dot{1}}}\)</span> 表示 <span
class="math inline">\(\mathrm{C6}\)</span>，<span
class="math inline">\(\underset{·}{1}\)</span> 表示 <span
class="math inline">\(\mathrm{C3}\)</span>，以此类推。</p></li>
</ul></li>
</ul>
<h2 id="音阶">音阶</h2>
<blockquote>
<p>在音乐理论中，音阶（scale，尺度）是按基本频率或音高排序的任何一组音符。按音高递增排序的音阶是升序音阶，按音高递减排序的音阶是降序音阶。<a
href="#fn2" class="footnote-ref" id="fnref2"
role="doc-noteref"><sup>2</sup></a></p>
</blockquote>
<p><code>A0 B0 C1 D1 E1 F1 G1 A1 B1 ... C4 D4 E4 F4 G4 A4 B4 ... C7 D7 E7 F7 G7 A7 B7 C8</code>
就是一组升序音阶，对应钢琴的所有白键。</p>
<p>在上面的例子中，每个八度里用到了七个音名<code>C D E F G A B</code>（不包括区间右端点），这被称为<strong>七声音阶</strong>（heptatonic
scale）。</p>
<h2 id="音级">音级</h2>
<p>七声音阶里有七个音级（degree，刻度）：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">音级</th>
<th>名称</th>
<th>英文名称</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><span
class="math inline">\(Ⅰ\)</span></td>
<td>主音</td>
<td>tonic</td>
</tr>
<tr class="even">
<td style="text-align: center;"><span
class="math inline">\(Ⅱ\)</span></td>
<td>上主音</td>
<td>supertonic</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><span
class="math inline">\(Ⅲ\)</span></td>
<td>中音</td>
<td>mediant</td>
</tr>
<tr class="even">
<td style="text-align: center;"><span
class="math inline">\(Ⅳ\)</span></td>
<td>下属音</td>
<td>subdominant</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><span
class="math inline">\(Ⅴ\)</span></td>
<td>属音</td>
<td>dominant</td>
</tr>
<tr class="even">
<td style="text-align: center;"><span
class="math inline">\(Ⅵ\)</span></td>
<td>下中音</td>
<td>submediant</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><span
class="math inline">\(Ⅶ\)</span></td>
<td>导音</td>
<td>subtonic / leading note</td>
</tr>
</tbody>
</table>
<aside id="footnotes" class="footnotes footnotes-end-of-document"
role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p><a
href="https://en.wikipedia.org/wiki/Solmization">https://en.wikipedia.org/wiki/Solmization</a><a
href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p><a
href="https://en.wikipedia.org/wiki/Scale_(music)">https://en.wikipedia.org/wiki/Scale_(music)</a><a
href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</aside>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
  </entry>
  <entry>
    <title>乐理-B0-中古调式</title>
    <url>/blog/2023/%E4%B9%90%E7%90%86-B0-%E4%B8%AD%E5%8F%A4%E8%B0%83%E5%BC%8F/</url>
    <content><![CDATA[<ul>
<li>【音阶相同】是什么意思</li>
<li>调式与移调</li>
<li><span class="math inline">\(7 \times 12\)</span> 种中古调式</li>
<li>不同的中古调式可能使用相同的琴键</li>
</ul>
<span id="more"></span>
<h2 id="音阶相同是什么意思">【音阶相同】是什么意思</h2>
<p><span class="math inline">\(\mathrm{C-D-E-F-G-A-B}\)</span> 和</p>
<p><span class="math inline">\(\mathrm{A-B-C-D-E-F-G}\)</span>
音阶相同吗？</p>
<p>这两组音阶分别都是同一个八度里的音（不包括右端点）。</p>
<p>如果把“音阶”理解为【无限扩展到多个八度后，所有音的绝对音高】的话，得到的答案是相同的，因为【它们都使用了钢琴的所有白键】。</p>
<p>但是看别人网上的回答，这两组音阶是不同的。</p>
<p>原因在于：</p>
<ul>
<li><p>首先，主音不同。 前者以 <span
class="math inline">\(\mathrm{C}\)</span> 为主音，后者以 <span
class="math inline">\(\mathrm{A}\)</span> 为主音。</p></li>
<li><p>其次，音级之间的音程关系（相隔的半音数）不同。</p>
<p>前者为 <span class="math inline">\(2-2-1-2-2-2-1\)</span>，</p>
<p>后者为 <span
class="math inline">\(2-1-2-2-1-2-2\)</span>。（算上下一个八度里的主音）</p></li>
</ul>
<p>我们说两组音阶相同，意思是<strong>它们的主音、音程关系都相同</strong>。</p>
<h2 id="调式">调式</h2>
<p>狭义的调式（mode） = 主音 + 音程关系</p>
<ol type="1">
<li>确定一个起始音（主音）。</li>
<li>从主音开始，往后（高音方向）取不同的音级。这些不同的音相隔的半音数可能不同，直到取完一个八度。</li>
<li>再往前、往后取，直到取完所有八度。</li>
</ol>
<p>比如：</p>
<ul>
<li>以 <span class="math inline">\(\mathrm{C}\)</span>
为主音，音程关系为 <span class="math inline">\((2-2-1-2-2-2-1)\)</span>
的调式，称为 <span class="math inline">\(\mathrm{C}\)</span>
<strong>自然大调</strong>。<code>C Major</code> 用到的音名为： <span
class="math display">\[
\mathrm{...B3-C4-D4-E4-F4-G4-A4-B4-C5...}
\]</span></li>
<li>以 <span class="math inline">\(\mathrm{A}\)</span>
为主音，音程关系为 <span class="math inline">\((2-2-1-2-2-2-1)\)</span>
的调式，称为 <span class="math inline">\(\mathrm{A}\)</span>
<strong>自然大调</strong>。<code>A Major</code> 用到的音名为： <span
class="math display">\[
\mathrm{...G\sharp3-A4-B4-C\sharp4-D4-E4-F\sharp4-G4\sharp-A5...}
\]</span></li>
<li>以 <span class="math inline">\(\mathrm{A}\)</span>
为主音，音程关系为 <span class="math inline">\((2-1-2-2-1-2-2)\)</span>
的调式，称为 <span class="math inline">\(\mathrm{A}\)</span>
<strong>自然小调</strong>。<code>A Minor</code> 用到的音名为： <span
class="math display">\[
\mathrm{...G3-A4-B4-C4-D4-E4-F4-G4-A5...}
\]</span></li>
</ul>
<h2 id="移调">移调</h2>
<p>移调（transpose）就是把所有音同时升高或降低相同的半音数。</p>
<p>移调前后，所有音的相对间隔不变。即音程关系不变。</p>
<h2 id="中古调式">中古调式</h2>
<p>7 种中古调式（church
mode，教会调式）是指广义的调式，只确定了音程关系，还没确定主音。</p>
<p>即确定了<code>主音-上主音-中音-下属音-属音-下中音-导音-主音</code>之间相隔的半音数。</p>
<table>
<colgroup>
<col style="width: 38%" />
<col style="width: 44%" />
<col style="width: 16%" />
</colgroup>
<thead>
<tr class="header">
<th>调式名</th>
<th>别名/结构相同的调式</th>
<th>相隔的半音数</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>伊奥尼亚调式<br/>Ionian mode</td>
<td><strong>自然大调</strong><code>Major</code><br/>中国七声清乐宫调</td>
<td><code>2-2-1-2-2-2-1</code></td>
</tr>
<tr class="even">
<td>多利亚调式<br/>Dorian mode</td>
<td>中国七声清乐商调</td>
<td><code>2-1-2-2-2-1-2</code></td>
</tr>
<tr class="odd">
<td>弗里几亚调式<br/>Phrygian mode</td>
<td>中国七声清乐角调</td>
<td><code>1-2-2-2-1-2-2</code></td>
</tr>
<tr class="even">
<td>利底亚调式<br/>Lydian mode</td>
<td></td>
<td><code>2-2-2-1-2-2-1</code></td>
</tr>
<tr class="odd">
<td>混合利底亚调式<br/>Mixolydian mode</td>
<td>中国七声清乐徵调</td>
<td><code>2-2-1-2-2-1-2</code></td>
</tr>
<tr class="even">
<td>爱奥尼亚调式<br/>Aeolian mode</td>
<td><strong>自然小调</strong><code>Minor</code><br/>中国七声清乐羽调</td>
<td><code>2-1-2-2-1-2-2</code></td>
</tr>
<tr class="odd">
<td>洛克里亚调式<br/>Iocrian mode</td>
<td></td>
<td><code>1-2-2-1-2-2-2</code></td>
</tr>
</tbody>
</table>
<p>在确定了主音之后，就是狭义的 <span class="math inline">\(7 \times
12\)</span> 种调式。因为一个八度里的 <span
class="math inline">\(12\)</span> 个音每一个都可以作为主音。</p>
<p>比如以 <span class="math inline">\(\mathrm{C}\)</span>
为主音的伊奥尼亚调式，就叫 <code>C Ionian</code>、
<code>C Major</code>、“<span class="math inline">\(\mathrm{C}\)</span>
自然大调” 或者 “<span class="math inline">\(\mathrm{C}\)</span>
大调”。</p>
<h2
id="不同的中古调式可能使用相同的琴键">不同的中古调式可能使用相同的琴键</h2>
<p>仔细观察 7 种中古调式，你会发现【相邻音级之间相隔的半音数】在这 7
种调式里是一个循环。</p>
<ul id="colored">
<li>
2-2-1-2-2-2-1
</li>
<li>
2-1-2-2-2-1-2
</li>
<li>
1-2-2-2-1-2-2
</li>
<li>
2-2-2-1-2-2-1
</li>
<li>
2-2-1-2-2-1-2
</li>
<li>
2-1-2-2-1-2-2
</li>
<li>
1-2-2-1-2-2-2
</li>
</ul>
<style>
    .shadow {
        text-shadow: 1px 1px 2px #000;
    }
</style>
<script>
    const colors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'purple'];
    const modes = ['Ionian', 'Dorian', 'Phrygian', 'Lydian', 'Mixolydian', 'Aeolian', 'Iocrian'];
    const ul = document.getElementById("colored");
    const lis = ul.getElementsByTagName("li");

    Array.from(lis).forEach((li, index) => {
        let digits = li.innerHTML.split('-');
        let coloredDigits = digits.map((digit, i) => {
            let colorIndex = (index + i) % colors.length;
            let ret = `<span class="shadow" style="color: ${colors[colorIndex]};">${digit}</span>`;
            return ret;
        });
        li.innerHTML = coloredDigits.join(' - ') + ' ：' + modes[index];
    });
</script>
<p>因此，如果以 <span class="math inline">\(\mathrm{X}\)</span>
为主音，构造自然大调音阶的话（加数字表示升高半音数）：</p>
<ul>
<li><p>以 <span class="math inline">\(\mathrm{Y=(X+2)}\)</span>
为主音，构造出多利亚调式的音阶，与 <span
class="math inline">\(\mathrm{X}\)</span>
自然大调使用的琴键相同。</p></li>
<li><p>以 <span class="math inline">\(\mathrm{Z=(X+2+2)}\)</span>
为主音，构造出弗里几亚调式的音阶，与 <span
class="math inline">\(\mathrm{X}\)</span> 自然大调、<span
class="math inline">\(\mathrm{Y}\)</span>
多利亚调使用的琴键相同。</p></li>
<li><p>……</p></li>
<li><p>以 <span class="math inline">\(\mathrm{V=(X+2+2+1+2+2)}\)</span>
为主音，构造出自然小调的音阶，与 <span
class="math inline">\(\mathrm{X}\)</span> 自然大调、<span
class="math inline">\(\mathrm{Y}\)</span> 多利亚调、<span
class="math inline">\(\mathrm{Z}\)</span> 弗里几亚调……
使用的琴键相同。</p></li>
<li><p>以 <span
class="math inline">\(\mathrm{W=(X+2+2+1+2+2+2)}\)</span>
为主音，构造出洛克里亚调式的音阶，与 <span
class="math inline">\(\mathrm{X}\)</span> 大调、<span
class="math inline">\(\mathrm{Y}\)</span> 多利亚调、<span
class="math inline">\(\mathrm{Z}\)</span> 弗里几亚调…… <span
class="math inline">\(\mathrm{V}\)</span>
自然小调使用的琴键相同。</p></li>
</ul>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
  </entry>
  <entry>
    <title>乐理-C1-三分损益法与十二律</title>
    <url>/blog/2023/%E4%B9%90%E7%90%86-C1-%E4%B8%89%E5%88%86%E6%8D%9F%E7%9B%8A%E6%B3%95%E4%B8%8E%E5%8D%81%E4%BA%8C%E5%BE%8B/</url>
    <content><![CDATA[<ul>
<li>律式与调式的区别</li>
<li>音律定法-&gt;律式
<ul>
<li>三分损益法-&gt;十二律</li>
</ul></li>
</ul>
<span id="more"></span>
<h2 id="律式与调式的区别">律式与调式的区别</h2>
<p>律式是给乐器调音用的。</p>
<p>在古代，并不能精确测得乐器的音高，所以要取一个能代表标准音高的东西，比如竹管。</p>
<ul>
<li><p>竹管越长、敲击时的震动频率越低、音高越低。</p></li>
<li><p>竹管越短、敲击时的震动频率越高、音高越高。</p></li>
</ul>
<p>取不同长度的竹管作为音名。乐器调音完，有了音名之后，在此基础上进行演奏。</p>
<p>不同地区的演奏者喜欢使用不同长度、不同数目的竹管。比如我喜欢使用一些竹管，把它们取名为：</p>
<p><span class="math display">\[
\mathrm{...G3、A3、}\mathbf{C4、D4、E4、G4、A4、}\mathrm{C5、D5...}
\]</span></p>
<p><span class="math inline">\(\mathrm{X \in
\{C,D,E,G,A\}}\)</span>，其中 <span
class="math inline">\(\mathrm{Xn}\)</span> 竹管的长度是 <span
class="math inline">\(\mathrm{X(n+1)}\)</span>
竹管长度的两倍，竹管越长音高越低。</p>
<p>我把使用次数最多的竹管 <span
class="math inline">\(\mathrm{C4、C5...}\)</span> 叫主音 <span
class="math inline">\(\mathrm{C}\)</span>。</p>
<p><span class="math inline">\(\mathrm{C、D、E、G、A}\)</span>
就是我的五个音级，对应唱名<strong>宫</strong>、<strong>商</strong>、<strong>角</strong>、<strong>徵</strong>、<strong>羽</strong>，<code>do</code>
<code>re</code> <code>mi</code> <code>sol</code> <code>la</code> 或者
<span class="math inline">\(1、2、3、5、6\)</span>。</p>
<p>这一些竹管之间，音程关系为 <span
class="math inline">\(2-2-3-2-3\)</span>。还可以往频率高、低的方向继续加竹管，并保持主音和音程关系不变，这就是我的调式。</p>
<p>即：</p>
<ul>
<li>律式规定了：【音名】-&gt;【频率】的对应关系</li>
<li>调式规定了：【唱名】-&gt;【音名】的对应关系</li>
</ul>
<h2 id="三分损益法">三分损益法</h2>
<p>三分损益法定音取的是 <em>单位长度</em>
的竹管，所以宫、商、角、徵、羽是 <em>唱名</em>。</p>
<ol type="1">
<li>取一个 <span class="math inline">\(81\)</span>
个单位长度的定音竹管，作为宫。</li>
<li>截断（损）三分之一，剩余的三分之二（<span class="math inline">\(81
\times \frac{2}{3} = 54\)</span>）作为徵。</li>
<li>再加长（益）三分之一，<span class="math inline">\(54 \times
\frac{4}{3} = 72\)</span>，作为商。</li>
<li>再损三分之一，<span class="math inline">\(72 \times \frac{2}{3} =
48\)</span>，作为羽。</li>
<li>再益三分之一，<span class="math inline">\(48 \times \frac{4}{3} =
64\)</span>，作为角。</li>
</ol>
<table>
<thead>
<tr class="header">
<th><strong>唱名</strong></th>
<th>宫</th>
<th>商</th>
<th>角</th>
<th>徵</th>
<th>羽</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>单位长度</strong></td>
<td><span class="math inline">\(81\)</span></td>
<td><span class="math inline">\(72\)</span></td>
<td><span class="math inline">\(64\)</span></td>
<td><span class="math inline">\(54\)</span></td>
<td><span class="math inline">\(48\)</span></td>
</tr>
</tbody>
</table>
<h2 id="十二律">十二律</h2>
<p><span class="math display">\[
\left\{
\begin{aligned}
64              \times \frac{2}{3} &amp; = 42\frac{2}{3}   \\
42\frac{2}{3}   \times \frac{4}{3} &amp; = 56\frac{8}{9}   \\
56\frac{8}{9}   \times \frac{4}{3} &amp; = 75\frac{23}{27} \\
75\frac{23}{27} \times \frac{2}{3} &amp; = 50\frac{46}{81} \\
\vdots
\end{aligned}
\right.
\]</span></p>
<p>在上面的基础上继续损益，注意在 <span
class="math inline">\(42\frac{2}{3}\)</span>
处益了两次，然后继续损—益—损— ……</p>
<p>并规定 <strong>宫 = 黄钟</strong>，相当于十二平均律简谱的 <span
class="math inline">\(\mathbf{1=C}\)</span>，得到十二律的各个音：</p>
<p>（维基百科版本）</p>
<table>
<thead>
<tr class="header">
<th>序号</th>
<th>音名</th>
<th>来源</th>
<th>去向</th>
<th>单位长度</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>黄钟</td>
<td>起始音</td>
<td>损，林钟</td>
<td><span class="math inline">\(81\)</span></td>
</tr>
<tr class="even">
<td>2</td>
<td>大吕</td>
<td>蕤宾，益</td>
<td>损，夷则</td>
<td><span class="math inline">\(75\frac{23}{27}\)</span></td>
</tr>
<tr class="odd">
<td>3</td>
<td>太簇</td>
<td>林钟，益</td>
<td>损，南吕</td>
<td><span class="math inline">\(72\)</span></td>
</tr>
<tr class="even">
<td>4</td>
<td>夹钟</td>
<td>夷则，益</td>
<td>损，无射</td>
<td><span class="math inline">\(67\frac{103}{243}\)</span></td>
</tr>
<tr class="odd">
<td>5</td>
<td>姑洗 Xiǎn</td>
<td>南吕，益</td>
<td>损，应钟</td>
<td><span class="math inline">\(64\)</span></td>
</tr>
<tr class="even">
<td>6</td>
<td>仲吕</td>
<td>无射，益</td>
<td>损，清黄钟</td>
<td><span class="math inline">\(59\frac{2039}{2187}\)</span></td>
</tr>
<tr class="odd">
<td>7</td>
<td>蕤宾</td>
<td>应钟，益</td>
<td>益，大吕</td>
<td><span class="math inline">\(56\frac{8}{9}\)</span></td>
</tr>
<tr class="even">
<td>8</td>
<td>林钟</td>
<td>黄钟，损</td>
<td>益，太簇</td>
<td><span class="math inline">\(54\)</span></td>
</tr>
<tr class="odd">
<td>9</td>
<td>夷则</td>
<td>大吕，损</td>
<td>益，夹钟</td>
<td><span class="math inline">\(50\frac{46}{81}\)</span></td>
</tr>
<tr class="even">
<td>10</td>
<td>南吕</td>
<td>太簇，损</td>
<td>益，姑洗</td>
<td><span class="math inline">\(48\)</span></td>
</tr>
<tr class="odd">
<td>11</td>
<td>无射 Yì</td>
<td>夹钟，损</td>
<td>益，仲吕</td>
<td><span class="math inline">\(44\frac{692}{729}\)</span></td>
</tr>
<tr class="even">
<td>12</td>
<td>应钟</td>
<td>姑洗，损</td>
<td>益，蕤宾</td>
<td><span class="math inline">\(42\frac{2}{3}\)</span></td>
</tr>
<tr class="odd">
<td>13</td>
<td>清黄钟</td>
<td>仲吕，损</td>
<td>……</td>
<td><span class="math inline">\(39\frac{6265}{6561}\)</span></td>
</tr>
</tbody>
</table>
<h2 id="牢骚">牢骚</h2>
<p>《史记》里给的是近似值：</p>
<p>（维基文库版本）</p>
<blockquote>
<p>律數：九九八十一以爲宮。三分去一，五十四以爲徴。三分益一，七十二以爲商。三分去一，四十八以爲羽。三分益一，六十四以爲角。</p>
<p>黃鐘長八寸七分一，宮。</p>
<p><em>【索隱】黃鐘長八寸十分一，宮。案：上文云「律九九八十一以爲宮」，故云長八寸十分一宮。而云黃鐘長九寸者，九分之寸也。劉歆、鄭玄等皆以爲長九寸即十分之寸，不依此法也。云宮者，黃鐘爲律之首，宮爲五音之長，十一月以黃鐘爲宮，則聲得其正。舊本多作「七分」，蓋誤也。</em></p>
<p>大呂長七寸五分三分。</p>
<p><em>【索隱】謂十一月以黃鐘爲宮，五行相次，土生金，故以大呂爲商者，大呂所以助陽宣化也。</em></p>
<p>太蔟長七寸分二，<strong>角</strong>。夾鐘長六寸分三分一。姑洗長六寸分四，<strong>羽</strong>。</p>
<p><em>【索隱】亦以金生水故也。</em></p>
<p>仲呂長五寸九分三分二，<strong>徴</strong>。蕤賓長五寸六分三分。林鐘長五寸分四，<strong>角</strong>。</p>
<p><em>【索隱】水生木，故爲角。不用蕤賓者，以陰氣起，陽不用事，故去之也。</em></p>
<p>夷則長五寸三分二，商。南呂長四寸分八，<strong>徴</strong>。無射長四寸四分三分二。應鐘長四寸二分三分二，<strong>羽</strong>。</p>
</blockquote>
<p>上面是维基文库的版本。【索隱】是后人对《史记》的注释，我看到有人引用【索隱黃鐘長八寸十分一】，估计是维基文库的编辑者没有改文字样式，我目前也改不了。这不重要，关键是上面有两个角、两个徵和两个羽。除此之外国家数字图书馆还有其他<strong>不同版本的古籍，宫、商、角、徵、羽对应的音名也不一样</strong>。纠结这些也没用，不是所有学乐理的人都有兴趣看古籍，就像学几何不用看《几何原本》，直接看教材。古籍经过一代一代人的传递，肯定会有人发现错误并修改，也肯定会有人延续错误。虽然是传统文化，但现在大众都用十二平均律了。不是看对不对，有些对和错不是完全客观的，而是看适不适合，就像鲁迅的猹字和走的人多了便成了路一样。敲竹管是我臆想出来的，可能压根就不是敲的，而是吹的。</p>
<p>我不是古籍考证内行，也不是乐理内行。但<strong>如果认为以下几点同时成立的话，便可以推出
{宫,商,角,徵,羽} 对应 {黄钟,太簇,姑洗,林钟,南吕}</strong>：</p>
<ol type="1">
<li>{黄钟,大吕,太簇,夹钟,姑洗,仲吕,蕤宾,林钟,夷则,南吕,无射,应钟}的音高顺序是正确的，从低音到高音。</li>
<li>可以把第一条集合里的音类比成十二平均律的一个八度内的音名（绝对音高）。</li>
<li>可以把{宫,商,角,徵,羽,宫,...}类比成十二平均律的唱名（相对音高）。</li>
<li>第三条集合里的音，音程关系始终是 <span
class="math inline">\(2-2-3-2-3\)</span>。</li>
<li>令<strong>宫 = 黄钟</strong>。</li>
</ol>
<h2 id="参考">参考</h2>
<p>[1] 维基百科. 十二律[EB/OL].(2023-07-14)[2023-09-02]. <a
href="https://zh.wikipedia.org/zh-cn/十二律">https://zh.wikipedia.org/zh-cn/十二律</a>.</p>
<p>[2] 司马迁. 史记：卷二十五 律書第三[M/OL].(2020-09-10)[2023-09-02].
<a
href="https://zh.wikisource.org/wiki/史記/卷025">https://zh.wikisource.org/wiki/史記/卷
025</a>.</p>
<p>[3] leeonix.
【科普向】中国古代的十二律以及十二平均律[EB/OL].(2019-07-30)[2023-09-02].
<a
href="https://www.bilibili.com/read/cv3194623/">https://www.bilibili.com/read/cv3194623</a>.</p>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
  </entry>
</search>
